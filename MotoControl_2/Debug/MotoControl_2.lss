
MotoControl_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000506  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000057a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  0000057a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000057a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000005e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e8e  00000000  00000000  00000690  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007bd  00000000  00000000  0000151e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007c8  00000000  00000000  00001cdb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000108  00000000  00000000  000024a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000633  00000000  00000000  000025ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000600  00000000  00000000  00002bdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000031df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 6f 00 	call	0xde	; 0xde <main>
  74:	0c 94 81 02 	jmp	0x502	; 0x502 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <StartMotor1>:
#include "../../MCAL/Includes/PWM_H/PWM.h"
#include "../Includes/Motor_H/Motor.h"
#include "../../Includes/BitwiseOperations.h"
#include "../../MCAL/Includes/DIO_H/DIO.h"

void StartMotor1(uint8 MotorSpeed , uint8 Direction){
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	d8 2f       	mov	r29, r24
  82:	c6 2f       	mov	r28, r22
	
	DIO_SetPinDirection(MOTOR_1_DIR_A_PIN,OUTPUT);
  84:	61 e0       	ldi	r22, 0x01	; 1
  86:	8e e1       	ldi	r24, 0x1E	; 30
  88:	0e 94 fd 00 	call	0x1fa	; 0x1fa <DIO_SetPinDirection>
	DIO_SetPinDirection(MOTOR_1_DIR_B_PIN,OUTPUT);
  8c:	61 e0       	ldi	r22, 0x01	; 1
  8e:	8f e1       	ldi	r24, 0x1F	; 31
  90:	0e 94 fd 00 	call	0x1fa	; 0x1fa <DIO_SetPinDirection>

	switch(Direction){
  94:	cc 23       	and	r28, r28
  96:	19 f0       	breq	.+6      	; 0x9e <StartMotor1+0x22>
  98:	c1 30       	cpi	r28, 0x01	; 1
  9a:	51 f0       	breq	.+20     	; 0xb0 <StartMotor1+0x34>
  9c:	12 c0       	rjmp	.+36     	; 0xc2 <StartMotor1+0x46>
		case MOTOR_RIGHT_DIRECTION : DIO_WritePin(MOTOR_1_DIR_A_PIN,HIGH);
  9e:	61 e0       	ldi	r22, 0x01	; 1
  a0:	8e e1       	ldi	r24, 0x1E	; 30
  a2:	0e 94 7c 00 	call	0xf8	; 0xf8 <DIO_WritePin>
									 DIO_WritePin(MOTOR_1_DIR_B_PIN,LOW);
  a6:	60 e0       	ldi	r22, 0x00	; 0
  a8:	8f e1       	ldi	r24, 0x1F	; 31
  aa:	0e 94 7c 00 	call	0xf8	; 0xf8 <DIO_WritePin>
			break;
  ae:	11 c0       	rjmp	.+34     	; 0xd2 <StartMotor1+0x56>
		case MOTOR_LEFT_DIRECTION :  DIO_WritePin(MOTOR_1_DIR_A_PIN,LOW);
  b0:	60 e0       	ldi	r22, 0x00	; 0
  b2:	8e e1       	ldi	r24, 0x1E	; 30
  b4:	0e 94 7c 00 	call	0xf8	; 0xf8 <DIO_WritePin>
									 DIO_WritePin(MOTOR_1_DIR_B_PIN,HIGH);
  b8:	61 e0       	ldi	r22, 0x01	; 1
  ba:	8f e1       	ldi	r24, 0x1F	; 31
  bc:	0e 94 7c 00 	call	0xf8	; 0xf8 <DIO_WritePin>
			break;
  c0:	08 c0       	rjmp	.+16     	; 0xd2 <StartMotor1+0x56>
		default: DIO_WritePin(MOTOR_1_DIR_A_PIN,LOW);
  c2:	60 e0       	ldi	r22, 0x00	; 0
  c4:	8e e1       	ldi	r24, 0x1E	; 30
  c6:	0e 94 7c 00 	call	0xf8	; 0xf8 <DIO_WritePin>
		         DIO_WritePin(MOTOR_1_DIR_B_PIN,HIGH);
  ca:	61 e0       	ldi	r22, 0x01	; 1
  cc:	8f e1       	ldi	r24, 0x1F	; 31
  ce:	0e 94 7c 00 	call	0xf8	; 0xf8 <DIO_WritePin>
				 break;
	}
	
	StartPWM1(MotorSpeed);
  d2:	8d 2f       	mov	r24, r29
  d4:	0e 94 24 02 	call	0x448	; 0x448 <StartPWM1>
	
}
  d8:	df 91       	pop	r29
  da:	cf 91       	pop	r28
  dc:	08 95       	ret

000000de <main>:

int main(void)
{
	
	
	PWM1_init(FastPWM_Mode,PWM1_InvertingMode,PWM1_Prescaler_1024,OC1A_Pin,0xFFF0);
  de:	00 ef       	ldi	r16, 0xF0	; 240
  e0:	1f ef       	ldi	r17, 0xFF	; 255
  e2:	2d e1       	ldi	r18, 0x1D	; 29
  e4:	44 e0       	ldi	r20, 0x04	; 4
  e6:	62 e0       	ldi	r22, 0x02	; 2
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	0e 94 7e 01 	call	0x2fc	; 0x2fc <PWM1_init>
	StartMotor1(0,MOTOR_RIGHT_DIRECTION);
  ee:	60 e0       	ldi	r22, 0x00	; 0
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	0e 94 3e 00 	call	0x7c	; 0x7c <StartMotor1>
  f6:	ff cf       	rjmp	.-2      	; 0xf6 <main+0x18>

000000f8 <DIO_WritePin>:
	{
	     return ERROR_PIN_NUM ; /* PinNum Out Of Range ( 0 - 31 ) */
		 
    }
						
}
  f8:	88 30       	cpi	r24, 0x08	; 8
  fa:	e8 f4       	brcc	.+58     	; 0x136 <DIO_WritePin+0x3e>
  fc:	61 11       	cpse	r22, r1
  fe:	0e c0       	rjmp	.+28     	; 0x11c <DIO_WritePin+0x24>
 100:	4b b3       	in	r20, 0x1b	; 27
 102:	21 e0       	ldi	r18, 0x01	; 1
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	b9 01       	movw	r22, r18
 108:	02 c0       	rjmp	.+4      	; 0x10e <DIO_WritePin+0x16>
 10a:	66 0f       	add	r22, r22
 10c:	77 1f       	adc	r23, r23
 10e:	8a 95       	dec	r24
 110:	e2 f7       	brpl	.-8      	; 0x10a <DIO_WritePin+0x12>
 112:	cb 01       	movw	r24, r22
 114:	80 95       	com	r24
 116:	84 23       	and	r24, r20
 118:	8b bb       	out	0x1b, r24	; 27
 11a:	08 95       	ret
 11c:	4b b3       	in	r20, 0x1b	; 27
 11e:	21 e0       	ldi	r18, 0x01	; 1
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	b9 01       	movw	r22, r18
 124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_WritePin+0x32>
 126:	66 0f       	add	r22, r22
 128:	77 1f       	adc	r23, r23
 12a:	8a 95       	dec	r24
 12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_WritePin+0x2e>
 12e:	cb 01       	movw	r24, r22
 130:	84 2b       	or	r24, r20
 132:	8b bb       	out	0x1b, r24	; 27
 134:	08 95       	ret
 136:	98 ef       	ldi	r25, 0xF8	; 248
 138:	98 0f       	add	r25, r24
 13a:	98 30       	cpi	r25, 0x08	; 8
 13c:	e8 f4       	brcc	.+58     	; 0x178 <DIO_WritePin+0x80>
 13e:	61 11       	cpse	r22, r1
 140:	0e c0       	rjmp	.+28     	; 0x15e <DIO_WritePin+0x66>
 142:	48 b3       	in	r20, 0x18	; 24
 144:	21 e0       	ldi	r18, 0x01	; 1
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	b9 01       	movw	r22, r18
 14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_WritePin+0x58>
 14c:	66 0f       	add	r22, r22
 14e:	77 1f       	adc	r23, r23
 150:	9a 95       	dec	r25
 152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_WritePin+0x54>
 154:	cb 01       	movw	r24, r22
 156:	80 95       	com	r24
 158:	84 23       	and	r24, r20
 15a:	88 bb       	out	0x18, r24	; 24
 15c:	08 95       	ret
 15e:	48 b3       	in	r20, 0x18	; 24
 160:	21 e0       	ldi	r18, 0x01	; 1
 162:	30 e0       	ldi	r19, 0x00	; 0
 164:	b9 01       	movw	r22, r18
 166:	02 c0       	rjmp	.+4      	; 0x16c <DIO_WritePin+0x74>
 168:	66 0f       	add	r22, r22
 16a:	77 1f       	adc	r23, r23
 16c:	9a 95       	dec	r25
 16e:	e2 f7       	brpl	.-8      	; 0x168 <DIO_WritePin+0x70>
 170:	cb 01       	movw	r24, r22
 172:	84 2b       	or	r24, r20
 174:	88 bb       	out	0x18, r24	; 24
 176:	08 95       	ret
 178:	90 ef       	ldi	r25, 0xF0	; 240
 17a:	98 0f       	add	r25, r24
 17c:	98 30       	cpi	r25, 0x08	; 8
 17e:	e8 f4       	brcc	.+58     	; 0x1ba <DIO_WritePin+0xc2>
 180:	61 11       	cpse	r22, r1
 182:	0e c0       	rjmp	.+28     	; 0x1a0 <DIO_WritePin+0xa8>
 184:	45 b3       	in	r20, 0x15	; 21
 186:	21 e0       	ldi	r18, 0x01	; 1
 188:	30 e0       	ldi	r19, 0x00	; 0
 18a:	b9 01       	movw	r22, r18
 18c:	02 c0       	rjmp	.+4      	; 0x192 <DIO_WritePin+0x9a>
 18e:	66 0f       	add	r22, r22
 190:	77 1f       	adc	r23, r23
 192:	9a 95       	dec	r25
 194:	e2 f7       	brpl	.-8      	; 0x18e <DIO_WritePin+0x96>
 196:	cb 01       	movw	r24, r22
 198:	80 95       	com	r24
 19a:	84 23       	and	r24, r20
 19c:	85 bb       	out	0x15, r24	; 21
 19e:	08 95       	ret
 1a0:	45 b3       	in	r20, 0x15	; 21
 1a2:	21 e0       	ldi	r18, 0x01	; 1
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	b9 01       	movw	r22, r18
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <DIO_WritePin+0xb6>
 1aa:	66 0f       	add	r22, r22
 1ac:	77 1f       	adc	r23, r23
 1ae:	9a 95       	dec	r25
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <DIO_WritePin+0xb2>
 1b2:	cb 01       	movw	r24, r22
 1b4:	84 2b       	or	r24, r20
 1b6:	85 bb       	out	0x15, r24	; 21
 1b8:	08 95       	ret
 1ba:	88 51       	subi	r24, 0x18	; 24
 1bc:	88 30       	cpi	r24, 0x08	; 8
 1be:	e0 f4       	brcc	.+56     	; 0x1f8 <DIO_WritePin+0x100>
 1c0:	61 11       	cpse	r22, r1
 1c2:	0e c0       	rjmp	.+28     	; 0x1e0 <DIO_WritePin+0xe8>
 1c4:	42 b3       	in	r20, 0x12	; 18
 1c6:	21 e0       	ldi	r18, 0x01	; 1
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	b9 01       	movw	r22, r18
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DIO_WritePin+0xda>
 1ce:	66 0f       	add	r22, r22
 1d0:	77 1f       	adc	r23, r23
 1d2:	8a 95       	dec	r24
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <DIO_WritePin+0xd6>
 1d6:	cb 01       	movw	r24, r22
 1d8:	80 95       	com	r24
 1da:	84 23       	and	r24, r20
 1dc:	82 bb       	out	0x12, r24	; 18
 1de:	08 95       	ret
 1e0:	42 b3       	in	r20, 0x12	; 18
 1e2:	21 e0       	ldi	r18, 0x01	; 1
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	b9 01       	movw	r22, r18
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <DIO_WritePin+0xf6>
 1ea:	66 0f       	add	r22, r22
 1ec:	77 1f       	adc	r23, r23
 1ee:	8a 95       	dec	r24
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <DIO_WritePin+0xf2>
 1f2:	cb 01       	movw	r24, r22
 1f4:	84 2b       	or	r24, r20
 1f6:	82 bb       	out	0x12, r24	; 18
 1f8:	08 95       	ret

000001fa <DIO_SetPinDirection>:
* Description : Set Direction To Specific Pin (Input / Output)
*
************************************************************************/
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection){
						
    if( (PinNum >= Pin0) && (PinNum <= Pin7) ) /* Check If PinNum in PortA */
 1fa:	88 30       	cpi	r24, 0x08	; 8
 1fc:	e8 f4       	brcc	.+58     	; 0x238 <DIO_SetPinDirection+0x3e>
	{ 
        if(PinDirection == INPUT) /* Check If Pin Direction = Input */
 1fe:	61 11       	cpse	r22, r1
 200:	0e c0       	rjmp	.+28     	; 0x21e <DIO_SetPinDirection+0x24>
		{
            Clear_Bit(DDRA_REG,PinNum); /* Clear Bit (PinNum) on DDRA Register  */
 202:	4a b3       	in	r20, 0x1a	; 26
 204:	21 e0       	ldi	r18, 0x01	; 1
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	b9 01       	movw	r22, r18
 20a:	02 c0       	rjmp	.+4      	; 0x210 <DIO_SetPinDirection+0x16>
 20c:	66 0f       	add	r22, r22
 20e:	77 1f       	adc	r23, r23
 210:	8a 95       	dec	r24
 212:	e2 f7       	brpl	.-8      	; 0x20c <DIO_SetPinDirection+0x12>
 214:	cb 01       	movw	r24, r22
 216:	80 95       	com	r24
 218:	84 23       	and	r24, r20
 21a:	8a bb       	out	0x1a, r24	; 26
 21c:	08 95       	ret
			                        /* Ex. PinNum = 2 ,Then Clear Bit 2 on DDRA Register */
        }
        else  /* Default State is Set Bit Direction to Output */
		{
            Set_Bit(DDRA_REG,PinNum);  /* Set Bit (PinNum) on DDRA Register  */
 21e:	4a b3       	in	r20, 0x1a	; 26
 220:	21 e0       	ldi	r18, 0x01	; 1
 222:	30 e0       	ldi	r19, 0x00	; 0
 224:	b9 01       	movw	r22, r18
 226:	02 c0       	rjmp	.+4      	; 0x22c <DIO_SetPinDirection+0x32>
 228:	66 0f       	add	r22, r22
 22a:	77 1f       	adc	r23, r23
 22c:	8a 95       	dec	r24
 22e:	e2 f7       	brpl	.-8      	; 0x228 <DIO_SetPinDirection+0x2e>
 230:	cb 01       	movw	r24, r22
 232:	84 2b       	or	r24, r20
 234:	8a bb       	out	0x1a, r24	; 26
 236:	08 95       	ret
			                       /* Ex. PinNum = 5 ,Then Set Bit 5 on DDRA Register */
        }                          
    }
    else if( (PinNum >= Pin8) && (PinNum <= Pin15) ) /* Check If PinNum in PortB */
 238:	98 ef       	ldi	r25, 0xF8	; 248
 23a:	98 0f       	add	r25, r24
 23c:	98 30       	cpi	r25, 0x08	; 8
 23e:	e8 f4       	brcc	.+58     	; 0x27a <DIO_SetPinDirection+0x80>
    {
        if(PinDirection == INPUT) /* Check If Pin Direction = Input */
 240:	61 11       	cpse	r22, r1
 242:	0e c0       	rjmp	.+28     	; 0x260 <DIO_SetPinDirection+0x66>
        { 
            Clear_Bit(DDRB_REG,PinNum-Pin8); /* Clear Bit (PinNum - 8) on DDRB Register  */
 244:	47 b3       	in	r20, 0x17	; 23
 246:	21 e0       	ldi	r18, 0x01	; 1
 248:	30 e0       	ldi	r19, 0x00	; 0
 24a:	b9 01       	movw	r22, r18
 24c:	02 c0       	rjmp	.+4      	; 0x252 <DIO_SetPinDirection+0x58>
 24e:	66 0f       	add	r22, r22
 250:	77 1f       	adc	r23, r23
 252:	9a 95       	dec	r25
 254:	e2 f7       	brpl	.-8      	; 0x24e <DIO_SetPinDirection+0x54>
 256:	cb 01       	movw	r24, r22
 258:	80 95       	com	r24
 25a:	84 23       	and	r24, r20
 25c:	87 bb       	out	0x17, r24	; 23
 25e:	08 95       	ret
        }                                /* Ex. PinNum = 9 ,Then Clear Bit 1 on DDRB Register */
        else /* Default State is Set Bit Direction to Output */
        {
            Set_Bit(DDRB_REG,PinNum-Pin8);  /* Set Bit (PinNum - 8) on DDRA Register  */
 260:	47 b3       	in	r20, 0x17	; 23
 262:	21 e0       	ldi	r18, 0x01	; 1
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	b9 01       	movw	r22, r18
 268:	02 c0       	rjmp	.+4      	; 0x26e <DIO_SetPinDirection+0x74>
 26a:	66 0f       	add	r22, r22
 26c:	77 1f       	adc	r23, r23
 26e:	9a 95       	dec	r25
 270:	e2 f7       	brpl	.-8      	; 0x26a <DIO_SetPinDirection+0x70>
 272:	cb 01       	movw	r24, r22
 274:	84 2b       	or	r24, r20
 276:	87 bb       	out	0x17, r24	; 23
 278:	08 95       	ret
        }                               /* Ex. PinNum = 10 ,Then Set Bit 2 on DDRA Register */
    }
    else if( (PinNum >= Pin16) && (PinNum <= Pin23) ) /* Check If PinNum in PortC */
 27a:	90 ef       	ldi	r25, 0xF0	; 240
 27c:	98 0f       	add	r25, r24
 27e:	98 30       	cpi	r25, 0x08	; 8
 280:	e8 f4       	brcc	.+58     	; 0x2bc <DIO_SetPinDirection+0xc2>
    { 
        if(PinDirection == INPUT) /* Check If Pin Direction = Input */
 282:	61 11       	cpse	r22, r1
 284:	0e c0       	rjmp	.+28     	; 0x2a2 <DIO_SetPinDirection+0xa8>
        {  
            Clear_Bit(DDRC_REG,PinNum-Pin16);/* Clear Bit (PinNum - 16) on DDRC Register  */
 286:	44 b3       	in	r20, 0x14	; 20
 288:	21 e0       	ldi	r18, 0x01	; 1
 28a:	30 e0       	ldi	r19, 0x00	; 0
 28c:	b9 01       	movw	r22, r18
 28e:	02 c0       	rjmp	.+4      	; 0x294 <DIO_SetPinDirection+0x9a>
 290:	66 0f       	add	r22, r22
 292:	77 1f       	adc	r23, r23
 294:	9a 95       	dec	r25
 296:	e2 f7       	brpl	.-8      	; 0x290 <DIO_SetPinDirection+0x96>
 298:	cb 01       	movw	r24, r22
 29a:	80 95       	com	r24
 29c:	84 23       	and	r24, r20
 29e:	84 bb       	out	0x14, r24	; 20
 2a0:	08 95       	ret
			                             /* Ex. PinNum = 17 ,Then Clear Bit 1 on DDRC Register */		
        }                                
        else /* Default State is Set Bit Direction to Output */
        { 
            Set_Bit(DDRC_REG,PinNum-Pin16);  /* Set Bit (PinNum - 16) on DDRC Register  */
 2a2:	44 b3       	in	r20, 0x14	; 20
 2a4:	21 e0       	ldi	r18, 0x01	; 1
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	b9 01       	movw	r22, r18
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <DIO_SetPinDirection+0xb6>
 2ac:	66 0f       	add	r22, r22
 2ae:	77 1f       	adc	r23, r23
 2b0:	9a 95       	dec	r25
 2b2:	e2 f7       	brpl	.-8      	; 0x2ac <DIO_SetPinDirection+0xb2>
 2b4:	cb 01       	movw	r24, r22
 2b6:	84 2b       	or	r24, r20
 2b8:	84 bb       	out	0x14, r24	; 20
 2ba:	08 95       	ret
        }                                /* Ex. PinNum = 18 ,Then Set Bit 2 on DDRC Register */
    }
    else if( (PinNum >= Pin24) && (PinNum <= Pin31) ) /* Check If PinNum in PortD */
 2bc:	88 51       	subi	r24, 0x18	; 24
 2be:	88 30       	cpi	r24, 0x08	; 8
 2c0:	e0 f4       	brcc	.+56     	; 0x2fa <DIO_SetPinDirection+0x100>
    { 
        if(PinDirection == INPUT) /* Check If Pin Direction = Input */
 2c2:	61 11       	cpse	r22, r1
 2c4:	0e c0       	rjmp	.+28     	; 0x2e2 <DIO_SetPinDirection+0xe8>
		{  
            Clear_Bit(DDRD_REG,PinNum-Pin24); /* Clear Bit (PinNum - 24) on DDRD Register  */
 2c6:	41 b3       	in	r20, 0x11	; 17
 2c8:	21 e0       	ldi	r18, 0x01	; 1
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	b9 01       	movw	r22, r18
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <DIO_SetPinDirection+0xda>
 2d0:	66 0f       	add	r22, r22
 2d2:	77 1f       	adc	r23, r23
 2d4:	8a 95       	dec	r24
 2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <DIO_SetPinDirection+0xd6>
 2d8:	cb 01       	movw	r24, r22
 2da:	80 95       	com	r24
 2dc:	84 23       	and	r24, r20
 2de:	81 bb       	out	0x11, r24	; 17
 2e0:	08 95       	ret
        }                                 /* Ex. PinNum = 25 ,Then Clear Bit 1 on DDRD Register */
        else
        { /* Default State is Set Bit Direction to Output */
            Set_Bit(DDRD_REG,PinNum-Pin24);  /* Set Bit (PinNum - 24) on DDRA Register  */
 2e2:	41 b3       	in	r20, 0x11	; 17
 2e4:	21 e0       	ldi	r18, 0x01	; 1
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	b9 01       	movw	r22, r18
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <DIO_SetPinDirection+0xf6>
 2ec:	66 0f       	add	r22, r22
 2ee:	77 1f       	adc	r23, r23
 2f0:	8a 95       	dec	r24
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <DIO_SetPinDirection+0xf2>
 2f4:	cb 01       	movw	r24, r22
 2f6:	84 2b       	or	r24, r20
 2f8:	81 bb       	out	0x11, r24	; 17
 2fa:	08 95       	ret

000002fc <PWM1_init>:
*                                     PWM1_Prescaler_256 , PWM1_Prescaler_1024)
*               4- Set PWM_OutputPin (PWM1_OutputPin_OC1B , PWM1_OutputPin_OC1A)
*               5- Set PWM_Top Value ( 0xFFFF <= PWM_Top <= 0x0003 )
*
************************************************************************/
void PWM1_init(uint8 PWM_OperationMode,uint8 PWM_WaveFormMode,uint8 PWM_Prescaler,uint8 PWM_OutputPin,uint16 PWM_Top){
 2fc:	ff 92       	push	r15
 2fe:	0f 93       	push	r16
 300:	1f 93       	push	r17
 302:	cf 93       	push	r28
 304:	df 93       	push	r29
 306:	f8 2e       	mov	r15, r24
 308:	d6 2f       	mov	r29, r22
 30a:	c4 2f       	mov	r28, r20
	
	TCNT1H_REG = INITIAL_VALUE; /* Reset Timer1 Counter Value = 0x0000 */
 30c:	1d bc       	out	0x2d, r1	; 45
	TCNT1L_REG = INITIAL_VALUE;
 30e:	1c bc       	out	0x2c, r1	; 44
	
	switch(PWM_OutputPin) /* Choose PWM Output Pin */
 310:	22 23       	and	r18, r18
 312:	19 f0       	breq	.+6      	; 0x31a <PWM1_init+0x1e>
 314:	21 30       	cpi	r18, 0x01	; 1
 316:	41 f0       	breq	.+16     	; 0x328 <PWM1_init+0x2c>
 318:	0f c0       	rjmp	.+30     	; 0x338 <PWM1_init+0x3c>
	{
		case PWM1_OutputPin_OC1B : DIO_SetPinDirection(OC1B_Pin,OUTPUT); /* OC1B set to be PWM OutPut */
 31a:	61 e0       	ldi	r22, 0x01	; 1
 31c:	8c e1       	ldi	r24, 0x1C	; 28
 31e:	0e 94 fd 00 	call	0x1fa	; 0x1fa <DIO_SetPinDirection>
                                  PWM_OutputPinFlag = PWM1_OutputPin_OC1B; /* Set Flag to OC1B Pin */
 322:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <PWM_OutputPinFlag>
                                  break;
 326:	0f c0       	rjmp	.+30     	; 0x346 <PWM1_init+0x4a>
		case PWM1_OutputPin_OC1A : DIO_SetPinDirection(OC1A_Pin,OUTPUT); /* OC1A set to be PWM OutPut */
 328:	61 e0       	ldi	r22, 0x01	; 1
 32a:	8d e1       	ldi	r24, 0x1D	; 29
 32c:	0e 94 fd 00 	call	0x1fa	; 0x1fa <DIO_SetPinDirection>
		                          PWM_OutputPinFlag = PWM1_OutputPin_OC1A; /* Set Flag to OC1A Pin */
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <PWM_OutputPinFlag>
		                          break;
 336:	07 c0       	rjmp	.+14     	; 0x346 <PWM1_init+0x4a>
		default: DIO_SetPinDirection(OC1A_Pin,OUTPUT); /* OC1A set to be PWM OutPut (Default) */
 338:	61 e0       	ldi	r22, 0x01	; 1
 33a:	8d e1       	ldi	r24, 0x1D	; 29
 33c:	0e 94 fd 00 	call	0x1fa	; 0x1fa <DIO_SetPinDirection>
		         PWM_OutputPinFlag = PWM1_OutputPin_OC1A; /* Set Flag to OC1A Pin */
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <PWM_OutputPinFlag>
		         break;
	}
	
	switch(PWM_OperationMode) /* Choose Mode of Operation Fast PWM or Phase Correct PWM */
 346:	ff 20       	and	r15, r15
 348:	21 f0       	breq	.+8      	; 0x352 <PWM1_init+0x56>
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	f8 16       	cp	r15, r24
 34e:	71 f0       	breq	.+28     	; 0x36c <PWM1_init+0x70>
 350:	1a c0       	rjmp	.+52     	; 0x386 <PWM1_init+0x8a>
	{
		
		case FastPWM_Mode : Clear_Bit(TCCR1A_REG,WGM10_BIT); /* Set Mode 14 = Fast PWM  */
 352:	8f b5       	in	r24, 0x2f	; 47
 354:	8e 7f       	andi	r24, 0xFE	; 254
 356:	8f bd       	out	0x2f, r24	; 47
		                    Set_Bit(TCCR1A_REG,WGM11_BIT);   /* WGM10_Bit = 0 , WGM11_Bit = 1 */
 358:	8f b5       	in	r24, 0x2f	; 47
 35a:	82 60       	ori	r24, 0x02	; 2
 35c:	8f bd       	out	0x2f, r24	; 47
		                    Set_Bit(TCCR1A_REG,WGM12_BIT);   /* WGM12_Bit = 1 , WGM13_Bit = 1 */
 35e:	8f b5       	in	r24, 0x2f	; 47
 360:	88 60       	ori	r24, 0x08	; 8
 362:	8f bd       	out	0x2f, r24	; 47
		                    Set_Bit(TCCR1A_REG,WGM13_BIT);
 364:	8f b5       	in	r24, 0x2f	; 47
 366:	80 61       	ori	r24, 0x10	; 16
 368:	8f bd       	out	0x2f, r24	; 47
							break;
 36a:	19 c0       	rjmp	.+50     	; 0x39e <PWM1_init+0xa2>
								
		case PhaseCorrectPWM_Mode : Clear_Bit(TCCR1A_REG,WGM10_BIT); /* Set Mode 10 = PWM, Phase Correct  */
 36c:	8f b5       	in	r24, 0x2f	; 47
 36e:	8e 7f       	andi	r24, 0xFE	; 254
 370:	8f bd       	out	0x2f, r24	; 47
		                            Set_Bit(TCCR1A_REG,WGM11_BIT);   /* WGM10_Bit = 0 , WGM11_Bit = 1 */
 372:	8f b5       	in	r24, 0x2f	; 47
 374:	82 60       	ori	r24, 0x02	; 2
 376:	8f bd       	out	0x2f, r24	; 47
		                            Clear_Bit(TCCR1A_REG,WGM12_BIT); /* WGM12_Bit = 0 , WGM13_Bit = 1 */
 378:	8f b5       	in	r24, 0x2f	; 47
 37a:	87 7f       	andi	r24, 0xF7	; 247
 37c:	8f bd       	out	0x2f, r24	; 47
		                            Set_Bit(TCCR1A_REG,WGM13_BIT);
 37e:	8f b5       	in	r24, 0x2f	; 47
 380:	80 61       	ori	r24, 0x10	; 16
 382:	8f bd       	out	0x2f, r24	; 47
		                            break;
 384:	0c c0       	rjmp	.+24     	; 0x39e <PWM1_init+0xa2>
		default: Clear_Bit(TCCR1A_REG,WGM10_BIT); /* Set Mode 14 = Fast PWM (Default)  */
 386:	8f b5       	in	r24, 0x2f	; 47
 388:	8e 7f       	andi	r24, 0xFE	; 254
 38a:	8f bd       	out	0x2f, r24	; 47
		         Set_Bit(TCCR1A_REG,WGM11_BIT);   /* WGM10_Bit = 0 , WGM11_Bit = 1 */
 38c:	8f b5       	in	r24, 0x2f	; 47
 38e:	82 60       	ori	r24, 0x02	; 2
 390:	8f bd       	out	0x2f, r24	; 47
		         Set_Bit(TCCR1A_REG,WGM12_BIT);   /* WGM12_Bit = 1 , WGM13_Bit = 1 */
 392:	8f b5       	in	r24, 0x2f	; 47
 394:	88 60       	ori	r24, 0x08	; 8
 396:	8f bd       	out	0x2f, r24	; 47
		         Set_Bit(TCCR1A_REG,WGM13_BIT);
 398:	8f b5       	in	r24, 0x2f	; 47
 39a:	80 61       	ori	r24, 0x10	; 16
 39c:	8f bd       	out	0x2f, r24	; 47
		         break;	
	}
	
	
	switch(PWM_WaveFormMode){
 39e:	d1 30       	cpi	r29, 0x01	; 1
 3a0:	59 f0       	breq	.+22     	; 0x3b8 <PWM1_init+0xbc>
 3a2:	18 f0       	brcs	.+6      	; 0x3aa <PWM1_init+0xae>
 3a4:	d2 30       	cpi	r29, 0x02	; 2
 3a6:	79 f0       	breq	.+30     	; 0x3c6 <PWM1_init+0xca>
 3a8:	15 c0       	rjmp	.+42     	; 0x3d4 <PWM1_init+0xd8>
		
		case PWM1_ToggleMode        : Set_Bit(TCCR1A_REG,COM1A0_BIT);  /* Toggle Mode Mode */
 3aa:	8f b5       	in	r24, 0x2f	; 47
 3ac:	80 64       	ori	r24, 0x40	; 64
 3ae:	8f bd       	out	0x2f, r24	; 47
		                             Clear_Bit(TCCR1A_REG,COM1A1_BIT);  /* COM1A0_Bit = 1 , COM1A1_Bit = 0 */
 3b0:	8f b5       	in	r24, 0x2f	; 47
 3b2:	8f 77       	andi	r24, 0x7F	; 127
 3b4:	8f bd       	out	0x2f, r24	; 47
		                             break;
 3b6:	14 c0       	rjmp	.+40     	; 0x3e0 <PWM1_init+0xe4>
									 
		case PWM1_non_InvertingMode : Clear_Bit(TCCR1A_REG,COM1A0_BIT);  /* Non-Inverting Mode */
 3b8:	8f b5       	in	r24, 0x2f	; 47
 3ba:	8f 7b       	andi	r24, 0xBF	; 191
 3bc:	8f bd       	out	0x2f, r24	; 47
		                             Set_Bit(TCCR1A_REG,COM1A1_BIT);  /* COM1A0_Bit = 0 , COM1A1_Bit = 1 */
 3be:	8f b5       	in	r24, 0x2f	; 47
 3c0:	80 68       	ori	r24, 0x80	; 128
 3c2:	8f bd       	out	0x2f, r24	; 47
		                             break;
 3c4:	0d c0       	rjmp	.+26     	; 0x3e0 <PWM1_init+0xe4>
									 
		case PWM1_InvertingMode     : Set_Bit(TCCR1A_REG,COM1A0_BIT);  /* Inverting Mode */
 3c6:	8f b5       	in	r24, 0x2f	; 47
 3c8:	80 64       	ori	r24, 0x40	; 64
 3ca:	8f bd       	out	0x2f, r24	; 47
		                             Set_Bit(TCCR1A_REG,COM1A1_BIT);  /* COM1A0_Bit = 1 , COM1A1_Bit = 1 */
 3cc:	8f b5       	in	r24, 0x2f	; 47
 3ce:	80 68       	ori	r24, 0x80	; 128
 3d0:	8f bd       	out	0x2f, r24	; 47
									 break;
 3d2:	06 c0       	rjmp	.+12     	; 0x3e0 <PWM1_init+0xe4>
	   default: Set_Bit(TCCR1A_REG,COM1A0_BIT);  /* Inverting Mode (Default) */
 3d4:	8f b5       	in	r24, 0x2f	; 47
 3d6:	80 64       	ori	r24, 0x40	; 64
 3d8:	8f bd       	out	0x2f, r24	; 47
	            Set_Bit(TCCR1A_REG,COM1A1_BIT);  /* COM1A0_Bit = 1 , COM1A1_Bit = 1 */
 3da:	8f b5       	in	r24, 0x2f	; 47
 3dc:	80 68       	ori	r24, 0x80	; 128
 3de:	8f bd       	out	0x2f, r24	; 47
	            break;
		
	}
	
	
	switch(PWM_Prescaler) /* Choose PWM Prescaler */
 3e0:	c2 30       	cpi	r28, 0x02	; 2
 3e2:	91 f0       	breq	.+36     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3e4:	28 f4       	brcc	.+10     	; 0x3f0 <PWM1_init+0xf4>
 3e6:	cc 23       	and	r28, r28
 3e8:	41 f0       	breq	.+16     	; 0x3fa <PWM1_init+0xfe>
 3ea:	c1 30       	cpi	r28, 0x01	; 1
 3ec:	49 f0       	breq	.+18     	; 0x400 <__LOCK_REGION_LENGTH__>
 3ee:	18 c0       	rjmp	.+48     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 3f0:	c3 30       	cpi	r28, 0x03	; 3
 3f2:	71 f0       	breq	.+28     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3f4:	c4 30       	cpi	r28, 0x04	; 4
 3f6:	81 f0       	breq	.+32     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 3f8:	13 c0       	rjmp	.+38     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
	{
		
		case PWM1_Prescaler_1    : PWM1_PrescalerFlag = PWM1_Prescaler_1 ;    /* clk / 1 (No prescaling) */
 3fa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
		                           break;
 3fe:	13 c0       	rjmp	.+38     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
		case PWM1_Prescaler_8    : PWM1_PrescalerFlag = PWM1_Prescaler_8 ;    /* clk / 8 (From prescaler) */
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
		                           break;
 406:	0f c0       	rjmp	.+30     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
		case PWM1_Prescaler_64   : PWM1_PrescalerFlag = PWM1_Prescaler_64 ;   /* clk / 64 (From prescaler) */
 408:	82 e0       	ldi	r24, 0x02	; 2
 40a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
		                           break;
 40e:	0b c0       	rjmp	.+22     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
		case PWM1_Prescaler_256  : PWM1_PrescalerFlag = PWM1_Prescaler_256 ;  /* clk / 256 (From prescaler) */
 410:	83 e0       	ldi	r24, 0x03	; 3
 412:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
		                           break;
 416:	07 c0       	rjmp	.+14     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
		case PWM1_Prescaler_1024 : PWM1_PrescalerFlag = PWM1_Prescaler_1024 ; /* clk / 1024 (From prescaler) */
 418:	84 e0       	ldi	r24, 0x04	; 4
 41a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
		                           break;
 41e:	03 c0       	rjmp	.+6      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
		default: PWM1_PrescalerFlag = PWM1_Prescaler_64 ; /* Default is 64 Prescaler */
 420:	82 e0       	ldi	r24, 0x02	; 2
 422:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
		                           break;
		
	}


	if( ( PWM_Top <= PWM1_TOP_MAX ) && ( PWM_Top >= PWM1_TOP_MIN ) ) 
 426:	c8 01       	movw	r24, r16
 428:	03 97       	sbiw	r24, 0x03	; 3
 42a:	8d 3f       	cpi	r24, 0xFD	; 253
 42c:	91 05       	cpc	r25, r1
 42e:	18 f4       	brcc	.+6      	; 0x436 <__LOCK_REGION_LENGTH__+0x36>
	{
		ICR1H_REG = (uint8)(PWM_Top>>8U); /* ICR1 Register is Top = PWM_Top */
 430:	17 bd       	out	0x27, r17	; 39
		ICR1L_REG = (uint8)(PWM_Top);
 432:	06 bd       	out	0x26, r16	; 38
 434:	03 c0       	rjmp	.+6      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
	}
	else
	{
		ICR1H_REG = (uint8)(PWM1_TOP_MAX>>8U); /* (Default) ICR1 Register is Top = PWM1_TOP_MAX ( 0xFFFF ) */
 436:	17 bc       	out	0x27, r1	; 39
		ICR1L_REG = (uint8)(PWM1_TOP_MAX);
 438:	8f ef       	ldi	r24, 0xFF	; 255
 43a:	86 bd       	out	0x26, r24	; 38
		
	}

	
	
}
 43c:	df 91       	pop	r29
 43e:	cf 91       	pop	r28
 440:	1f 91       	pop	r17
 442:	0f 91       	pop	r16
 444:	ff 90       	pop	r15
 446:	08 95       	ret

00000448 <StartPWM1>:
void StartPWM1(uint8 PWM_DutyCycle)
{
	
	uint16 DutyCycle_temp;
	DutyCycle_temp = 100; //(( (PWM_DutyCycle) * ( ICR1H_REG + ICR1L_REG ) ) /ONE_HUNDRED ); /* DutyCycle = ( PWM_Duty / 100 ) x Top */
	switch (PWM_OutputPinFlag){
 448:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <PWM_OutputPinFlag>
 44c:	88 23       	and	r24, r24
 44e:	19 f0       	breq	.+6      	; 0x456 <StartPWM1+0xe>
 450:	81 30       	cpi	r24, 0x01	; 1
 452:	29 f0       	breq	.+10     	; 0x45e <StartPWM1+0x16>
 454:	08 c0       	rjmp	.+16     	; 0x466 <StartPWM1+0x1e>
		case PWM1_OutputPin_OC1B : OCR1BH_REG = (uint8)(DutyCycle_temp>>8U); /* Set DutyCycle Value in OCR1B Register */
 456:	19 bc       	out	0x29, r1	; 41
		                           OCR1BL_REG = (uint8)(DutyCycle_temp);
 458:	84 e6       	ldi	r24, 0x64	; 100
 45a:	88 bd       	out	0x28, r24	; 40
								   break;
 45c:	07 c0       	rjmp	.+14     	; 0x46c <StartPWM1+0x24>
								   
		case PWM1_OutputPin_OC1A : OCR1AH_REG = (uint8)(DutyCycle_temp>>8U); /* Set DutyCycle Value in OCR1A Register */
 45e:	1b bc       	out	0x2b, r1	; 43
		                           OCR1AL_REG = (uint8)(DutyCycle_temp);
 460:	84 e6       	ldi	r24, 0x64	; 100
 462:	8a bd       	out	0x2a, r24	; 42
								   break;
 464:	03 c0       	rjmp	.+6      	; 0x46c <StartPWM1+0x24>
		default: OCR1AH_REG = (uint8)(DutyCycle_temp>>8U); /* Set DutyCycle Value in OCR1A Register (Default) */
 466:	1b bc       	out	0x2b, r1	; 43
		         OCR1AL_REG = (uint8)(DutyCycle_temp);
 468:	84 e6       	ldi	r24, 0x64	; 100
 46a:	8a bd       	out	0x2a, r24	; 42
		         break;
	}

	
	switch(PWM1_PrescalerFlag){
 46c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 470:	82 30       	cpi	r24, 0x02	; 2
 472:	f9 f0       	breq	.+62     	; 0x4b2 <StartPWM1+0x6a>
 474:	28 f4       	brcc	.+10     	; 0x480 <StartPWM1+0x38>
 476:	88 23       	and	r24, r24
 478:	41 f0       	breq	.+16     	; 0x48a <StartPWM1+0x42>
 47a:	81 30       	cpi	r24, 0x01	; 1
 47c:	81 f0       	breq	.+32     	; 0x49e <StartPWM1+0x56>
 47e:	37 c0       	rjmp	.+110    	; 0x4ee <StartPWM1+0xa6>
 480:	83 30       	cpi	r24, 0x03	; 3
 482:	09 f1       	breq	.+66     	; 0x4c6 <StartPWM1+0x7e>
 484:	84 30       	cpi	r24, 0x04	; 4
 486:	49 f1       	breq	.+82     	; 0x4da <StartPWM1+0x92>
 488:	32 c0       	rjmp	.+100    	; 0x4ee <StartPWM1+0xa6>
		
		case PWM1_Prescaler_1    : Set_Bit(TCCR1B_REG,CS10_BIT); /* Start PWM with prescaler = 1 */
 48a:	8e b5       	in	r24, 0x2e	; 46
 48c:	81 60       	ori	r24, 0x01	; 1
 48e:	8e bd       	out	0x2e, r24	; 46
		                           Clear_Bit(TCCR1B_REG,CS11_BIT);
 490:	8e b5       	in	r24, 0x2e	; 46
 492:	8d 7f       	andi	r24, 0xFD	; 253
 494:	8e bd       	out	0x2e, r24	; 46
		                           Clear_Bit(TCCR1B_REG,CS12_BIT);
 496:	8e b5       	in	r24, 0x2e	; 46
 498:	8b 7f       	andi	r24, 0xFB	; 251
 49a:	8e bd       	out	0x2e, r24	; 46
		                           break;
 49c:	08 95       	ret
								   
		case PWM1_Prescaler_8    : Clear_Bit(TCCR1B_REG,CS10_BIT); /* Start PWM with prescaler = 8 */
 49e:	8e b5       	in	r24, 0x2e	; 46
 4a0:	8e 7f       	andi	r24, 0xFE	; 254
 4a2:	8e bd       	out	0x2e, r24	; 46
		                           Set_Bit(TCCR1B_REG,CS11_BIT);
 4a4:	8e b5       	in	r24, 0x2e	; 46
 4a6:	82 60       	ori	r24, 0x02	; 2
 4a8:	8e bd       	out	0x2e, r24	; 46
		                           Clear_Bit(TCCR1B_REG,CS12_BIT);
 4aa:	8e b5       	in	r24, 0x2e	; 46
 4ac:	8b 7f       	andi	r24, 0xFB	; 251
 4ae:	8e bd       	out	0x2e, r24	; 46
		                           break;
 4b0:	08 95       	ret
								   
		case PWM1_Prescaler_64   : Set_Bit(TCCR1B_REG,CS10_BIT); /* Start PWM with prescaler = 64 */
 4b2:	8e b5       	in	r24, 0x2e	; 46
 4b4:	81 60       	ori	r24, 0x01	; 1
 4b6:	8e bd       	out	0x2e, r24	; 46
		                           Set_Bit(TCCR1B_REG,CS11_BIT);
 4b8:	8e b5       	in	r24, 0x2e	; 46
 4ba:	82 60       	ori	r24, 0x02	; 2
 4bc:	8e bd       	out	0x2e, r24	; 46
		                           Clear_Bit(TCCR1B_REG,CS12_BIT);
 4be:	8e b5       	in	r24, 0x2e	; 46
 4c0:	8b 7f       	andi	r24, 0xFB	; 251
 4c2:	8e bd       	out	0x2e, r24	; 46
		                           break;
 4c4:	08 95       	ret
								   
		case PWM1_Prescaler_256  : Clear_Bit(TCCR1B_REG,CS10_BIT); /* Start PWM with prescaler = 256 */
 4c6:	8e b5       	in	r24, 0x2e	; 46
 4c8:	8e 7f       	andi	r24, 0xFE	; 254
 4ca:	8e bd       	out	0x2e, r24	; 46
		                           Clear_Bit(TCCR1B_REG,CS11_BIT);
 4cc:	8e b5       	in	r24, 0x2e	; 46
 4ce:	8d 7f       	andi	r24, 0xFD	; 253
 4d0:	8e bd       	out	0x2e, r24	; 46
		                           Set_Bit(TCCR1B_REG,CS12_BIT);
 4d2:	8e b5       	in	r24, 0x2e	; 46
 4d4:	84 60       	ori	r24, 0x04	; 4
 4d6:	8e bd       	out	0x2e, r24	; 46
		                           break;
 4d8:	08 95       	ret
								   
		case PWM1_Prescaler_1024 : Set_Bit(TCCR1B_REG,CS10_BIT); /* Start PWM with prescaler = 1024 */
 4da:	8e b5       	in	r24, 0x2e	; 46
 4dc:	81 60       	ori	r24, 0x01	; 1
 4de:	8e bd       	out	0x2e, r24	; 46
		                           Clear_Bit(TCCR1B_REG,CS11_BIT);
 4e0:	8e b5       	in	r24, 0x2e	; 46
 4e2:	8d 7f       	andi	r24, 0xFD	; 253
 4e4:	8e bd       	out	0x2e, r24	; 46
		                           Set_Bit(TCCR1B_REG,CS12_BIT);
 4e6:	8e b5       	in	r24, 0x2e	; 46
 4e8:	84 60       	ori	r24, 0x04	; 4
 4ea:	8e bd       	out	0x2e, r24	; 46
								   break;
 4ec:	08 95       	ret
								   
		default: Set_Bit(TCCR1B_REG,CS10_BIT); /* Start PWM with prescaler = 1024 (Default) */
 4ee:	8e b5       	in	r24, 0x2e	; 46
 4f0:	81 60       	ori	r24, 0x01	; 1
 4f2:	8e bd       	out	0x2e, r24	; 46
		         Clear_Bit(TCCR1B_REG,CS11_BIT);
 4f4:	8e b5       	in	r24, 0x2e	; 46
 4f6:	8d 7f       	andi	r24, 0xFD	; 253
 4f8:	8e bd       	out	0x2e, r24	; 46
		         Set_Bit(TCCR1B_REG,CS12_BIT);
 4fa:	8e b5       	in	r24, 0x2e	; 46
 4fc:	84 60       	ori	r24, 0x04	; 4
 4fe:	8e bd       	out	0x2e, r24	; 46
 500:	08 95       	ret

00000502 <_exit>:
 502:	f8 94       	cli

00000504 <__stop_program>:
 504:	ff cf       	rjmp	.-2      	; 0x504 <__stop_program>

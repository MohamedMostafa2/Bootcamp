
TTC_Scheduler_Sprint4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000858  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000008cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002d  00800060  00800060  000008cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008cc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000938  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000150a  00000000  00000000  00000a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b32  00000000  00000000  00001f8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000db7  00000000  00000000  00002abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000234  00000000  00000000  00003874  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007fb  00000000  00000000  00003aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000849  00000000  00000000  000042a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00004aec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 b5 02 	jmp	0x56a	; 0x56a <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ad 38       	cpi	r26, 0x8D	; 141
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  74:	0c 94 2a 04 	jmp	0x854	; 0x854 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Task0>:


void Task0 (void)
{
	
  TurnLED(Led0,Led_Toggle);
  7c:	62 e0       	ldi	r22, 0x02	; 2
  7e:	8c e0       	ldi	r24, 0x0C	; 12
  80:	0e 94 5a 00 	call	0xb4	; 0xb4 <TurnLED>
  84:	08 95       	ret

00000086 <Task1>:
	
}

void Task1 (void)
{
	TurnLED(Led1,Led_Toggle);
  86:	62 e0       	ldi	r22, 0x02	; 2
  88:	8d e0       	ldi	r24, 0x0D	; 13
  8a:	0e 94 5a 00 	call	0xb4	; 0xb4 <TurnLED>
  8e:	08 95       	ret

00000090 <Task2>:
}

void Task2 (void)
{
	TurnLED(Led2,Led_Toggle);
  90:	62 e0       	ldi	r22, 0x02	; 2
  92:	8e e0       	ldi	r24, 0x0E	; 14
  94:	0e 94 5a 00 	call	0xb4	; 0xb4 <TurnLED>
  98:	08 95       	ret

0000009a <ReadButtom>:
#include "../../MCAL/Includes/DIO_H/DIO.h"


uint8 ReadButtom(uint8 ButtonNum){
	
	switch(ButtonNum){
  9a:	8a 30       	cpi	r24, 0x0A	; 10
  9c:	29 f0       	breq	.+10     	; 0xa8 <ReadButtom+0xe>
  9e:	87 31       	cpi	r24, 0x17	; 23
  a0:	39 f4       	brne	.+14     	; 0xb0 <ReadButtom+0x16>
		
		case Button0 : return DIO_ReadPin(Button0);
  a2:	0e 94 55 01 	call	0x2aa	; 0x2aa <DIO_ReadPin>
  a6:	08 95       	ret
					   break;
		case Button1 : return DIO_ReadPin(Button1);
  a8:	8a e0       	ldi	r24, 0x0A	; 10
  aa:	0e 94 55 01 	call	0x2aa	; 0x2aa <DIO_ReadPin>
  ae:	08 95       	ret
		               break;
		default: return ERROR; 
  b0:	8f ef       	ldi	r24, 0xFF	; 255
		         break;
	}
	
  b2:	08 95       	ret

000000b4 <TurnLED>:
	
}

void TurnLED(uint8 LED_Num,uint8 LED_State){

	if (LED_State == Led_Toggle)
  b4:	62 30       	cpi	r22, 0x02	; 2
  b6:	19 f4       	brne	.+6      	; 0xbe <TurnLED+0xa>
	{
		DIO_TogglePin(LED_Num);
  b8:	0e 94 13 01 	call	0x226	; 0x226 <DIO_TogglePin>
  bc:	08 95       	ret
	}
	else
	{
		DIO_WritePin(LED_Num ,LED_State);
  be:	0e 94 92 00 	call	0x124	; 0x124 <DIO_WritePin>
  c2:	08 95       	ret

000000c4 <main>:

int main(void)
{

	/* Set Leds Pins to Output */
	DIO_SetPinDirection(Pin10,INPUT);
  c4:	60 e0       	ldi	r22, 0x00	; 0
  c6:	8a e0       	ldi	r24, 0x0A	; 10
  c8:	0e 94 8c 01 	call	0x318	; 0x318 <DIO_SetPinDirection>
	DIO_SetPinDirection(Pin12,OUTPUT);
  cc:	61 e0       	ldi	r22, 0x01	; 1
  ce:	8c e0       	ldi	r24, 0x0C	; 12
  d0:	0e 94 8c 01 	call	0x318	; 0x318 <DIO_SetPinDirection>
    DIO_SetPinDirection(Pin13,OUTPUT);
  d4:	61 e0       	ldi	r22, 0x01	; 1
  d6:	8d e0       	ldi	r24, 0x0D	; 13
  d8:	0e 94 8c 01 	call	0x318	; 0x318 <DIO_SetPinDirection>
    DIO_SetPinDirection(Pin14,OUTPUT);
  dc:	61 e0       	ldi	r22, 0x01	; 1
  de:	8e e0       	ldi	r24, 0x0E	; 14
  e0:	0e 94 8c 01 	call	0x318	; 0x318 <DIO_SetPinDirection>
	DIO_SetPinDirection(Pin15,OUTPUT);
  e4:	61 e0       	ldi	r22, 0x01	; 1
  e6:	8f e0       	ldi	r24, 0x0F	; 15
  e8:	0e 94 8c 01 	call	0x318	; 0x318 <DIO_SetPinDirection>

	
    SchedulerInit(); /* Initialize Scheduler */
  ec:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <SchedulerInit>
	
	SchedulerAddTask(Task0,300,3); /* Add Task0 */
  f0:	43 e0       	ldi	r20, 0x03	; 3
  f2:	6c e2       	ldi	r22, 0x2C	; 44
  f4:	71 e0       	ldi	r23, 0x01	; 1
  f6:	8e e3       	ldi	r24, 0x3E	; 62
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 97 03 	call	0x72e	; 0x72e <SchedulerAddTask>
    SchedulerAddTask(Task1,300,7); /* Add Task1 */
  fe:	47 e0       	ldi	r20, 0x07	; 7
 100:	6c e2       	ldi	r22, 0x2C	; 44
 102:	71 e0       	ldi	r23, 0x01	; 1
 104:	83 e4       	ldi	r24, 0x43	; 67
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 97 03 	call	0x72e	; 0x72e <SchedulerAddTask>
    SchedulerAddTask(Task2,300,1);  /* Add Task2 */
 10c:	41 e0       	ldi	r20, 0x01	; 1
 10e:	6c e2       	ldi	r22, 0x2C	; 44
 110:	71 e0       	ldi	r23, 0x01	; 1
 112:	88 e4       	ldi	r24, 0x48	; 72
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 97 03 	call	0x72e	; 0x72e <SchedulerAddTask>
	
	SchedulerStart(); /* Start Scheduler */
 11a:	0e 94 ee 02 	call	0x5dc	; 0x5dc <SchedulerStart>
	

}
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	08 95       	ret

00000124 <DIO_WritePin>:
* Description : Set (High) or Clear (Low) to Specific Pin
*
************************************************************************/
void DIO_WritePin(uint8 PinNum,uint8 PinValue){
	
    if( (PinNum >= Pin0) && (PinNum <= Pin7) ) /* Check If PinNum in PortA   */
 124:	88 30       	cpi	r24, 0x08	; 8
 126:	e8 f4       	brcc	.+58     	; 0x162 <DIO_WritePin+0x3e>
    {
	
	    if(PinValue == LOW) /* Check If Pin Value = LOW */
 128:	61 11       	cpse	r22, r1
 12a:	0e c0       	rjmp	.+28     	; 0x148 <DIO_WritePin+0x24>
	    { 
		
		    Clear_Bit(PORTA_REG,PinNum); /* Clear Bit (PinNum) on PortA Register  */
 12c:	4b b3       	in	r20, 0x1b	; 27
 12e:	21 e0       	ldi	r18, 0x01	; 1
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	b9 01       	movw	r22, r18
 134:	02 c0       	rjmp	.+4      	; 0x13a <DIO_WritePin+0x16>
 136:	66 0f       	add	r22, r22
 138:	77 1f       	adc	r23, r23
 13a:	8a 95       	dec	r24
 13c:	e2 f7       	brpl	.-8      	; 0x136 <DIO_WritePin+0x12>
 13e:	cb 01       	movw	r24, r22
 140:	80 95       	com	r24
 142:	84 23       	and	r24, r20
 144:	8b bb       	out	0x1b, r24	; 27
 146:	08 95       	ret
                                     /* Ex. PinNum = 5 ,Then Clear Bit 5 on PortA */
	    }
	    else /* Default State is Set Bit*/
	    { 
		    Set_Bit(PORTA_REG,PinNum); /* Set Bit (PinNum) on PortA Register  */
 148:	4b b3       	in	r20, 0x1b	; 27
 14a:	21 e0       	ldi	r18, 0x01	; 1
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	b9 01       	movw	r22, r18
 150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_WritePin+0x32>
 152:	66 0f       	add	r22, r22
 154:	77 1f       	adc	r23, r23
 156:	8a 95       	dec	r24
 158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_WritePin+0x2e>
 15a:	cb 01       	movw	r24, r22
 15c:	84 2b       	or	r24, r20
 15e:	8b bb       	out	0x1b, r24	; 27
 160:	08 95       	ret
                                   /* Ex. PinNum = 3 ,Then Clear Bit 3 on PortA */
	    }
    }

    else if( (PinNum >= Pin8) && (PinNum <= Pin15) ) /* Check If PinNum in PortB   */
 162:	98 ef       	ldi	r25, 0xF8	; 248
 164:	98 0f       	add	r25, r24
 166:	98 30       	cpi	r25, 0x08	; 8
 168:	e8 f4       	brcc	.+58     	; 0x1a4 <DIO_WritePin+0x80>
    {
	    if(PinValue == LOW) /* Check If PinValue = LOW */
 16a:	61 11       	cpse	r22, r1
 16c:	0e c0       	rjmp	.+28     	; 0x18a <DIO_WritePin+0x66>
	    {  
		    Clear_Bit(PORTB_REG,PinNum-Pin8); /* Clear Bit (PinNum - 8) on PortB Register  */
 16e:	48 b3       	in	r20, 0x18	; 24
 170:	21 e0       	ldi	r18, 0x01	; 1
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	b9 01       	movw	r22, r18
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_WritePin+0x58>
 178:	66 0f       	add	r22, r22
 17a:	77 1f       	adc	r23, r23
 17c:	9a 95       	dec	r25
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_WritePin+0x54>
 180:	cb 01       	movw	r24, r22
 182:	80 95       	com	r24
 184:	84 23       	and	r24, r20
 186:	88 bb       	out	0x18, r24	; 24
 188:	08 95       	ret
                                          /* Ex. PinNum = 9 ,Then Clear Bit 1 on PortB */
	    }
	    else /* Default State is Set Bit*/
	    { 
		    Set_Bit(PORTB_REG,PinNum-Pin8); /* Set Bit (PinNum - 8) on PortB Register  */
 18a:	48 b3       	in	r20, 0x18	; 24
 18c:	21 e0       	ldi	r18, 0x01	; 1
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	b9 01       	movw	r22, r18
 192:	02 c0       	rjmp	.+4      	; 0x198 <DIO_WritePin+0x74>
 194:	66 0f       	add	r22, r22
 196:	77 1f       	adc	r23, r23
 198:	9a 95       	dec	r25
 19a:	e2 f7       	brpl	.-8      	; 0x194 <DIO_WritePin+0x70>
 19c:	cb 01       	movw	r24, r22
 19e:	84 2b       	or	r24, r20
 1a0:	88 bb       	out	0x18, r24	; 24
 1a2:	08 95       	ret
                                        /* Ex. PinNum = 10 ,Then Set Bit 2 on PortB */	
	    }
    }

    else if( (PinNum >= Pin16) && (PinNum <= Pin23) ) /* Check If PinNum in PortC   */
 1a4:	90 ef       	ldi	r25, 0xF0	; 240
 1a6:	98 0f       	add	r25, r24
 1a8:	98 30       	cpi	r25, 0x08	; 8
 1aa:	e8 f4       	brcc	.+58     	; 0x1e6 <DIO_WritePin+0xc2>
    {
	    if(PinValue == LOW) /* Check If PinValue = LOW */
 1ac:	61 11       	cpse	r22, r1
 1ae:	0e c0       	rjmp	.+28     	; 0x1cc <DIO_WritePin+0xa8>
	    { 
		    Clear_Bit(PORTC_REG,PinNum-Pin16); /* Clear Bit (PinNum - 16) on PortC Register  */
 1b0:	45 b3       	in	r20, 0x15	; 21
 1b2:	21 e0       	ldi	r18, 0x01	; 1
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	b9 01       	movw	r22, r18
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <DIO_WritePin+0x9a>
 1ba:	66 0f       	add	r22, r22
 1bc:	77 1f       	adc	r23, r23
 1be:	9a 95       	dec	r25
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DIO_WritePin+0x96>
 1c2:	cb 01       	movw	r24, r22
 1c4:	80 95       	com	r24
 1c6:	84 23       	and	r24, r20
 1c8:	85 bb       	out	0x15, r24	; 21
 1ca:	08 95       	ret
                                           /* Ex. PinNum = 20 ,Then Clear Bit 4 on PortC */		
	    }    
	    else /* Default State is Set Bit*/
	    { 
            Set_Bit(PORTC_REG,PinNum-Pin16);   /* Set Bit (PinNum - 16) on PortC Register  */
 1cc:	45 b3       	in	r20, 0x15	; 21
 1ce:	21 e0       	ldi	r18, 0x01	; 1
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	b9 01       	movw	r22, r18
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <DIO_WritePin+0xb6>
 1d6:	66 0f       	add	r22, r22
 1d8:	77 1f       	adc	r23, r23
 1da:	9a 95       	dec	r25
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <DIO_WritePin+0xb2>
 1de:	cb 01       	movw	r24, r22
 1e0:	84 2b       	or	r24, r20
 1e2:	85 bb       	out	0x15, r24	; 21
 1e4:	08 95       	ret
                                           /* Ex. PinNum = 21 ,Then Set Bit 5 on PortC */		
        }
    }

    else if( (PinNum >= Pin24) && (PinNum <= Pin31) )  /* Check If PinNum in PortD   */
 1e6:	88 51       	subi	r24, 0x18	; 24
 1e8:	88 30       	cpi	r24, 0x08	; 8
 1ea:	e0 f4       	brcc	.+56     	; 0x224 <DIO_WritePin+0x100>
    {
	    if(PinValue == LOW) /* Check If PinValue = LOW */
 1ec:	61 11       	cpse	r22, r1
 1ee:	0e c0       	rjmp	.+28     	; 0x20c <DIO_WritePin+0xe8>
	    { 
		    Clear_Bit(PORTD_REG,PinNum-Pin24); /* Clear Bit (PinNum - 23) on PortD Register  */
 1f0:	42 b3       	in	r20, 0x12	; 18
 1f2:	21 e0       	ldi	r18, 0x01	; 1
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	b9 01       	movw	r22, r18
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_WritePin+0xda>
 1fa:	66 0f       	add	r22, r22
 1fc:	77 1f       	adc	r23, r23
 1fe:	8a 95       	dec	r24
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_WritePin+0xd6>
 202:	cb 01       	movw	r24, r22
 204:	80 95       	com	r24
 206:	84 23       	and	r24, r20
 208:	82 bb       	out	0x12, r24	; 18
 20a:	08 95       	ret
                                           /* Ex. PinNum = 25 ,Then Clear Bit 2 on PortD */
	    }                                  
	    else /* Default State is Set Bit*/
	    {
			Set_Bit(PORTD_REG,PinNum-Pin24);  /* Set Bit (PinNum - 23) on PortD Register  */
 20c:	42 b3       	in	r20, 0x12	; 18
 20e:	21 e0       	ldi	r18, 0x01	; 1
 210:	30 e0       	ldi	r19, 0x00	; 0
 212:	b9 01       	movw	r22, r18
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_WritePin+0xf6>
 216:	66 0f       	add	r22, r22
 218:	77 1f       	adc	r23, r23
 21a:	8a 95       	dec	r24
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_WritePin+0xf2>
 21e:	cb 01       	movw	r24, r22
 220:	84 2b       	or	r24, r20
 222:	82 bb       	out	0x12, r24	; 18
 224:	08 95       	ret

00000226 <DIO_TogglePin>:
* Description : Toggle Pin
*
************************************************************************/
void DIO_TogglePin(uint8 PinNum){
	
	if( (PinNum >= Pin0) && (PinNum <= Pin7) ) /* Check If PinNum in PortA   */
 226:	88 30       	cpi	r24, 0x08	; 8
 228:	68 f4       	brcc	.+26     	; 0x244 <DIO_TogglePin+0x1e>
	{	
		Toggle_Bit(PORTA_REG,PinNum);
 22a:	4b b3       	in	r20, 0x1b	; 27
 22c:	21 e0       	ldi	r18, 0x01	; 1
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	b9 01       	movw	r22, r18
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_TogglePin+0x12>
 234:	66 0f       	add	r22, r22
 236:	77 1f       	adc	r23, r23
 238:	8a 95       	dec	r24
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_TogglePin+0xe>
 23c:	cb 01       	movw	r24, r22
 23e:	84 27       	eor	r24, r20
 240:	8b bb       	out	0x1b, r24	; 27
 242:	08 95       	ret
	}

	else if( (PinNum >= Pin8) && (PinNum <= Pin15) ) /* Check If PinNum in PortB   */
 244:	98 ef       	ldi	r25, 0xF8	; 248
 246:	98 0f       	add	r25, r24
 248:	98 30       	cpi	r25, 0x08	; 8
 24a:	68 f4       	brcc	.+26     	; 0x266 <DIO_TogglePin+0x40>
	{
		Toggle_Bit(PORTB_REG,PinNum - Pin8);
 24c:	48 b3       	in	r20, 0x18	; 24
 24e:	21 e0       	ldi	r18, 0x01	; 1
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	b9 01       	movw	r22, r18
 254:	02 c0       	rjmp	.+4      	; 0x25a <DIO_TogglePin+0x34>
 256:	66 0f       	add	r22, r22
 258:	77 1f       	adc	r23, r23
 25a:	9a 95       	dec	r25
 25c:	e2 f7       	brpl	.-8      	; 0x256 <DIO_TogglePin+0x30>
 25e:	cb 01       	movw	r24, r22
 260:	84 27       	eor	r24, r20
 262:	88 bb       	out	0x18, r24	; 24
 264:	08 95       	ret
	}

	else if( (PinNum >= Pin16) && (PinNum <= Pin23) ) /* Check If PinNum in PortC   */
 266:	90 ef       	ldi	r25, 0xF0	; 240
 268:	98 0f       	add	r25, r24
 26a:	98 30       	cpi	r25, 0x08	; 8
 26c:	68 f4       	brcc	.+26     	; 0x288 <DIO_TogglePin+0x62>
	{
		Toggle_Bit(PORTC_REG,PinNum - Pin16);
 26e:	45 b3       	in	r20, 0x15	; 21
 270:	21 e0       	ldi	r18, 0x01	; 1
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	b9 01       	movw	r22, r18
 276:	02 c0       	rjmp	.+4      	; 0x27c <DIO_TogglePin+0x56>
 278:	66 0f       	add	r22, r22
 27a:	77 1f       	adc	r23, r23
 27c:	9a 95       	dec	r25
 27e:	e2 f7       	brpl	.-8      	; 0x278 <DIO_TogglePin+0x52>
 280:	cb 01       	movw	r24, r22
 282:	84 27       	eor	r24, r20
 284:	85 bb       	out	0x15, r24	; 21
 286:	08 95       	ret
	}

	else if( (PinNum >= Pin24) && (PinNum <= Pin31) )  /* Check If PinNum in PortD   */
 288:	98 ee       	ldi	r25, 0xE8	; 232
 28a:	98 0f       	add	r25, r24
 28c:	98 30       	cpi	r25, 0x08	; 8
 28e:	60 f4       	brcc	.+24     	; 0x2a8 <DIO_TogglePin+0x82>
	{
		Toggle_Bit(PORTD_REG,PinNum - Pin24);
 290:	42 b3       	in	r20, 0x12	; 18
 292:	21 e0       	ldi	r18, 0x01	; 1
 294:	30 e0       	ldi	r19, 0x00	; 0
 296:	b9 01       	movw	r22, r18
 298:	02 c0       	rjmp	.+4      	; 0x29e <DIO_TogglePin+0x78>
 29a:	66 0f       	add	r22, r22
 29c:	77 1f       	adc	r23, r23
 29e:	9a 95       	dec	r25
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <DIO_TogglePin+0x74>
 2a2:	cb 01       	movw	r24, r22
 2a4:	84 27       	eor	r24, r20
 2a6:	82 bb       	out	0x12, r24	; 18
 2a8:	08 95       	ret

000002aa <DIO_ReadPin>:
* Description : Get Value of Specific Pin (High/Low)
*
************************************************************************/
uint8 DIO_ReadPin(uint8 PinNum){
						
    if( (PinNum >= Pin0) && (PinNum <= Pin7) ) /* Check If PinNum in PortA */
 2aa:	88 30       	cpi	r24, 0x08	; 8
 2ac:	58 f4       	brcc	.+22     	; 0x2c4 <DIO_ReadPin+0x1a>
	{
	    return Get_Bit(PINA_REG,PinNum);  /* Return The Value of Pin (PinNum) From PinA Register*/
 2ae:	29 b3       	in	r18, 0x19	; 25
 2b0:	30 e0       	ldi	r19, 0x00	; 0
 2b2:	a9 01       	movw	r20, r18
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <DIO_ReadPin+0x10>
 2b6:	55 95       	asr	r21
 2b8:	47 95       	ror	r20
 2ba:	8a 95       	dec	r24
 2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <DIO_ReadPin+0xc>
 2be:	ca 01       	movw	r24, r20
 2c0:	81 70       	andi	r24, 0x01	; 1
 2c2:	08 95       	ret
                                      /* Ex. PinNum = 2 ,Then Get The Value of Pin 2 From PinA Register */
    }
    else if( (PinNum >= Pin8) && (PinNum <= Pin15) ) /* Check If PinNum in PortB */
 2c4:	28 ef       	ldi	r18, 0xF8	; 248
 2c6:	28 0f       	add	r18, r24
 2c8:	28 30       	cpi	r18, 0x08	; 8
 2ca:	48 f4       	brcc	.+18     	; 0x2de <DIO_ReadPin+0x34>
	{
	    return Get_Bit(PINB_REG,PinNum-Pin8); /* Return The Value of Pin (PinNum - 8) From PinB Register*/
 2cc:	86 b3       	in	r24, 0x16	; 22
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <DIO_ReadPin+0x2c>
 2d2:	95 95       	asr	r25
 2d4:	87 95       	ror	r24
 2d6:	2a 95       	dec	r18
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <DIO_ReadPin+0x28>
 2da:	81 70       	andi	r24, 0x01	; 1
 2dc:	08 95       	ret
                                          /* Ex. PinNum = 9 ,Then Get The Value of Pin 1 From PinB Register */
    }
    else if( (PinNum >= Pin16) && (PinNum <= Pin23) ) /* Check If PinNum in PortC */
 2de:	20 ef       	ldi	r18, 0xF0	; 240
 2e0:	28 0f       	add	r18, r24
 2e2:	28 30       	cpi	r18, 0x08	; 8
 2e4:	48 f4       	brcc	.+18     	; 0x2f8 <DIO_ReadPin+0x4e>
	{
	    return Get_Bit(PINC_REG,PinNum-Pin16); /* Return The Value of Pin (PinNum - 16) From PinC Register*/
 2e6:	83 b3       	in	r24, 0x13	; 19
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <DIO_ReadPin+0x46>
 2ec:	95 95       	asr	r25
 2ee:	87 95       	ror	r24
 2f0:	2a 95       	dec	r18
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <DIO_ReadPin+0x42>
 2f4:	81 70       	andi	r24, 0x01	; 1
 2f6:	08 95       	ret
		                                   /* Ex. PinNum = 18 ,Then Get The Value of Pin 2 From PinC Register */
    }
    else if( (PinNum >= Pin24) && (PinNum <= Pin31) ) /* Check If PinNum in PortD */
 2f8:	28 ee       	ldi	r18, 0xE8	; 232
 2fa:	28 0f       	add	r18, r24
 2fc:	28 30       	cpi	r18, 0x08	; 8
 2fe:	50 f4       	brcc	.+20     	; 0x314 <DIO_ReadPin+0x6a>
    {
	    return Get_Bit(PIND_REG,PinNum-Pin24); /* Return The Value of Pin (PinNum - 23) From PinD Register*/
 300:	90 b3       	in	r25, 0x10	; 16
 302:	89 2f       	mov	r24, r25
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	02 c0       	rjmp	.+4      	; 0x30c <DIO_ReadPin+0x62>
 308:	95 95       	asr	r25
 30a:	87 95       	ror	r24
 30c:	2a 95       	dec	r18
 30e:	e2 f7       	brpl	.-8      	; 0x308 <DIO_ReadPin+0x5e>
 310:	81 70       	andi	r24, 0x01	; 1
 312:	08 95       	ret
                                           /* Ex. PinNum = 26 ,Then Get The Value of Pin 3 From PinD Register */
    }
    else
	{
	     return ERROR_PIN_NUM ; /* PinNum Out Of Range ( 0 - 31 ) */
 314:	8f ef       	ldi	r24, 0xFF	; 255
		 
    }
						
}
 316:	08 95       	ret

00000318 <DIO_SetPinDirection>:
* Description : Set Direction To Specific Pin (Input / Output)
*
************************************************************************/
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection){
						
    if( (PinNum >= Pin0) && (PinNum <= Pin7) ) /* Check If PinNum in PortA */
 318:	88 30       	cpi	r24, 0x08	; 8
 31a:	e8 f4       	brcc	.+58     	; 0x356 <DIO_SetPinDirection+0x3e>
	{ 
        if(PinDirection == INPUT) /* Check If Pin Direction = Input */
 31c:	61 11       	cpse	r22, r1
 31e:	0e c0       	rjmp	.+28     	; 0x33c <DIO_SetPinDirection+0x24>
		{
            Clear_Bit(DDRA_REG,PinNum); /* Clear Bit (PinNum) on DDRA Register  */
 320:	4a b3       	in	r20, 0x1a	; 26
 322:	21 e0       	ldi	r18, 0x01	; 1
 324:	30 e0       	ldi	r19, 0x00	; 0
 326:	b9 01       	movw	r22, r18
 328:	02 c0       	rjmp	.+4      	; 0x32e <DIO_SetPinDirection+0x16>
 32a:	66 0f       	add	r22, r22
 32c:	77 1f       	adc	r23, r23
 32e:	8a 95       	dec	r24
 330:	e2 f7       	brpl	.-8      	; 0x32a <DIO_SetPinDirection+0x12>
 332:	cb 01       	movw	r24, r22
 334:	80 95       	com	r24
 336:	84 23       	and	r24, r20
 338:	8a bb       	out	0x1a, r24	; 26
 33a:	08 95       	ret
			                        /* Ex. PinNum = 2 ,Then Clear Bit 2 on DDRA Register */
        }
        else  /* Default State is Set Bit Direction to Output */
		{
            Set_Bit(DDRA_REG,PinNum);  /* Set Bit (PinNum) on DDRA Register  */
 33c:	4a b3       	in	r20, 0x1a	; 26
 33e:	21 e0       	ldi	r18, 0x01	; 1
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	b9 01       	movw	r22, r18
 344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_SetPinDirection+0x32>
 346:	66 0f       	add	r22, r22
 348:	77 1f       	adc	r23, r23
 34a:	8a 95       	dec	r24
 34c:	e2 f7       	brpl	.-8      	; 0x346 <DIO_SetPinDirection+0x2e>
 34e:	cb 01       	movw	r24, r22
 350:	84 2b       	or	r24, r20
 352:	8a bb       	out	0x1a, r24	; 26
 354:	08 95       	ret
			                       /* Ex. PinNum = 5 ,Then Set Bit 5 on DDRA Register */
        }                          
    }
    else if( (PinNum >= Pin8) && (PinNum <= Pin15) ) /* Check If PinNum in PortB */
 356:	98 ef       	ldi	r25, 0xF8	; 248
 358:	98 0f       	add	r25, r24
 35a:	98 30       	cpi	r25, 0x08	; 8
 35c:	e8 f4       	brcc	.+58     	; 0x398 <DIO_SetPinDirection+0x80>
    {
        if(PinDirection == INPUT) /* Check If Pin Direction = Input */
 35e:	61 11       	cpse	r22, r1
 360:	0e c0       	rjmp	.+28     	; 0x37e <DIO_SetPinDirection+0x66>
        { 
            Clear_Bit(DDRB_REG,PinNum-Pin8); /* Clear Bit (PinNum - 8) on DDRB Register  */
 362:	47 b3       	in	r20, 0x17	; 23
 364:	21 e0       	ldi	r18, 0x01	; 1
 366:	30 e0       	ldi	r19, 0x00	; 0
 368:	b9 01       	movw	r22, r18
 36a:	02 c0       	rjmp	.+4      	; 0x370 <DIO_SetPinDirection+0x58>
 36c:	66 0f       	add	r22, r22
 36e:	77 1f       	adc	r23, r23
 370:	9a 95       	dec	r25
 372:	e2 f7       	brpl	.-8      	; 0x36c <DIO_SetPinDirection+0x54>
 374:	cb 01       	movw	r24, r22
 376:	80 95       	com	r24
 378:	84 23       	and	r24, r20
 37a:	87 bb       	out	0x17, r24	; 23
 37c:	08 95       	ret
        }                                /* Ex. PinNum = 9 ,Then Clear Bit 1 on DDRB Register */
        else /* Default State is Set Bit Direction to Output */
        {
            Set_Bit(DDRB_REG,PinNum-Pin8);  /* Set Bit (PinNum - 8) on DDRA Register  */
 37e:	47 b3       	in	r20, 0x17	; 23
 380:	21 e0       	ldi	r18, 0x01	; 1
 382:	30 e0       	ldi	r19, 0x00	; 0
 384:	b9 01       	movw	r22, r18
 386:	02 c0       	rjmp	.+4      	; 0x38c <DIO_SetPinDirection+0x74>
 388:	66 0f       	add	r22, r22
 38a:	77 1f       	adc	r23, r23
 38c:	9a 95       	dec	r25
 38e:	e2 f7       	brpl	.-8      	; 0x388 <DIO_SetPinDirection+0x70>
 390:	cb 01       	movw	r24, r22
 392:	84 2b       	or	r24, r20
 394:	87 bb       	out	0x17, r24	; 23
 396:	08 95       	ret
        }                               /* Ex. PinNum = 10 ,Then Set Bit 2 on DDRA Register */
    }
    else if( (PinNum >= Pin16) && (PinNum <= Pin23) ) /* Check If PinNum in PortC */
 398:	90 ef       	ldi	r25, 0xF0	; 240
 39a:	98 0f       	add	r25, r24
 39c:	98 30       	cpi	r25, 0x08	; 8
 39e:	e8 f4       	brcc	.+58     	; 0x3da <DIO_SetPinDirection+0xc2>
    { 
        if(PinDirection == INPUT) /* Check If Pin Direction = Input */
 3a0:	61 11       	cpse	r22, r1
 3a2:	0e c0       	rjmp	.+28     	; 0x3c0 <DIO_SetPinDirection+0xa8>
        {  
            Clear_Bit(DDRC_REG,PinNum-Pin16);/* Clear Bit (PinNum - 16) on DDRC Register  */
 3a4:	44 b3       	in	r20, 0x14	; 20
 3a6:	21 e0       	ldi	r18, 0x01	; 1
 3a8:	30 e0       	ldi	r19, 0x00	; 0
 3aa:	b9 01       	movw	r22, r18
 3ac:	02 c0       	rjmp	.+4      	; 0x3b2 <DIO_SetPinDirection+0x9a>
 3ae:	66 0f       	add	r22, r22
 3b0:	77 1f       	adc	r23, r23
 3b2:	9a 95       	dec	r25
 3b4:	e2 f7       	brpl	.-8      	; 0x3ae <DIO_SetPinDirection+0x96>
 3b6:	cb 01       	movw	r24, r22
 3b8:	80 95       	com	r24
 3ba:	84 23       	and	r24, r20
 3bc:	84 bb       	out	0x14, r24	; 20
 3be:	08 95       	ret
			                             /* Ex. PinNum = 17 ,Then Clear Bit 1 on DDRC Register */		
        }                                
        else /* Default State is Set Bit Direction to Output */
        { 
            Set_Bit(DDRC_REG,PinNum-Pin16);  /* Set Bit (PinNum - 16) on DDRC Register  */
 3c0:	44 b3       	in	r20, 0x14	; 20
 3c2:	21 e0       	ldi	r18, 0x01	; 1
 3c4:	30 e0       	ldi	r19, 0x00	; 0
 3c6:	b9 01       	movw	r22, r18
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <DIO_SetPinDirection+0xb6>
 3ca:	66 0f       	add	r22, r22
 3cc:	77 1f       	adc	r23, r23
 3ce:	9a 95       	dec	r25
 3d0:	e2 f7       	brpl	.-8      	; 0x3ca <DIO_SetPinDirection+0xb2>
 3d2:	cb 01       	movw	r24, r22
 3d4:	84 2b       	or	r24, r20
 3d6:	84 bb       	out	0x14, r24	; 20
 3d8:	08 95       	ret
        }                                /* Ex. PinNum = 18 ,Then Set Bit 2 on DDRC Register */
    }
    else if( (PinNum >= Pin24) && (PinNum <= Pin31) ) /* Check If PinNum in PortD */
 3da:	88 51       	subi	r24, 0x18	; 24
 3dc:	88 30       	cpi	r24, 0x08	; 8
 3de:	e0 f4       	brcc	.+56     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
    { 
        if(PinDirection == INPUT) /* Check If Pin Direction = Input */
 3e0:	61 11       	cpse	r22, r1
 3e2:	0e c0       	rjmp	.+28     	; 0x400 <__LOCK_REGION_LENGTH__>
		{  
            Clear_Bit(DDRD_REG,PinNum-Pin24); /* Clear Bit (PinNum - 24) on DDRD Register  */
 3e4:	41 b3       	in	r20, 0x11	; 17
 3e6:	21 e0       	ldi	r18, 0x01	; 1
 3e8:	30 e0       	ldi	r19, 0x00	; 0
 3ea:	b9 01       	movw	r22, r18
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <DIO_SetPinDirection+0xda>
 3ee:	66 0f       	add	r22, r22
 3f0:	77 1f       	adc	r23, r23
 3f2:	8a 95       	dec	r24
 3f4:	e2 f7       	brpl	.-8      	; 0x3ee <DIO_SetPinDirection+0xd6>
 3f6:	cb 01       	movw	r24, r22
 3f8:	80 95       	com	r24
 3fa:	84 23       	and	r24, r20
 3fc:	81 bb       	out	0x11, r24	; 17
 3fe:	08 95       	ret
        }                                 /* Ex. PinNum = 25 ,Then Clear Bit 1 on DDRD Register */
        else
        { /* Default State is Set Bit Direction to Output */
            Set_Bit(DDRD_REG,PinNum-Pin24);  /* Set Bit (PinNum - 24) on DDRA Register  */
 400:	41 b3       	in	r20, 0x11	; 17
 402:	21 e0       	ldi	r18, 0x01	; 1
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	b9 01       	movw	r22, r18
 408:	02 c0       	rjmp	.+4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 40a:	66 0f       	add	r22, r22
 40c:	77 1f       	adc	r23, r23
 40e:	8a 95       	dec	r24
 410:	e2 f7       	brpl	.-8      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 412:	cb 01       	movw	r24, r22
 414:	84 2b       	or	r24, r20
 416:	81 bb       	out	0x11, r24	; 17
 418:	08 95       	ret

0000041a <timer0_init>:
************************************************************************/
void StopTimer0(void){
	
	Clear_Bit(TCCR0_REG,CS00_BIT); /* Timer Stopped No clock source */
	Clear_Bit(TCCR0_REG,CS01_BIT);
	Clear_Bit(TCCR0_REG,CS02_BIT);
 41a:	12 be       	out	0x32, r1	; 50
 41c:	81 30       	cpi	r24, 0x01	; 1
 41e:	69 f0       	breq	.+26     	; 0x43a <timer0_init+0x20>
 420:	28 f0       	brcs	.+10     	; 0x42c <timer0_init+0x12>
 422:	82 30       	cpi	r24, 0x02	; 2
 424:	89 f0       	breq	.+34     	; 0x448 <timer0_init+0x2e>
 426:	83 30       	cpi	r24, 0x03	; 3
 428:	b1 f0       	breq	.+44     	; 0x456 <timer0_init+0x3c>
 42a:	1c c0       	rjmp	.+56     	; 0x464 <timer0_init+0x4a>
 42c:	83 b7       	in	r24, 0x33	; 51
 42e:	8f 7b       	andi	r24, 0xBF	; 191
 430:	83 bf       	out	0x33, r24	; 51
 432:	83 b7       	in	r24, 0x33	; 51
 434:	87 7f       	andi	r24, 0xF7	; 247
 436:	83 bf       	out	0x33, r24	; 51
 438:	1b c0       	rjmp	.+54     	; 0x470 <timer0_init+0x56>
 43a:	83 b7       	in	r24, 0x33	; 51
 43c:	80 64       	ori	r24, 0x40	; 64
 43e:	83 bf       	out	0x33, r24	; 51
 440:	83 b7       	in	r24, 0x33	; 51
 442:	87 7f       	andi	r24, 0xF7	; 247
 444:	83 bf       	out	0x33, r24	; 51
 446:	14 c0       	rjmp	.+40     	; 0x470 <timer0_init+0x56>
 448:	83 b7       	in	r24, 0x33	; 51
 44a:	8f 7b       	andi	r24, 0xBF	; 191
 44c:	83 bf       	out	0x33, r24	; 51
 44e:	83 b7       	in	r24, 0x33	; 51
 450:	88 60       	ori	r24, 0x08	; 8
 452:	83 bf       	out	0x33, r24	; 51
 454:	0d c0       	rjmp	.+26     	; 0x470 <timer0_init+0x56>
 456:	83 b7       	in	r24, 0x33	; 51
 458:	80 64       	ori	r24, 0x40	; 64
 45a:	83 bf       	out	0x33, r24	; 51
 45c:	83 b7       	in	r24, 0x33	; 51
 45e:	88 60       	ori	r24, 0x08	; 8
 460:	83 bf       	out	0x33, r24	; 51
 462:	06 c0       	rjmp	.+12     	; 0x470 <timer0_init+0x56>
 464:	83 b7       	in	r24, 0x33	; 51
 466:	8f 7b       	andi	r24, 0xBF	; 191
 468:	83 bf       	out	0x33, r24	; 51
 46a:	83 b7       	in	r24, 0x33	; 51
 46c:	87 7f       	andi	r24, 0xF7	; 247
 46e:	83 bf       	out	0x33, r24	; 51
 470:	62 30       	cpi	r22, 0x02	; 2
 472:	91 f0       	breq	.+36     	; 0x498 <timer0_init+0x7e>
 474:	28 f4       	brcc	.+10     	; 0x480 <timer0_init+0x66>
 476:	66 23       	and	r22, r22
 478:	41 f0       	breq	.+16     	; 0x48a <timer0_init+0x70>
 47a:	61 30       	cpi	r22, 0x01	; 1
 47c:	49 f0       	breq	.+18     	; 0x490 <timer0_init+0x76>
 47e:	18 c0       	rjmp	.+48     	; 0x4b0 <timer0_init+0x96>
 480:	63 30       	cpi	r22, 0x03	; 3
 482:	71 f0       	breq	.+28     	; 0x4a0 <timer0_init+0x86>
 484:	64 30       	cpi	r22, 0x04	; 4
 486:	81 f0       	breq	.+32     	; 0x4a8 <timer0_init+0x8e>
 488:	13 c0       	rjmp	.+38     	; 0x4b0 <timer0_init+0x96>
 48a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
 48e:	13 c0       	rjmp	.+38     	; 0x4b6 <timer0_init+0x9c>
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 496:	0f c0       	rjmp	.+30     	; 0x4b6 <timer0_init+0x9c>
 498:	82 e0       	ldi	r24, 0x02	; 2
 49a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 49e:	0b c0       	rjmp	.+22     	; 0x4b6 <timer0_init+0x9c>
 4a0:	83 e0       	ldi	r24, 0x03	; 3
 4a2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 4a6:	07 c0       	rjmp	.+14     	; 0x4b6 <timer0_init+0x9c>
 4a8:	84 e0       	ldi	r24, 0x04	; 4
 4aa:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 4ae:	03 c0       	rjmp	.+6      	; 0x4b6 <timer0_init+0x9c>
 4b0:	82 e0       	ldi	r24, 0x02	; 2
 4b2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 4b6:	4c bf       	out	0x3c, r20	; 60
 4b8:	08 95       	ret

000004ba <EnableTimer0Interrupt>:
 4ba:	8f b7       	in	r24, 0x3f	; 63
 4bc:	80 68       	ori	r24, 0x80	; 128
 4be:	8f bf       	out	0x3f, r24	; 63
 4c0:	89 b7       	in	r24, 0x39	; 57
 4c2:	82 60       	ori	r24, 0x02	; 2
 4c4:	89 bf       	out	0x39, r24	; 57
 4c6:	08 95       	ret

000004c8 <StartTimer0>:
 4c8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 4cc:	82 30       	cpi	r24, 0x02	; 2
 4ce:	09 f1       	breq	.+66     	; 0x512 <StartTimer0+0x4a>
 4d0:	28 f4       	brcc	.+10     	; 0x4dc <StartTimer0+0x14>
 4d2:	88 23       	and	r24, r24
 4d4:	41 f0       	breq	.+16     	; 0x4e6 <StartTimer0+0x1e>
 4d6:	81 30       	cpi	r24, 0x01	; 1
 4d8:	89 f0       	breq	.+34     	; 0x4fc <StartTimer0+0x34>
 4da:	3c c0       	rjmp	.+120    	; 0x554 <StartTimer0+0x8c>
 4dc:	83 30       	cpi	r24, 0x03	; 3
 4de:	21 f1       	breq	.+72     	; 0x528 <StartTimer0+0x60>
 4e0:	84 30       	cpi	r24, 0x04	; 4
 4e2:	69 f1       	breq	.+90     	; 0x53e <StartTimer0+0x76>
 4e4:	37 c0       	rjmp	.+110    	; 0x554 <StartTimer0+0x8c>
 4e6:	83 b7       	in	r24, 0x33	; 51
 4e8:	81 60       	ori	r24, 0x01	; 1
 4ea:	83 bf       	out	0x33, r24	; 51
 4ec:	83 b7       	in	r24, 0x33	; 51
 4ee:	8d 7f       	andi	r24, 0xFD	; 253
 4f0:	83 bf       	out	0x33, r24	; 51
 4f2:	83 b7       	in	r24, 0x33	; 51
 4f4:	8b 7f       	andi	r24, 0xFB	; 251
 4f6:	83 bf       	out	0x33, r24	; 51
 4f8:	12 be       	out	0x32, r1	; 50
 4fa:	08 95       	ret
 4fc:	83 b7       	in	r24, 0x33	; 51
 4fe:	8e 7f       	andi	r24, 0xFE	; 254
 500:	83 bf       	out	0x33, r24	; 51
 502:	83 b7       	in	r24, 0x33	; 51
 504:	82 60       	ori	r24, 0x02	; 2
 506:	83 bf       	out	0x33, r24	; 51
 508:	83 b7       	in	r24, 0x33	; 51
 50a:	8b 7f       	andi	r24, 0xFB	; 251
 50c:	83 bf       	out	0x33, r24	; 51
 50e:	12 be       	out	0x32, r1	; 50
 510:	08 95       	ret
 512:	83 b7       	in	r24, 0x33	; 51
 514:	81 60       	ori	r24, 0x01	; 1
 516:	83 bf       	out	0x33, r24	; 51
 518:	83 b7       	in	r24, 0x33	; 51
 51a:	82 60       	ori	r24, 0x02	; 2
 51c:	83 bf       	out	0x33, r24	; 51
 51e:	83 b7       	in	r24, 0x33	; 51
 520:	8b 7f       	andi	r24, 0xFB	; 251
 522:	83 bf       	out	0x33, r24	; 51
 524:	12 be       	out	0x32, r1	; 50
 526:	08 95       	ret
 528:	83 b7       	in	r24, 0x33	; 51
 52a:	8e 7f       	andi	r24, 0xFE	; 254
 52c:	83 bf       	out	0x33, r24	; 51
 52e:	83 b7       	in	r24, 0x33	; 51
 530:	8d 7f       	andi	r24, 0xFD	; 253
 532:	83 bf       	out	0x33, r24	; 51
 534:	83 b7       	in	r24, 0x33	; 51
 536:	84 60       	ori	r24, 0x04	; 4
 538:	83 bf       	out	0x33, r24	; 51
 53a:	12 be       	out	0x32, r1	; 50
 53c:	08 95       	ret
 53e:	83 b7       	in	r24, 0x33	; 51
 540:	81 60       	ori	r24, 0x01	; 1
 542:	83 bf       	out	0x33, r24	; 51
 544:	83 b7       	in	r24, 0x33	; 51
 546:	8d 7f       	andi	r24, 0xFD	; 253
 548:	83 bf       	out	0x33, r24	; 51
 54a:	83 b7       	in	r24, 0x33	; 51
 54c:	84 60       	ori	r24, 0x04	; 4
 54e:	83 bf       	out	0x33, r24	; 51
 550:	12 be       	out	0x32, r1	; 50
 552:	08 95       	ret
 554:	83 b7       	in	r24, 0x33	; 51
 556:	81 60       	ori	r24, 0x01	; 1
 558:	83 bf       	out	0x33, r24	; 51
 55a:	83 b7       	in	r24, 0x33	; 51
 55c:	82 60       	ori	r24, 0x02	; 2
 55e:	83 bf       	out	0x33, r24	; 51
 560:	83 b7       	in	r24, 0x33	; 51
 562:	8b 7f       	andi	r24, 0xFB	; 251
 564:	83 bf       	out	0x33, r24	; 51
 566:	12 be       	out	0x32, r1	; 50
 568:	08 95       	ret

0000056a <__vector_10>:
}

ISR(TIMER0_COMP_vect){
 56a:	1f 92       	push	r1
 56c:	0f 92       	push	r0
 56e:	0f b6       	in	r0, 0x3f	; 63
 570:	0f 92       	push	r0
 572:	11 24       	eor	r1, r1
 574:	2f 93       	push	r18
 576:	3f 93       	push	r19
 578:	4f 93       	push	r20
 57a:	5f 93       	push	r21
 57c:	6f 93       	push	r22
 57e:	7f 93       	push	r23
 580:	8f 93       	push	r24
 582:	9f 93       	push	r25
 584:	af 93       	push	r26
 586:	bf 93       	push	r27
 588:	ef 93       	push	r30
 58a:	ff 93       	push	r31
	
  Callback();
 58c:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <Callback>
 590:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <Callback+0x1>
 594:	09 95       	icall
 	
}
 596:	ff 91       	pop	r31
 598:	ef 91       	pop	r30
 59a:	bf 91       	pop	r27
 59c:	af 91       	pop	r26
 59e:	9f 91       	pop	r25
 5a0:	8f 91       	pop	r24
 5a2:	7f 91       	pop	r23
 5a4:	6f 91       	pop	r22
 5a6:	5f 91       	pop	r21
 5a8:	4f 91       	pop	r20
 5aa:	3f 91       	pop	r19
 5ac:	2f 91       	pop	r18
 5ae:	0f 90       	pop	r0
 5b0:	0f be       	out	0x3f, r0	; 63
 5b2:	0f 90       	pop	r0
 5b4:	1f 90       	pop	r1
 5b6:	18 95       	reti

000005b8 <SetFlag>:
*
* Description : Set Flag
*
************************************************************************/
static void SetFlag(void){
	Callback_Flag = TRUE ;	
 5b8:	81 e0       	ldi	r24, 0x01	; 1
 5ba:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <Callback_Flag>
 5be:	08 95       	ret

000005c0 <SchedulerInit>:
*               3- SetCallback
*
************************************************************************/
void SchedulerInit(void){
	
	timer0_init(TimerCTC_Mode,TimerPrescaler_64,OCR_VALUE); /* Timer Initialization */
 5c0:	4a ef       	ldi	r20, 0xFA	; 250
 5c2:	62 e0       	ldi	r22, 0x02	; 2
 5c4:	82 e0       	ldi	r24, 0x02	; 2
 5c6:	0e 94 0d 02 	call	0x41a	; 0x41a <timer0_init>
	EnableTimer0Interrupt(); /* Enable Timer0 Interrupt */
 5ca:	0e 94 5d 02 	call	0x4ba	; 0x4ba <EnableTimer0Interrupt>
* Description : Set Callback
*
************************************************************************/
static void SetCallback( void(*Callback_ptr)(void)){
	
	Callback = Callback_ptr ; 
 5ce:	8c ed       	ldi	r24, 0xDC	; 220
 5d0:	92 e0       	ldi	r25, 0x02	; 2
 5d2:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <Callback+0x1>
 5d6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <Callback>
 5da:	08 95       	ret

000005dc <SchedulerStart>:
*               1- Start Timer0
*               2- Call Dispatcher
*               3- Remove Task
*
************************************************************************/
void SchedulerStart(void){
 5dc:	cf 93       	push	r28
 5de:	df 93       	push	r29
 5e0:	cd b7       	in	r28, 0x3d	; 61
 5e2:	de b7       	in	r29, 0x3e	; 62
 5e4:	28 97       	sbiw	r28, 0x08	; 8
 5e6:	0f b6       	in	r0, 0x3f	; 63
 5e8:	f8 94       	cli
 5ea:	de bf       	out	0x3e, r29	; 62
 5ec:	0f be       	out	0x3f, r0	; 63
 5ee:	cd bf       	out	0x3d, r28	; 61
	
	StartTimer0(); /* Start Timer0 */
 5f0:	0e 94 64 02 	call	0x4c8	; 0x4c8 <StartTimer0>
	
	for(BlockTaskIndex = ZERO ; BlockTaskIndex < TasksAddedCounter ; BlockTaskIndex++)
	{
		if ( PtrToFunc == TasksQueue[BlockTaskIndex].Task_ptr ) /*********************************/
		{													    /* Search For Task Which Chosen  */
			TasksQueue[BlockTaskIndex].TaskState = TaskBloced;  /* To be Remove                  */
 5f4:	ee 24       	eor	r14, r14
 5f6:	e3 94       	inc	r14
	
	StartTimer0(); /* Start Timer0 */
	
	while (TRUE){
		
		if (TRUE == Callback_Flag) /* Check if Callback_Flag == TRUE */
 5f8:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <Callback_Flag>
 5fc:	81 30       	cpi	r24, 0x01	; 1
 5fe:	a9 f5       	brne	.+106    	; 0x66a <SchedulerStart+0x8e>
		{
			Callback_Flag = FALSE ; /* Set Callback_Flag to False */
 600:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <Callback_Flag>
*
************************************************************************/
static void Dispatcher( Task_s Tasks_arr[]){ 
	
	uint8 TaskIndex;
	for (TaskIndex = FIRST_TASK_INDEX ; TaskIndex < TasksAddedCounter ;TaskIndex++)
 604:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <TasksAddedCounter>
 608:	88 23       	and	r24, r24
 60a:	79 f1       	breq	.+94     	; 0x66a <SchedulerStart+0x8e>
 60c:	f1 2c       	mov	r15, r1
	{
		/* Check if Task State is Blocked or Not and Remaining Ticks not equal Zero*/
		if ( (TaskReady == Tasks_arr[TaskIndex].TaskState) && (ZERO == Tasks_arr[TaskIndex].RemainingTicks) )
 60e:	0f 2d       	mov	r16, r15
 610:	10 e0       	ldi	r17, 0x00	; 0
 612:	00 0f       	add	r16, r16
 614:	11 1f       	adc	r17, r17
 616:	00 0f       	add	r16, r16
 618:	11 1f       	adc	r17, r17
 61a:	00 0f       	add	r16, r16
 61c:	11 1f       	adc	r17, r17
 61e:	0b 59       	subi	r16, 0x9B	; 155
 620:	1f 4f       	sbci	r17, 0xFF	; 255
 622:	d8 01       	movw	r26, r16
 624:	17 96       	adiw	r26, 0x07	; 7
 626:	8c 91       	ld	r24, X
 628:	17 97       	sbiw	r26, 0x07	; 7
 62a:	81 11       	cpse	r24, r1
 62c:	0f c0       	rjmp	.+30     	; 0x64c <SchedulerStart+0x70>
 62e:	14 96       	adiw	r26, 0x04	; 4
 630:	8d 91       	ld	r24, X+
 632:	9c 91       	ld	r25, X
 634:	15 97       	sbiw	r26, 0x05	; 5
 636:	89 2b       	or	r24, r25
 638:	49 f4       	brne	.+18     	; 0x64c <SchedulerStart+0x70>
		{
			Tasks_arr[TaskIndex].Task_ptr(); /* Call Task Function */
 63a:	ed 91       	ld	r30, X+
 63c:	fc 91       	ld	r31, X
 63e:	09 95       	icall
			Tasks_arr[TaskIndex].RemainingTicks = Tasks_arr[TaskIndex].TaskPeriodicity; /* Reset Remaining Ticks */
 640:	f8 01       	movw	r30, r16
 642:	82 81       	ldd	r24, Z+2	; 0x02
 644:	93 81       	ldd	r25, Z+3	; 0x03
 646:	95 83       	std	Z+5, r25	; 0x05
 648:	84 83       	std	Z+4, r24	; 0x04
 64a:	0a c0       	rjmp	.+20     	; 0x660 <SchedulerStart+0x84>
		}
		else
		{
			Tasks_arr[TaskIndex].RemainingTicks--; /* Every Time Remaining Ticks is decreased by 1 until reach Zero */
 64c:	d8 01       	movw	r26, r16
 64e:	14 96       	adiw	r26, 0x04	; 4
 650:	8d 91       	ld	r24, X+
 652:	9c 91       	ld	r25, X
 654:	15 97       	sbiw	r26, 0x05	; 5
 656:	01 97       	sbiw	r24, 0x01	; 1
 658:	15 96       	adiw	r26, 0x05	; 5
 65a:	9c 93       	st	X, r25
 65c:	8e 93       	st	-X, r24
 65e:	14 97       	sbiw	r26, 0x04	; 4
*
************************************************************************/
static void Dispatcher( Task_s Tasks_arr[]){ 
	
	uint8 TaskIndex;
	for (TaskIndex = FIRST_TASK_INDEX ; TaskIndex < TasksAddedCounter ;TaskIndex++)
 660:	f3 94       	inc	r15
 662:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <TasksAddedCounter>
 666:	f8 16       	cp	r15, r24
 668:	90 f2       	brcs	.-92     	; 0x60e <SchedulerStart+0x32>
		if (TRUE == Callback_Flag) /* Check if Callback_Flag == TRUE */
		{
			Callback_Flag = FALSE ; /* Set Callback_Flag to False */
			Dispatcher(TasksQueue); /* Call Dispatcher function that call Tasks with Right Periodicity */
		}
		if(ReadButtom(Button1) == ButtonPressed) /* Check if Button Pressed or Not */
 66a:	8a e0       	ldi	r24, 0x0A	; 10
 66c:	0e 94 4d 00 	call	0x9a	; 0x9a <ReadButtom>
 670:	81 30       	cpi	r24, 0x01	; 1
 672:	11 f6       	brne	.-124    	; 0x5f8 <SchedulerStart+0x1c>
	uint8 BlockTaskIndex;
	uint8 LoopsNumber;
	uint8 SortTaskIndex;
	Task_s Struct_Temp;
	
	for(BlockTaskIndex = ZERO ; BlockTaskIndex < TasksAddedCounter ; BlockTaskIndex++)
 674:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <TasksAddedCounter>
 678:	88 23       	and	r24, r24
 67a:	29 f1       	breq	.+74     	; 0x6c6 <SchedulerStart+0xea>
 67c:	80 e0       	ldi	r24, 0x00	; 0
	{
		if ( PtrToFunc == TasksQueue[BlockTaskIndex].Task_ptr ) /*********************************/
 67e:	28 2f       	mov	r18, r24
 680:	30 e0       	ldi	r19, 0x00	; 0
 682:	f9 01       	movw	r30, r18
 684:	ee 0f       	add	r30, r30
 686:	ff 1f       	adc	r31, r31
 688:	ee 0f       	add	r30, r30
 68a:	ff 1f       	adc	r31, r31
 68c:	ee 0f       	add	r30, r30
 68e:	ff 1f       	adc	r31, r31
 690:	eb 59       	subi	r30, 0x9B	; 155
 692:	ff 4f       	sbci	r31, 0xFF	; 255
 694:	40 81       	ld	r20, Z
 696:	51 81       	ldd	r21, Z+1	; 0x01
 698:	4e 53       	subi	r20, 0x3E	; 62
 69a:	50 40       	sbci	r21, 0x00	; 0
 69c:	79 f4       	brne	.+30     	; 0x6bc <SchedulerStart+0xe0>
		{													    /* Search For Task Which Chosen  */
			TasksQueue[BlockTaskIndex].TaskState = TaskBloced;  /* To be Remove                  */
 69e:	22 0f       	add	r18, r18
 6a0:	33 1f       	adc	r19, r19
 6a2:	22 0f       	add	r18, r18
 6a4:	33 1f       	adc	r19, r19
 6a6:	22 0f       	add	r18, r18
 6a8:	33 1f       	adc	r19, r19
 6aa:	f9 01       	movw	r30, r18
 6ac:	eb 59       	subi	r30, 0x9B	; 155
 6ae:	ff 4f       	sbci	r31, 0xFF	; 255
 6b0:	e7 82       	std	Z+7, r14	; 0x07
			TasksAddedCounter--;                                /*********************************/
 6b2:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <TasksAddedCounter>
 6b6:	91 50       	subi	r25, 0x01	; 1
 6b8:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <TasksAddedCounter>
	uint8 BlockTaskIndex;
	uint8 LoopsNumber;
	uint8 SortTaskIndex;
	Task_s Struct_Temp;
	
	for(BlockTaskIndex = ZERO ; BlockTaskIndex < TasksAddedCounter ; BlockTaskIndex++)
 6bc:	8f 5f       	subi	r24, 0xFF	; 255
 6be:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <TasksAddedCounter>
 6c2:	89 17       	cp	r24, r25
 6c4:	e0 f2       	brcs	.-72     	; 0x67e <SchedulerStart+0xa2>
		}
	}
	
	
	/* Bubble Sort Algorithm*/
	for (LoopsNumber = TasksAddedCounter ; LoopsNumber > ZERO ; LoopsNumber-- )
 6c6:	50 91 61 00 	lds	r21, 0x0061	; 0x800061 <TasksAddedCounter>
 6ca:	55 23       	and	r21, r21
 6cc:	09 f4       	brne	.+2      	; 0x6d0 <SchedulerStart+0xf4>
 6ce:	94 cf       	rjmp	.-216    	; 0x5f8 <SchedulerStart+0x1c>
 6d0:	6f ef       	ldi	r22, 0xFF	; 255
 6d2:	65 0f       	add	r22, r21
 6d4:	26 c0       	rjmp	.+76     	; 0x722 <SchedulerStart+0x146>
	{
		for (SortTaskIndex = ZERO ; SortTaskIndex < LoopsNumber  ; SortTaskIndex++ )
		{
			if (TasksQueue[SortTaskIndex].TaskState > TasksQueue[SortTaskIndex + ONE].TaskState)
 6d6:	fc 01       	movw	r30, r24
 6d8:	47 81       	ldd	r20, Z+7	; 0x07
 6da:	37 85       	ldd	r19, Z+15	; 0x0f
 6dc:	34 17       	cp	r19, r20
 6de:	c0 f4       	brcc	.+48     	; 0x710 <SchedulerStart+0x134>
			{
				Struct_Temp                  = TasksQueue[SortTaskIndex];
 6e0:	38 e0       	ldi	r19, 0x08	; 8
 6e2:	de 01       	movw	r26, r28
 6e4:	11 96       	adiw	r26, 0x01	; 1
 6e6:	01 90       	ld	r0, Z+
 6e8:	0d 92       	st	X+, r0
 6ea:	3a 95       	dec	r19
 6ec:	e1 f7       	brne	.-8      	; 0x6e6 <SchedulerStart+0x10a>
				TasksQueue[SortTaskIndex]       = TasksQueue[SortTaskIndex + ONE];
 6ee:	38 e0       	ldi	r19, 0x08	; 8
 6f0:	fc 01       	movw	r30, r24
 6f2:	38 96       	adiw	r30, 0x08	; 8
 6f4:	dc 01       	movw	r26, r24
 6f6:	01 90       	ld	r0, Z+
 6f8:	0d 92       	st	X+, r0
 6fa:	3a 95       	dec	r19
 6fc:	e1 f7       	brne	.-8      	; 0x6f6 <SchedulerStart+0x11a>
				TasksQueue[SortTaskIndex + ONE] = Struct_Temp;
 6fe:	38 e0       	ldi	r19, 0x08	; 8
 700:	fe 01       	movw	r30, r28
 702:	31 96       	adiw	r30, 0x01	; 1
 704:	dc 01       	movw	r26, r24
 706:	18 96       	adiw	r26, 0x08	; 8
 708:	01 90       	ld	r0, Z+
 70a:	0d 92       	st	X+, r0
 70c:	3a 95       	dec	r19
 70e:	e1 f7       	brne	.-8      	; 0x708 <SchedulerStart+0x12c>
	
	
	/* Bubble Sort Algorithm*/
	for (LoopsNumber = TasksAddedCounter ; LoopsNumber > ZERO ; LoopsNumber-- )
	{
		for (SortTaskIndex = ZERO ; SortTaskIndex < LoopsNumber  ; SortTaskIndex++ )
 710:	2f 5f       	subi	r18, 0xFF	; 255
 712:	08 96       	adiw	r24, 0x08	; 8
 714:	52 13       	cpse	r21, r18
 716:	df cf       	rjmp	.-66     	; 0x6d6 <SchedulerStart+0xfa>
		}
	}
	
	
	/* Bubble Sort Algorithm*/
	for (LoopsNumber = TasksAddedCounter ; LoopsNumber > ZERO ; LoopsNumber-- )
 718:	66 23       	and	r22, r22
 71a:	09 f4       	brne	.+2      	; 0x71e <SchedulerStart+0x142>
 71c:	6d cf       	rjmp	.-294    	; 0x5f8 <SchedulerStart+0x1c>
 71e:	51 50       	subi	r21, 0x01	; 1
 720:	61 50       	subi	r22, 0x01	; 1
	{
		for (SortTaskIndex = ZERO ; SortTaskIndex < LoopsNumber  ; SortTaskIndex++ )
 722:	55 23       	and	r21, r21
 724:	e1 f3       	breq	.-8      	; 0x71e <SchedulerStart+0x142>
 726:	85 e6       	ldi	r24, 0x65	; 101
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	20 e0       	ldi	r18, 0x00	; 0
 72c:	d4 cf       	rjmp	.-88     	; 0x6d6 <SchedulerStart+0xfa>

0000072e <SchedulerAddTask>:
* Return : None
*
* Description : Add Tasks To Scheduler
*
************************************************************************/
uint8 SchedulerAddTask(TaskType Task_ptr , uint16 TaskPeriodicity , uint8 TaskPriority){
 72e:	cf 93       	push	r28
 730:	df 93       	push	r29
 732:	cd b7       	in	r28, 0x3d	; 61
 734:	de b7       	in	r29, 0x3e	; 62
 736:	28 97       	sbiw	r28, 0x08	; 8
 738:	0f b6       	in	r0, 0x3f	; 63
 73a:	f8 94       	cli
 73c:	de bf       	out	0x3e, r29	; 62
 73e:	0f be       	out	0x3f, r0	; 63
 740:	cd bf       	out	0x3d, r28	; 61
 742:	9c 01       	movw	r18, r24
	 uint8 AddTaskState; 
	if(TasksAddedCounter < TASKS_MAX_NUMBER )
 744:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <TasksAddedCounter>
 748:	95 30       	cpi	r25, 0x05	; 5
 74a:	08 f0       	brcs	.+2      	; 0x74e <SchedulerAddTask+0x20>
 74c:	41 c0       	rjmp	.+130    	; 0x7d0 <SchedulerAddTask+0xa2>
	{
		TasksQueue[TasksAddedCounter].Task_ptr        = Task_ptr; /* pointer to task function */
 74e:	e0 91 61 00 	lds	r30, 0x0061	; 0x800061 <TasksAddedCounter>
 752:	f0 e0       	ldi	r31, 0x00	; 0
 754:	ee 0f       	add	r30, r30
 756:	ff 1f       	adc	r31, r31
 758:	ee 0f       	add	r30, r30
 75a:	ff 1f       	adc	r31, r31
 75c:	ee 0f       	add	r30, r30
 75e:	ff 1f       	adc	r31, r31
 760:	eb 59       	subi	r30, 0x9B	; 155
 762:	ff 4f       	sbci	r31, 0xFF	; 255
 764:	31 83       	std	Z+1, r19	; 0x01
 766:	20 83       	st	Z, r18
		TasksQueue[TasksAddedCounter].TaskPeriodicity = TaskPeriodicity; /* Task Periodicity */
 768:	e0 91 61 00 	lds	r30, 0x0061	; 0x800061 <TasksAddedCounter>
 76c:	f0 e0       	ldi	r31, 0x00	; 0
 76e:	ee 0f       	add	r30, r30
 770:	ff 1f       	adc	r31, r31
 772:	ee 0f       	add	r30, r30
 774:	ff 1f       	adc	r31, r31
 776:	ee 0f       	add	r30, r30
 778:	ff 1f       	adc	r31, r31
 77a:	eb 59       	subi	r30, 0x9B	; 155
 77c:	ff 4f       	sbci	r31, 0xFF	; 255
 77e:	73 83       	std	Z+3, r23	; 0x03
 780:	62 83       	std	Z+2, r22	; 0x02
		TasksQueue[TasksAddedCounter].RemainingTicks  = TaskPeriodicity; /* RemainigTicks */
 782:	e0 91 61 00 	lds	r30, 0x0061	; 0x800061 <TasksAddedCounter>
 786:	f0 e0       	ldi	r31, 0x00	; 0
 788:	ee 0f       	add	r30, r30
 78a:	ff 1f       	adc	r31, r31
 78c:	ee 0f       	add	r30, r30
 78e:	ff 1f       	adc	r31, r31
 790:	ee 0f       	add	r30, r30
 792:	ff 1f       	adc	r31, r31
 794:	eb 59       	subi	r30, 0x9B	; 155
 796:	ff 4f       	sbci	r31, 0xFF	; 255
 798:	75 83       	std	Z+5, r23	; 0x05
 79a:	64 83       	std	Z+4, r22	; 0x04
		TasksQueue[TasksAddedCounter].TaskPriority    = TaskPriority; /* Task Priority */
 79c:	e0 91 61 00 	lds	r30, 0x0061	; 0x800061 <TasksAddedCounter>
 7a0:	f0 e0       	ldi	r31, 0x00	; 0
 7a2:	ee 0f       	add	r30, r30
 7a4:	ff 1f       	adc	r31, r31
 7a6:	ee 0f       	add	r30, r30
 7a8:	ff 1f       	adc	r31, r31
 7aa:	ee 0f       	add	r30, r30
 7ac:	ff 1f       	adc	r31, r31
 7ae:	eb 59       	subi	r30, 0x9B	; 155
 7b0:	ff 4f       	sbci	r31, 0xFF	; 255
 7b2:	46 83       	std	Z+6, r20	; 0x06
		TasksQueue[TasksAddedCounter].TaskState       = TaskReady; /* Task Priority */
 7b4:	e0 91 61 00 	lds	r30, 0x0061	; 0x800061 <TasksAddedCounter>
 7b8:	f0 e0       	ldi	r31, 0x00	; 0
 7ba:	ee 0f       	add	r30, r30
 7bc:	ff 1f       	adc	r31, r31
 7be:	ee 0f       	add	r30, r30
 7c0:	ff 1f       	adc	r31, r31
 7c2:	ee 0f       	add	r30, r30
 7c4:	ff 1f       	adc	r31, r31
 7c6:	eb 59       	subi	r30, 0x9B	; 155
 7c8:	ff 4f       	sbci	r31, 0xFF	; 255
 7ca:	17 82       	std	Z+7, r1	; 0x07
		
		AddTaskState  = TRUE ;
 7cc:	81 e0       	ldi	r24, 0x01	; 1
 7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <SchedulerAddTask+0xa4>
	}
	else
	{
		AddTaskState  = FALSE ;
 7d0:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	TasksAddedCounter++;
 7d2:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <TasksAddedCounter>
 7d6:	9f 5f       	subi	r25, 0xFF	; 255
 7d8:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <TasksAddedCounter>
	uint8 LoopsNumber;
	uint8 ArrayIndex;
	Task_s Struct_Temp;
	
	/* Bubble Sort Algorithm*/
	for (LoopsNumber = TasksAddedCounter - ONE ; LoopsNumber > ZERO ; LoopsNumber-- )
 7dc:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <TasksAddedCounter>
 7e0:	6f ef       	ldi	r22, 0xFF	; 255
 7e2:	67 0f       	add	r22, r23
 7e4:	71 f1       	breq	.+92     	; 0x842 <SchedulerAddTask+0x114>
 7e6:	72 50       	subi	r23, 0x02	; 2
 7e8:	26 c0       	rjmp	.+76     	; 0x836 <SchedulerAddTask+0x108>
	{
		for (ArrayIndex = ZERO ; ArrayIndex < LoopsNumber  ; ArrayIndex++ )
		{
		   if (TasksQueue[ArrayIndex].TaskPriority > TasksQueue[ArrayIndex + ONE].TaskPriority)
 7ea:	f9 01       	movw	r30, r18
 7ec:	56 81       	ldd	r21, Z+6	; 0x06
 7ee:	46 85       	ldd	r20, Z+14	; 0x0e
 7f0:	45 17       	cp	r20, r21
 7f2:	c0 f4       	brcc	.+48     	; 0x824 <SchedulerAddTask+0xf6>
		   {
			   Struct_Temp                  = TasksQueue[ArrayIndex];        /***********************/
 7f4:	48 e0       	ldi	r20, 0x08	; 8
 7f6:	de 01       	movw	r26, r28
 7f8:	11 96       	adiw	r26, 0x01	; 1
 7fa:	01 90       	ld	r0, Z+
 7fc:	0d 92       	st	X+, r0
 7fe:	4a 95       	dec	r20
 800:	e1 f7       	brne	.-8      	; 0x7fa <SchedulerAddTask+0xcc>
			   TasksQueue[ArrayIndex]       = TasksQueue[ArrayIndex + ONE];  /* Swap Array Elements */  
 802:	48 e0       	ldi	r20, 0x08	; 8
 804:	f9 01       	movw	r30, r18
 806:	38 96       	adiw	r30, 0x08	; 8
 808:	d9 01       	movw	r26, r18
 80a:	01 90       	ld	r0, Z+
 80c:	0d 92       	st	X+, r0
 80e:	4a 95       	dec	r20
 810:	e1 f7       	brne	.-8      	; 0x80a <SchedulerAddTask+0xdc>
			   TasksQueue[ArrayIndex + ONE] = Struct_Temp;                   /***********************/
 812:	48 e0       	ldi	r20, 0x08	; 8
 814:	fe 01       	movw	r30, r28
 816:	31 96       	adiw	r30, 0x01	; 1
 818:	d9 01       	movw	r26, r18
 81a:	18 96       	adiw	r26, 0x08	; 8
 81c:	01 90       	ld	r0, Z+
 81e:	0d 92       	st	X+, r0
 820:	4a 95       	dec	r20
 822:	e1 f7       	brne	.-8      	; 0x81c <SchedulerAddTask+0xee>
	Task_s Struct_Temp;
	
	/* Bubble Sort Algorithm*/
	for (LoopsNumber = TasksAddedCounter - ONE ; LoopsNumber > ZERO ; LoopsNumber-- )
	{
		for (ArrayIndex = ZERO ; ArrayIndex < LoopsNumber  ; ArrayIndex++ )
 824:	9f 5f       	subi	r25, 0xFF	; 255
 826:	28 5f       	subi	r18, 0xF8	; 248
 828:	3f 4f       	sbci	r19, 0xFF	; 255
 82a:	69 13       	cpse	r22, r25
 82c:	de cf       	rjmp	.-68     	; 0x7ea <SchedulerAddTask+0xbc>
	uint8 LoopsNumber;
	uint8 ArrayIndex;
	Task_s Struct_Temp;
	
	/* Bubble Sort Algorithm*/
	for (LoopsNumber = TasksAddedCounter - ONE ; LoopsNumber > ZERO ; LoopsNumber-- )
 82e:	77 23       	and	r23, r23
 830:	41 f0       	breq	.+16     	; 0x842 <SchedulerAddTask+0x114>
 832:	61 50       	subi	r22, 0x01	; 1
 834:	71 50       	subi	r23, 0x01	; 1
	{
		for (ArrayIndex = ZERO ; ArrayIndex < LoopsNumber  ; ArrayIndex++ )
 836:	66 23       	and	r22, r22
 838:	e1 f3       	breq	.-8      	; 0x832 <SchedulerAddTask+0x104>
 83a:	25 e6       	ldi	r18, 0x65	; 101
 83c:	30 e0       	ldi	r19, 0x00	; 0
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	d4 cf       	rjmp	.-88     	; 0x7ea <SchedulerAddTask+0xbc>
	TasksAddedCounter++;
	
	SortTaskArray(); /* Sort Array Using Priorities*/
	
	return AddTaskState;
}
 842:	28 96       	adiw	r28, 0x08	; 8
 844:	0f b6       	in	r0, 0x3f	; 63
 846:	f8 94       	cli
 848:	de bf       	out	0x3e, r29	; 62
 84a:	0f be       	out	0x3f, r0	; 63
 84c:	cd bf       	out	0x3d, r28	; 61
 84e:	df 91       	pop	r29
 850:	cf 91       	pop	r28
 852:	08 95       	ret

00000854 <_exit>:
 854:	f8 94       	cli

00000856 <__stop_program>:
 856:	ff cf       	rjmp	.-2      	; 0x856 <__stop_program>

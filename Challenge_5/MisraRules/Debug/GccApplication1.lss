
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000022a  00800100  00001170  000011e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001170  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000140e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001440  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00001480  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b2c  00000000  00000000  00001520  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008b2  00000000  00000000  0000204c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000092c  00000000  00000000  000028fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000170  00000000  00000000  0000322c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000429  00000000  00000000  0000339c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000027e  00000000  00000000  000037c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00003a43  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
       8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
       c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	13 e0       	ldi	r17, 0x03	; 3
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e0 e7       	ldi	r30, 0x70	; 112
      7c:	f1 e1       	ldi	r31, 0x11	; 17
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 32       	cpi	r26, 0x2A	; 42
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
      8a:	0e 94 6f 08 	call	0x10de	; 0x10de <main>
      8e:	0c 94 b6 08 	jmp	0x116c	; 0x116c <_exit>

00000092 <__bad_interrupt>:
      92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <mul2>:
 * by the polynomial x^8 + x^4 + x^3 + x + 1 = 0
 * We do use mul2(int8_t a) but not mul(uint8_t a, uint8_t b)
 * just in order to get a higher speed.
 #define  mul2(x)  ((a&0x80) ? (((a<<1)^0x1b) : (a<<1)))
 */
static inline uint8_t mul2(uint8_t a) {
      96:	cf 93       	push	r28
      98:	df 93       	push	r29
      9a:	1f 92       	push	r1
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	89 83       	std	Y+1, r24	; 0x01
    return (a&0x80) ? ((a<<1)^0x1b) : (a<<1);
      a2:	89 81       	ldd	r24, Y+1	; 0x01
      a4:	88 23       	and	r24, r24
      a6:	4c f4       	brge	.+18     	; 0xba <mul2+0x24>
      a8:	89 81       	ldd	r24, Y+1	; 0x01
      aa:	88 2f       	mov	r24, r24
      ac:	90 e0       	ldi	r25, 0x00	; 0
      ae:	88 0f       	add	r24, r24
      b0:	99 1f       	adc	r25, r25
      b2:	98 2f       	mov	r25, r24
      b4:	8b e1       	ldi	r24, 0x1B	; 27
      b6:	89 27       	eor	r24, r25
      b8:	02 c0       	rjmp	.+4      	; 0xbe <mul2+0x28>
      ba:	89 81       	ldd	r24, Y+1	; 0x01
      bc:	88 0f       	add	r24, r24
}
      be:	0f 90       	pop	r0
      c0:	df 91       	pop	r29
      c2:	cf 91       	pop	r28
      c4:	08 95       	ret

000000c6 <inv_shift_rows>:
 *  Row2: s2  s6  s10 s14   >>> 2 bytes
 *  Row3: s3  s7  s11 s15   >>> 3 bytes
 */
#define  add(tmp,i)  tmp[i] ^ tmp[i+1] ^ tmp[i+2] ^ tmp[i+3];

static void inv_shift_rows(uint8_t *state) {
      c6:	cf 93       	push	r28
      c8:	df 93       	push	r29
      ca:	00 d0       	rcall	.+0      	; 0xcc <inv_shift_rows+0x6>
      cc:	1f 92       	push	r1
      ce:	cd b7       	in	r28, 0x3d	; 61
      d0:	de b7       	in	r29, 0x3e	; 62
      d2:	9b 83       	std	Y+3, r25	; 0x03
      d4:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t temp;
    // row1
    temp        = *(state+13);
      d6:	8a 81       	ldd	r24, Y+2	; 0x02
      d8:	9b 81       	ldd	r25, Y+3	; 0x03
      da:	fc 01       	movw	r30, r24
      dc:	85 85       	ldd	r24, Z+13	; 0x0d
      de:	89 83       	std	Y+1, r24	; 0x01
    *(state+13) = *(state+9);
      e0:	8a 81       	ldd	r24, Y+2	; 0x02
      e2:	9b 81       	ldd	r25, Y+3	; 0x03
      e4:	0d 96       	adiw	r24, 0x0d	; 13
      e6:	2a 81       	ldd	r18, Y+2	; 0x02
      e8:	3b 81       	ldd	r19, Y+3	; 0x03
      ea:	f9 01       	movw	r30, r18
      ec:	21 85       	ldd	r18, Z+9	; 0x09
      ee:	fc 01       	movw	r30, r24
      f0:	20 83       	st	Z, r18
    *(state+9)  = *(state+5);
      f2:	8a 81       	ldd	r24, Y+2	; 0x02
      f4:	9b 81       	ldd	r25, Y+3	; 0x03
      f6:	09 96       	adiw	r24, 0x09	; 9
      f8:	2a 81       	ldd	r18, Y+2	; 0x02
      fa:	3b 81       	ldd	r19, Y+3	; 0x03
      fc:	f9 01       	movw	r30, r18
      fe:	25 81       	ldd	r18, Z+5	; 0x05
     100:	fc 01       	movw	r30, r24
     102:	20 83       	st	Z, r18
    *(state+5)  = *(state+1);
     104:	8a 81       	ldd	r24, Y+2	; 0x02
     106:	9b 81       	ldd	r25, Y+3	; 0x03
     108:	05 96       	adiw	r24, 0x05	; 5
     10a:	2a 81       	ldd	r18, Y+2	; 0x02
     10c:	3b 81       	ldd	r19, Y+3	; 0x03
     10e:	f9 01       	movw	r30, r18
     110:	21 81       	ldd	r18, Z+1	; 0x01
     112:	fc 01       	movw	r30, r24
     114:	20 83       	st	Z, r18
    *(state+1)  = temp;
     116:	8a 81       	ldd	r24, Y+2	; 0x02
     118:	9b 81       	ldd	r25, Y+3	; 0x03
     11a:	01 96       	adiw	r24, 0x01	; 1
     11c:	29 81       	ldd	r18, Y+1	; 0x01
     11e:	fc 01       	movw	r30, r24
     120:	20 83       	st	Z, r18
    // row2
    temp        = *(state+14);
     122:	8a 81       	ldd	r24, Y+2	; 0x02
     124:	9b 81       	ldd	r25, Y+3	; 0x03
     126:	fc 01       	movw	r30, r24
     128:	86 85       	ldd	r24, Z+14	; 0x0e
     12a:	89 83       	std	Y+1, r24	; 0x01
    *(state+14) = *(state+6);
     12c:	8a 81       	ldd	r24, Y+2	; 0x02
     12e:	9b 81       	ldd	r25, Y+3	; 0x03
     130:	0e 96       	adiw	r24, 0x0e	; 14
     132:	2a 81       	ldd	r18, Y+2	; 0x02
     134:	3b 81       	ldd	r19, Y+3	; 0x03
     136:	f9 01       	movw	r30, r18
     138:	26 81       	ldd	r18, Z+6	; 0x06
     13a:	fc 01       	movw	r30, r24
     13c:	20 83       	st	Z, r18
    *(state+6)  = temp;
     13e:	8a 81       	ldd	r24, Y+2	; 0x02
     140:	9b 81       	ldd	r25, Y+3	; 0x03
     142:	06 96       	adiw	r24, 0x06	; 6
     144:	29 81       	ldd	r18, Y+1	; 0x01
     146:	fc 01       	movw	r30, r24
     148:	20 83       	st	Z, r18
    temp        = *(state+10);
     14a:	8a 81       	ldd	r24, Y+2	; 0x02
     14c:	9b 81       	ldd	r25, Y+3	; 0x03
     14e:	fc 01       	movw	r30, r24
     150:	82 85       	ldd	r24, Z+10	; 0x0a
     152:	89 83       	std	Y+1, r24	; 0x01
    *(state+10) = *(state+2);
     154:	8a 81       	ldd	r24, Y+2	; 0x02
     156:	9b 81       	ldd	r25, Y+3	; 0x03
     158:	0a 96       	adiw	r24, 0x0a	; 10
     15a:	2a 81       	ldd	r18, Y+2	; 0x02
     15c:	3b 81       	ldd	r19, Y+3	; 0x03
     15e:	f9 01       	movw	r30, r18
     160:	22 81       	ldd	r18, Z+2	; 0x02
     162:	fc 01       	movw	r30, r24
     164:	20 83       	st	Z, r18
    *(state+2)  = temp;
     166:	8a 81       	ldd	r24, Y+2	; 0x02
     168:	9b 81       	ldd	r25, Y+3	; 0x03
     16a:	02 96       	adiw	r24, 0x02	; 2
     16c:	29 81       	ldd	r18, Y+1	; 0x01
     16e:	fc 01       	movw	r30, r24
     170:	20 83       	st	Z, r18
    // row3
    temp        = *(state+3);
     172:	8a 81       	ldd	r24, Y+2	; 0x02
     174:	9b 81       	ldd	r25, Y+3	; 0x03
     176:	fc 01       	movw	r30, r24
     178:	83 81       	ldd	r24, Z+3	; 0x03
     17a:	89 83       	std	Y+1, r24	; 0x01
    *(state+3)  = *(state+7);
     17c:	8a 81       	ldd	r24, Y+2	; 0x02
     17e:	9b 81       	ldd	r25, Y+3	; 0x03
     180:	03 96       	adiw	r24, 0x03	; 3
     182:	2a 81       	ldd	r18, Y+2	; 0x02
     184:	3b 81       	ldd	r19, Y+3	; 0x03
     186:	f9 01       	movw	r30, r18
     188:	27 81       	ldd	r18, Z+7	; 0x07
     18a:	fc 01       	movw	r30, r24
     18c:	20 83       	st	Z, r18
    *(state+7)  = *(state+11);
     18e:	8a 81       	ldd	r24, Y+2	; 0x02
     190:	9b 81       	ldd	r25, Y+3	; 0x03
     192:	07 96       	adiw	r24, 0x07	; 7
     194:	2a 81       	ldd	r18, Y+2	; 0x02
     196:	3b 81       	ldd	r19, Y+3	; 0x03
     198:	f9 01       	movw	r30, r18
     19a:	23 85       	ldd	r18, Z+11	; 0x0b
     19c:	fc 01       	movw	r30, r24
     19e:	20 83       	st	Z, r18
    *(state+11) = *(state+15);
     1a0:	8a 81       	ldd	r24, Y+2	; 0x02
     1a2:	9b 81       	ldd	r25, Y+3	; 0x03
     1a4:	0b 96       	adiw	r24, 0x0b	; 11
     1a6:	2a 81       	ldd	r18, Y+2	; 0x02
     1a8:	3b 81       	ldd	r19, Y+3	; 0x03
     1aa:	f9 01       	movw	r30, r18
     1ac:	27 85       	ldd	r18, Z+15	; 0x0f
     1ae:	fc 01       	movw	r30, r24
     1b0:	20 83       	st	Z, r18
    *(state+15) = temp;
     1b2:	8a 81       	ldd	r24, Y+2	; 0x02
     1b4:	9b 81       	ldd	r25, Y+3	; 0x03
     1b6:	0f 96       	adiw	r24, 0x0f	; 15
     1b8:	29 81       	ldd	r18, Y+1	; 0x01
     1ba:	fc 01       	movw	r30, r24
     1bc:	20 83       	st	Z, r18
}
     1be:	00 00       	nop
     1c0:	0f 90       	pop	r0
     1c2:	0f 90       	pop	r0
     1c4:	0f 90       	pop	r0
     1c6:	df 91       	pop	r29
     1c8:	cf 91       	pop	r28
     1ca:	08 95       	ret

000001cc <aes_decrypt_128>:
void aes_decrypt_128( uint8_t *roundkeys,  uint8_t *ciphertext, uint8_t *plaintext) {
     1cc:	ff 92       	push	r15
     1ce:	0f 93       	push	r16
     1d0:	1f 93       	push	r17
     1d2:	cf 93       	push	r28
     1d4:	df 93       	push	r29
     1d6:	cd b7       	in	r28, 0x3d	; 61
     1d8:	de b7       	in	r29, 0x3e	; 62
     1da:	6b 97       	sbiw	r28, 0x1b	; 27
     1dc:	0f b6       	in	r0, 0x3f	; 63
     1de:	f8 94       	cli
     1e0:	de bf       	out	0x3e, r29	; 62
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	cd bf       	out	0x3d, r28	; 61
     1e6:	9f 8b       	std	Y+23, r25	; 0x17
     1e8:	8e 8b       	std	Y+22, r24	; 0x16
     1ea:	79 8f       	std	Y+25, r23	; 0x19
     1ec:	68 8f       	std	Y+24, r22	; 0x18
     1ee:	5b 8f       	std	Y+27, r21	; 0x1b
     1f0:	4a 8f       	std	Y+26, r20	; 0x1a

    uint8_t tmp[16];
    uint8_t t, u, v;
    uint8_t i, j;

    roundkeys += 160;
     1f2:	8e 89       	ldd	r24, Y+22	; 0x16
     1f4:	9f 89       	ldd	r25, Y+23	; 0x17
     1f6:	80 56       	subi	r24, 0x60	; 96
     1f8:	9f 4f       	sbci	r25, 0xFF	; 255
     1fa:	9f 8b       	std	Y+23, r25	; 0x17
     1fc:	8e 8b       	std	Y+22, r24	; 0x16

    // first round
	
       for (i= AES_BLOCK_SIZE-1;i !=0;--i)
     1fe:	8f e0       	ldi	r24, 0x0F	; 15
     200:	89 83       	std	Y+1, r24	; 0x01
     202:	1f c0       	rjmp	.+62     	; 0x242 <aes_decrypt_128+0x76>
	 {
		plaintext[i] = ciphertext[i] ^ roundkeys[i];
     204:	89 81       	ldd	r24, Y+1	; 0x01
     206:	88 2f       	mov	r24, r24
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	2a 8d       	ldd	r18, Y+26	; 0x1a
     20c:	3b 8d       	ldd	r19, Y+27	; 0x1b
     20e:	82 0f       	add	r24, r18
     210:	93 1f       	adc	r25, r19
     212:	29 81       	ldd	r18, Y+1	; 0x01
     214:	22 2f       	mov	r18, r18
     216:	30 e0       	ldi	r19, 0x00	; 0
     218:	48 8d       	ldd	r20, Y+24	; 0x18
     21a:	59 8d       	ldd	r21, Y+25	; 0x19
     21c:	24 0f       	add	r18, r20
     21e:	35 1f       	adc	r19, r21
     220:	f9 01       	movw	r30, r18
     222:	60 81       	ld	r22, Z
     224:	29 81       	ldd	r18, Y+1	; 0x01
     226:	22 2f       	mov	r18, r18
     228:	30 e0       	ldi	r19, 0x00	; 0
     22a:	4e 89       	ldd	r20, Y+22	; 0x16
     22c:	5f 89       	ldd	r21, Y+23	; 0x17
     22e:	24 0f       	add	r18, r20
     230:	35 1f       	adc	r19, r21
     232:	f9 01       	movw	r30, r18
     234:	20 81       	ld	r18, Z
     236:	26 27       	eor	r18, r22
     238:	fc 01       	movw	r30, r24
     23a:	20 83       	st	Z, r18

    roundkeys += 160;

    // first round
	
       for (i= AES_BLOCK_SIZE-1;i !=0;--i)
     23c:	89 81       	ldd	r24, Y+1	; 0x01
     23e:	81 50       	subi	r24, 0x01	; 1
     240:	89 83       	std	Y+1, r24	; 0x01
     242:	89 81       	ldd	r24, Y+1	; 0x01
     244:	88 23       	and	r24, r24
     246:	f1 f6       	brne	.-68     	; 0x204 <aes_decrypt_128+0x38>
	 {
		plaintext[i] = ciphertext[i] ^ roundkeys[i];
		
		}
		plaintext[0] = ciphertext[0] ^ roundkeys[0];
     248:	88 8d       	ldd	r24, Y+24	; 0x18
     24a:	99 8d       	ldd	r25, Y+25	; 0x19
     24c:	fc 01       	movw	r30, r24
     24e:	20 81       	ld	r18, Z
     250:	8e 89       	ldd	r24, Y+22	; 0x16
     252:	9f 89       	ldd	r25, Y+23	; 0x17
     254:	fc 01       	movw	r30, r24
     256:	80 81       	ld	r24, Z
     258:	28 27       	eor	r18, r24
     25a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     25c:	9b 8d       	ldd	r25, Y+27	; 0x1b
     25e:	fc 01       	movw	r30, r24
     260:	20 83       	st	Z, r18
	
    roundkeys -= 16;
     262:	8e 89       	ldd	r24, Y+22	; 0x16
     264:	9f 89       	ldd	r25, Y+23	; 0x17
     266:	40 97       	sbiw	r24, 0x10	; 16
     268:	9f 8b       	std	Y+23, r25	; 0x17
     26a:	8e 8b       	std	Y+22, r24	; 0x16
    inv_shift_rows(plaintext);
     26c:	8a 8d       	ldd	r24, Y+26	; 0x1a
     26e:	9b 8d       	ldd	r25, Y+27	; 0x1b
     270:	0e 94 63 00 	call	0xc6	; 0xc6 <inv_shift_rows>
    
	for (i = 0;i< AES_BLOCK_SIZE;) {
     274:	19 82       	std	Y+1, r1	; 0x01
     276:	1b c0       	rjmp	.+54     	; 0x2ae <aes_decrypt_128+0xe2>
       plaintext[i] = INV_SBOX[plaintext[i++]];
     278:	89 81       	ldd	r24, Y+1	; 0x01
     27a:	88 2f       	mov	r24, r24
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	2a 8d       	ldd	r18, Y+26	; 0x1a
     280:	3b 8d       	ldd	r19, Y+27	; 0x1b
     282:	82 0f       	add	r24, r18
     284:	93 1f       	adc	r25, r19
     286:	29 81       	ldd	r18, Y+1	; 0x01
     288:	31 e0       	ldi	r19, 0x01	; 1
     28a:	32 0f       	add	r19, r18
     28c:	39 83       	std	Y+1, r19	; 0x01
     28e:	22 2f       	mov	r18, r18
     290:	30 e0       	ldi	r19, 0x00	; 0
     292:	4a 8d       	ldd	r20, Y+26	; 0x1a
     294:	5b 8d       	ldd	r21, Y+27	; 0x1b
     296:	24 0f       	add	r18, r20
     298:	35 1f       	adc	r19, r21
     29a:	f9 01       	movw	r30, r18
     29c:	20 81       	ld	r18, Z
     29e:	22 2f       	mov	r18, r18
     2a0:	30 e0       	ldi	r19, 0x00	; 0
     2a2:	20 50       	subi	r18, 0x00	; 0
     2a4:	3f 4f       	sbci	r19, 0xFF	; 255
     2a6:	f9 01       	movw	r30, r18
     2a8:	20 81       	ld	r18, Z
     2aa:	fc 01       	movw	r30, r24
     2ac:	20 83       	st	Z, r18
		plaintext[0] = ciphertext[0] ^ roundkeys[0];
	
    roundkeys -= 16;
    inv_shift_rows(plaintext);
    
	for (i = 0;i< AES_BLOCK_SIZE;) {
     2ae:	89 81       	ldd	r24, Y+1	; 0x01
     2b0:	80 31       	cpi	r24, 0x10	; 16
     2b2:	10 f3       	brcs	.-60     	; 0x278 <aes_decrypt_128+0xac>
       plaintext[i] = INV_SBOX[plaintext[i++]];
    }
	
	
    for ( j = AES_ROUNDS-1;j>0; --j) {
     2b4:	89 e0       	ldi	r24, 0x09	; 9
     2b6:	8a 83       	std	Y+2, r24	; 0x02
     2b8:	09 c2       	rjmp	.+1042   	; 0x6cc <__LOCK_REGION_LENGTH__+0x2cc>
        
        // Inverse AddRoundKey
        for (i = AES_BLOCK_SIZE-1;i!=0; --i ) {
     2ba:	8f e0       	ldi	r24, 0x0F	; 15
     2bc:	89 83       	std	Y+1, r24	; 0x01
     2be:	20 c0       	rjmp	.+64     	; 0x300 <aes_decrypt_128+0x134>
            *(tmp+i) = *(plaintext+i) ^ *(roundkeys+i);
     2c0:	89 81       	ldd	r24, Y+1	; 0x01
     2c2:	88 2f       	mov	r24, r24
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	9e 01       	movw	r18, r28
     2c8:	2a 5f       	subi	r18, 0xFA	; 250
     2ca:	3f 4f       	sbci	r19, 0xFF	; 255
     2cc:	82 0f       	add	r24, r18
     2ce:	93 1f       	adc	r25, r19
     2d0:	29 81       	ldd	r18, Y+1	; 0x01
     2d2:	22 2f       	mov	r18, r18
     2d4:	30 e0       	ldi	r19, 0x00	; 0
     2d6:	4a 8d       	ldd	r20, Y+26	; 0x1a
     2d8:	5b 8d       	ldd	r21, Y+27	; 0x1b
     2da:	24 0f       	add	r18, r20
     2dc:	35 1f       	adc	r19, r21
     2de:	f9 01       	movw	r30, r18
     2e0:	60 81       	ld	r22, Z
     2e2:	29 81       	ldd	r18, Y+1	; 0x01
     2e4:	22 2f       	mov	r18, r18
     2e6:	30 e0       	ldi	r19, 0x00	; 0
     2e8:	4e 89       	ldd	r20, Y+22	; 0x16
     2ea:	5f 89       	ldd	r21, Y+23	; 0x17
     2ec:	24 0f       	add	r18, r20
     2ee:	35 1f       	adc	r19, r21
     2f0:	f9 01       	movw	r30, r18
     2f2:	20 81       	ld	r18, Z
     2f4:	26 27       	eor	r18, r22
     2f6:	fc 01       	movw	r30, r24
     2f8:	20 83       	st	Z, r18
	
	
    for ( j = AES_ROUNDS-1;j>0; --j) {
        
        // Inverse AddRoundKey
        for (i = AES_BLOCK_SIZE-1;i!=0; --i ) {
     2fa:	89 81       	ldd	r24, Y+1	; 0x01
     2fc:	81 50       	subi	r24, 0x01	; 1
     2fe:	89 83       	std	Y+1, r24	; 0x01
     300:	89 81       	ldd	r24, Y+1	; 0x01
     302:	88 23       	and	r24, r24
     304:	e9 f6       	brne	.-70     	; 0x2c0 <aes_decrypt_128+0xf4>
            *(tmp+i) = *(plaintext+i) ^ *(roundkeys+i);
        }
		 *(tmp+0) = *(plaintext+0) ^ *(roundkeys+0);
     306:	8a 8d       	ldd	r24, Y+26	; 0x1a
     308:	9b 8d       	ldd	r25, Y+27	; 0x1b
     30a:	fc 01       	movw	r30, r24
     30c:	20 81       	ld	r18, Z
     30e:	8e 89       	ldd	r24, Y+22	; 0x16
     310:	9f 89       	ldd	r25, Y+23	; 0x17
     312:	fc 01       	movw	r30, r24
     314:	80 81       	ld	r24, Z
     316:	82 27       	eor	r24, r18
     318:	8e 83       	std	Y+6, r24	; 0x06
         * [0e 0b 0d 09]   [s0  s4  s8  s12]
         * [09 0e 0b 0d] . [s1  s5  s9  s13]
         * [0d 09 0e 0b]   [s2  s6  s10 s14]
         * [0b 0d 09 0e]   [s3  s7  s11 s15]
         */
        for (i = 0; i < AES_BLOCK_SIZE; i+=4) {
     31a:	19 82       	std	Y+1, r1	; 0x01
     31c:	98 c1       	rjmp	.+816    	; 0x64e <__LOCK_REGION_LENGTH__+0x24e>
            //t = tmp[i] ^ tmp[i+1] ^ tmp[i+2] ^ tmp[i+3];
			t= add(tmp,i);
     31e:	89 81       	ldd	r24, Y+1	; 0x01
     320:	88 2f       	mov	r24, r24
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	9e 01       	movw	r18, r28
     326:	2a 5f       	subi	r18, 0xFA	; 250
     328:	3f 4f       	sbci	r19, 0xFF	; 255
     32a:	82 0f       	add	r24, r18
     32c:	93 1f       	adc	r25, r19
     32e:	fc 01       	movw	r30, r24
     330:	40 81       	ld	r20, Z
     332:	89 81       	ldd	r24, Y+1	; 0x01
     334:	88 2f       	mov	r24, r24
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	01 96       	adiw	r24, 0x01	; 1
     33a:	9e 01       	movw	r18, r28
     33c:	2a 5f       	subi	r18, 0xFA	; 250
     33e:	3f 4f       	sbci	r19, 0xFF	; 255
     340:	82 0f       	add	r24, r18
     342:	93 1f       	adc	r25, r19
     344:	fc 01       	movw	r30, r24
     346:	80 81       	ld	r24, Z
     348:	48 27       	eor	r20, r24
     34a:	89 81       	ldd	r24, Y+1	; 0x01
     34c:	88 2f       	mov	r24, r24
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	02 96       	adiw	r24, 0x02	; 2
     352:	9e 01       	movw	r18, r28
     354:	2a 5f       	subi	r18, 0xFA	; 250
     356:	3f 4f       	sbci	r19, 0xFF	; 255
     358:	82 0f       	add	r24, r18
     35a:	93 1f       	adc	r25, r19
     35c:	fc 01       	movw	r30, r24
     35e:	80 81       	ld	r24, Z
     360:	48 27       	eor	r20, r24
     362:	89 81       	ldd	r24, Y+1	; 0x01
     364:	88 2f       	mov	r24, r24
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	03 96       	adiw	r24, 0x03	; 3
     36a:	9e 01       	movw	r18, r28
     36c:	2a 5f       	subi	r18, 0xFA	; 250
     36e:	3f 4f       	sbci	r19, 0xFF	; 255
     370:	82 0f       	add	r24, r18
     372:	93 1f       	adc	r25, r19
     374:	fc 01       	movw	r30, r24
     376:	80 81       	ld	r24, Z
     378:	84 27       	eor	r24, r20
     37a:	8b 83       	std	Y+3, r24	; 0x03
            plaintext[i]   = t ^ tmp[i]   ^ mul2(tmp[i]^ tmp[i+1]);
     37c:	89 81       	ldd	r24, Y+1	; 0x01
     37e:	88 2f       	mov	r24, r24
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	2a 8d       	ldd	r18, Y+26	; 0x1a
     384:	3b 8d       	ldd	r19, Y+27	; 0x1b
     386:	89 01       	movw	r16, r18
     388:	08 0f       	add	r16, r24
     38a:	19 1f       	adc	r17, r25
     38c:	89 81       	ldd	r24, Y+1	; 0x01
     38e:	88 2f       	mov	r24, r24
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	9e 01       	movw	r18, r28
     394:	2a 5f       	subi	r18, 0xFA	; 250
     396:	3f 4f       	sbci	r19, 0xFF	; 255
     398:	82 0f       	add	r24, r18
     39a:	93 1f       	adc	r25, r19
     39c:	fc 01       	movw	r30, r24
     39e:	90 81       	ld	r25, Z
     3a0:	8b 81       	ldd	r24, Y+3	; 0x03
     3a2:	f9 2e       	mov	r15, r25
     3a4:	f8 26       	eor	r15, r24
     3a6:	89 81       	ldd	r24, Y+1	; 0x01
     3a8:	88 2f       	mov	r24, r24
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	9e 01       	movw	r18, r28
     3ae:	2a 5f       	subi	r18, 0xFA	; 250
     3b0:	3f 4f       	sbci	r19, 0xFF	; 255
     3b2:	82 0f       	add	r24, r18
     3b4:	93 1f       	adc	r25, r19
     3b6:	fc 01       	movw	r30, r24
     3b8:	40 81       	ld	r20, Z
     3ba:	89 81       	ldd	r24, Y+1	; 0x01
     3bc:	88 2f       	mov	r24, r24
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	01 96       	adiw	r24, 0x01	; 1
     3c2:	9e 01       	movw	r18, r28
     3c4:	2a 5f       	subi	r18, 0xFA	; 250
     3c6:	3f 4f       	sbci	r19, 0xFF	; 255
     3c8:	82 0f       	add	r24, r18
     3ca:	93 1f       	adc	r25, r19
     3cc:	fc 01       	movw	r30, r24
     3ce:	80 81       	ld	r24, Z
     3d0:	84 27       	eor	r24, r20
     3d2:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
     3d6:	8f 25       	eor	r24, r15
     3d8:	f8 01       	movw	r30, r16
     3da:	80 83       	st	Z, r24
            plaintext[i+1] = t ^ tmp[i+1] ^ mul2((tmp[i+1] ^ tmp[i+2]));
     3dc:	89 81       	ldd	r24, Y+1	; 0x01
     3de:	88 2f       	mov	r24, r24
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	01 96       	adiw	r24, 0x01	; 1
     3e4:	2a 8d       	ldd	r18, Y+26	; 0x1a
     3e6:	3b 8d       	ldd	r19, Y+27	; 0x1b
     3e8:	89 01       	movw	r16, r18
     3ea:	08 0f       	add	r16, r24
     3ec:	19 1f       	adc	r17, r25
     3ee:	89 81       	ldd	r24, Y+1	; 0x01
     3f0:	88 2f       	mov	r24, r24
     3f2:	90 e0       	ldi	r25, 0x00	; 0
     3f4:	01 96       	adiw	r24, 0x01	; 1
     3f6:	9e 01       	movw	r18, r28
     3f8:	2a 5f       	subi	r18, 0xFA	; 250
     3fa:	3f 4f       	sbci	r19, 0xFF	; 255
     3fc:	82 0f       	add	r24, r18
     3fe:	93 1f       	adc	r25, r19
     400:	fc 01       	movw	r30, r24
     402:	90 81       	ld	r25, Z
     404:	8b 81       	ldd	r24, Y+3	; 0x03
     406:	f9 2e       	mov	r15, r25
     408:	f8 26       	eor	r15, r24
     40a:	89 81       	ldd	r24, Y+1	; 0x01
     40c:	88 2f       	mov	r24, r24
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	01 96       	adiw	r24, 0x01	; 1
     412:	9e 01       	movw	r18, r28
     414:	2a 5f       	subi	r18, 0xFA	; 250
     416:	3f 4f       	sbci	r19, 0xFF	; 255
     418:	82 0f       	add	r24, r18
     41a:	93 1f       	adc	r25, r19
     41c:	fc 01       	movw	r30, r24
     41e:	40 81       	ld	r20, Z
     420:	89 81       	ldd	r24, Y+1	; 0x01
     422:	88 2f       	mov	r24, r24
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	02 96       	adiw	r24, 0x02	; 2
     428:	9e 01       	movw	r18, r28
     42a:	2a 5f       	subi	r18, 0xFA	; 250
     42c:	3f 4f       	sbci	r19, 0xFF	; 255
     42e:	82 0f       	add	r24, r18
     430:	93 1f       	adc	r25, r19
     432:	fc 01       	movw	r30, r24
     434:	80 81       	ld	r24, Z
     436:	84 27       	eor	r24, r20
     438:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
     43c:	8f 25       	eor	r24, r15
     43e:	f8 01       	movw	r30, r16
     440:	80 83       	st	Z, r24
            plaintext[i+2] = t ^ tmp[i+2] ^ mul2(tmp[i+2] ^ tmp[i+3]);
     442:	89 81       	ldd	r24, Y+1	; 0x01
     444:	88 2f       	mov	r24, r24
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	02 96       	adiw	r24, 0x02	; 2
     44a:	2a 8d       	ldd	r18, Y+26	; 0x1a
     44c:	3b 8d       	ldd	r19, Y+27	; 0x1b
     44e:	89 01       	movw	r16, r18
     450:	08 0f       	add	r16, r24
     452:	19 1f       	adc	r17, r25
     454:	89 81       	ldd	r24, Y+1	; 0x01
     456:	88 2f       	mov	r24, r24
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	02 96       	adiw	r24, 0x02	; 2
     45c:	9e 01       	movw	r18, r28
     45e:	2a 5f       	subi	r18, 0xFA	; 250
     460:	3f 4f       	sbci	r19, 0xFF	; 255
     462:	82 0f       	add	r24, r18
     464:	93 1f       	adc	r25, r19
     466:	fc 01       	movw	r30, r24
     468:	90 81       	ld	r25, Z
     46a:	8b 81       	ldd	r24, Y+3	; 0x03
     46c:	f9 2e       	mov	r15, r25
     46e:	f8 26       	eor	r15, r24
     470:	89 81       	ldd	r24, Y+1	; 0x01
     472:	88 2f       	mov	r24, r24
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	02 96       	adiw	r24, 0x02	; 2
     478:	9e 01       	movw	r18, r28
     47a:	2a 5f       	subi	r18, 0xFA	; 250
     47c:	3f 4f       	sbci	r19, 0xFF	; 255
     47e:	82 0f       	add	r24, r18
     480:	93 1f       	adc	r25, r19
     482:	fc 01       	movw	r30, r24
     484:	40 81       	ld	r20, Z
     486:	89 81       	ldd	r24, Y+1	; 0x01
     488:	88 2f       	mov	r24, r24
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	03 96       	adiw	r24, 0x03	; 3
     48e:	9e 01       	movw	r18, r28
     490:	2a 5f       	subi	r18, 0xFA	; 250
     492:	3f 4f       	sbci	r19, 0xFF	; 255
     494:	82 0f       	add	r24, r18
     496:	93 1f       	adc	r25, r19
     498:	fc 01       	movw	r30, r24
     49a:	80 81       	ld	r24, Z
     49c:	84 27       	eor	r24, r20
     49e:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
     4a2:	8f 25       	eor	r24, r15
     4a4:	f8 01       	movw	r30, r16
     4a6:	80 83       	st	Z, r24
            plaintext[i+3] = t ^ tmp[i+3] ^ mul2(tmp[i+3] ^ tmp[i]);
     4a8:	89 81       	ldd	r24, Y+1	; 0x01
     4aa:	88 2f       	mov	r24, r24
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	03 96       	adiw	r24, 0x03	; 3
     4b0:	2a 8d       	ldd	r18, Y+26	; 0x1a
     4b2:	3b 8d       	ldd	r19, Y+27	; 0x1b
     4b4:	89 01       	movw	r16, r18
     4b6:	08 0f       	add	r16, r24
     4b8:	19 1f       	adc	r17, r25
     4ba:	89 81       	ldd	r24, Y+1	; 0x01
     4bc:	88 2f       	mov	r24, r24
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	03 96       	adiw	r24, 0x03	; 3
     4c2:	9e 01       	movw	r18, r28
     4c4:	2a 5f       	subi	r18, 0xFA	; 250
     4c6:	3f 4f       	sbci	r19, 0xFF	; 255
     4c8:	82 0f       	add	r24, r18
     4ca:	93 1f       	adc	r25, r19
     4cc:	fc 01       	movw	r30, r24
     4ce:	90 81       	ld	r25, Z
     4d0:	8b 81       	ldd	r24, Y+3	; 0x03
     4d2:	f9 2e       	mov	r15, r25
     4d4:	f8 26       	eor	r15, r24
     4d6:	89 81       	ldd	r24, Y+1	; 0x01
     4d8:	88 2f       	mov	r24, r24
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	03 96       	adiw	r24, 0x03	; 3
     4de:	9e 01       	movw	r18, r28
     4e0:	2a 5f       	subi	r18, 0xFA	; 250
     4e2:	3f 4f       	sbci	r19, 0xFF	; 255
     4e4:	82 0f       	add	r24, r18
     4e6:	93 1f       	adc	r25, r19
     4e8:	fc 01       	movw	r30, r24
     4ea:	40 81       	ld	r20, Z
     4ec:	89 81       	ldd	r24, Y+1	; 0x01
     4ee:	88 2f       	mov	r24, r24
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	9e 01       	movw	r18, r28
     4f4:	2a 5f       	subi	r18, 0xFA	; 250
     4f6:	3f 4f       	sbci	r19, 0xFF	; 255
     4f8:	82 0f       	add	r24, r18
     4fa:	93 1f       	adc	r25, r19
     4fc:	fc 01       	movw	r30, r24
     4fe:	80 81       	ld	r24, Z
     500:	84 27       	eor	r24, r20
     502:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
     506:	8f 25       	eor	r24, r15
     508:	f8 01       	movw	r30, r16
     50a:	80 83       	st	Z, r24
            u = mul2(mul2(tmp[i]   ^ tmp[i+2]));
     50c:	89 81       	ldd	r24, Y+1	; 0x01
     50e:	88 2f       	mov	r24, r24
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	9e 01       	movw	r18, r28
     514:	2a 5f       	subi	r18, 0xFA	; 250
     516:	3f 4f       	sbci	r19, 0xFF	; 255
     518:	82 0f       	add	r24, r18
     51a:	93 1f       	adc	r25, r19
     51c:	fc 01       	movw	r30, r24
     51e:	40 81       	ld	r20, Z
     520:	89 81       	ldd	r24, Y+1	; 0x01
     522:	88 2f       	mov	r24, r24
     524:	90 e0       	ldi	r25, 0x00	; 0
     526:	02 96       	adiw	r24, 0x02	; 2
     528:	9e 01       	movw	r18, r28
     52a:	2a 5f       	subi	r18, 0xFA	; 250
     52c:	3f 4f       	sbci	r19, 0xFF	; 255
     52e:	82 0f       	add	r24, r18
     530:	93 1f       	adc	r25, r19
     532:	fc 01       	movw	r30, r24
     534:	80 81       	ld	r24, Z
     536:	84 27       	eor	r24, r20
     538:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
     53c:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
     540:	8c 83       	std	Y+4, r24	; 0x04
            v = mul2(mul2(tmp[i+1] ^ tmp[i+3]));
     542:	89 81       	ldd	r24, Y+1	; 0x01
     544:	88 2f       	mov	r24, r24
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	01 96       	adiw	r24, 0x01	; 1
     54a:	9e 01       	movw	r18, r28
     54c:	2a 5f       	subi	r18, 0xFA	; 250
     54e:	3f 4f       	sbci	r19, 0xFF	; 255
     550:	82 0f       	add	r24, r18
     552:	93 1f       	adc	r25, r19
     554:	fc 01       	movw	r30, r24
     556:	40 81       	ld	r20, Z
     558:	89 81       	ldd	r24, Y+1	; 0x01
     55a:	88 2f       	mov	r24, r24
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	03 96       	adiw	r24, 0x03	; 3
     560:	9e 01       	movw	r18, r28
     562:	2a 5f       	subi	r18, 0xFA	; 250
     564:	3f 4f       	sbci	r19, 0xFF	; 255
     566:	82 0f       	add	r24, r18
     568:	93 1f       	adc	r25, r19
     56a:	fc 01       	movw	r30, r24
     56c:	80 81       	ld	r24, Z
     56e:	84 27       	eor	r24, r20
     570:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
     574:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
     578:	8d 83       	std	Y+5, r24	; 0x05
            t = mul2(u ^ v);
     57a:	9c 81       	ldd	r25, Y+4	; 0x04
     57c:	8d 81       	ldd	r24, Y+5	; 0x05
     57e:	89 27       	eor	r24, r25
     580:	0e 94 4b 00 	call	0x96	; 0x96 <mul2>
     584:	8b 83       	std	Y+3, r24	; 0x03
            plaintext[i]   ^= t ^ u;
     586:	89 81       	ldd	r24, Y+1	; 0x01
     588:	88 2f       	mov	r24, r24
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	2a 8d       	ldd	r18, Y+26	; 0x1a
     58e:	3b 8d       	ldd	r19, Y+27	; 0x1b
     590:	82 0f       	add	r24, r18
     592:	93 1f       	adc	r25, r19
     594:	29 81       	ldd	r18, Y+1	; 0x01
     596:	22 2f       	mov	r18, r18
     598:	30 e0       	ldi	r19, 0x00	; 0
     59a:	4a 8d       	ldd	r20, Y+26	; 0x1a
     59c:	5b 8d       	ldd	r21, Y+27	; 0x1b
     59e:	24 0f       	add	r18, r20
     5a0:	35 1f       	adc	r19, r21
     5a2:	f9 01       	movw	r30, r18
     5a4:	30 81       	ld	r19, Z
     5a6:	4b 81       	ldd	r20, Y+3	; 0x03
     5a8:	2c 81       	ldd	r18, Y+4	; 0x04
     5aa:	24 27       	eor	r18, r20
     5ac:	23 27       	eor	r18, r19
     5ae:	fc 01       	movw	r30, r24
     5b0:	20 83       	st	Z, r18
            plaintext[i+1] ^= t ^ v;
     5b2:	89 81       	ldd	r24, Y+1	; 0x01
     5b4:	88 2f       	mov	r24, r24
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	01 96       	adiw	r24, 0x01	; 1
     5ba:	2a 8d       	ldd	r18, Y+26	; 0x1a
     5bc:	3b 8d       	ldd	r19, Y+27	; 0x1b
     5be:	82 0f       	add	r24, r18
     5c0:	93 1f       	adc	r25, r19
     5c2:	29 81       	ldd	r18, Y+1	; 0x01
     5c4:	22 2f       	mov	r18, r18
     5c6:	30 e0       	ldi	r19, 0x00	; 0
     5c8:	2f 5f       	subi	r18, 0xFF	; 255
     5ca:	3f 4f       	sbci	r19, 0xFF	; 255
     5cc:	4a 8d       	ldd	r20, Y+26	; 0x1a
     5ce:	5b 8d       	ldd	r21, Y+27	; 0x1b
     5d0:	24 0f       	add	r18, r20
     5d2:	35 1f       	adc	r19, r21
     5d4:	f9 01       	movw	r30, r18
     5d6:	30 81       	ld	r19, Z
     5d8:	4b 81       	ldd	r20, Y+3	; 0x03
     5da:	2d 81       	ldd	r18, Y+5	; 0x05
     5dc:	24 27       	eor	r18, r20
     5de:	23 27       	eor	r18, r19
     5e0:	fc 01       	movw	r30, r24
     5e2:	20 83       	st	Z, r18
            plaintext[i+2] ^= t ^ u;
     5e4:	89 81       	ldd	r24, Y+1	; 0x01
     5e6:	88 2f       	mov	r24, r24
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	02 96       	adiw	r24, 0x02	; 2
     5ec:	2a 8d       	ldd	r18, Y+26	; 0x1a
     5ee:	3b 8d       	ldd	r19, Y+27	; 0x1b
     5f0:	82 0f       	add	r24, r18
     5f2:	93 1f       	adc	r25, r19
     5f4:	29 81       	ldd	r18, Y+1	; 0x01
     5f6:	22 2f       	mov	r18, r18
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	2e 5f       	subi	r18, 0xFE	; 254
     5fc:	3f 4f       	sbci	r19, 0xFF	; 255
     5fe:	4a 8d       	ldd	r20, Y+26	; 0x1a
     600:	5b 8d       	ldd	r21, Y+27	; 0x1b
     602:	24 0f       	add	r18, r20
     604:	35 1f       	adc	r19, r21
     606:	f9 01       	movw	r30, r18
     608:	30 81       	ld	r19, Z
     60a:	4b 81       	ldd	r20, Y+3	; 0x03
     60c:	2c 81       	ldd	r18, Y+4	; 0x04
     60e:	24 27       	eor	r18, r20
     610:	23 27       	eor	r18, r19
     612:	fc 01       	movw	r30, r24
     614:	20 83       	st	Z, r18
            plaintext[i+3] ^= t ^ v;
     616:	89 81       	ldd	r24, Y+1	; 0x01
     618:	88 2f       	mov	r24, r24
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	03 96       	adiw	r24, 0x03	; 3
     61e:	2a 8d       	ldd	r18, Y+26	; 0x1a
     620:	3b 8d       	ldd	r19, Y+27	; 0x1b
     622:	82 0f       	add	r24, r18
     624:	93 1f       	adc	r25, r19
     626:	29 81       	ldd	r18, Y+1	; 0x01
     628:	22 2f       	mov	r18, r18
     62a:	30 e0       	ldi	r19, 0x00	; 0
     62c:	2d 5f       	subi	r18, 0xFD	; 253
     62e:	3f 4f       	sbci	r19, 0xFF	; 255
     630:	4a 8d       	ldd	r20, Y+26	; 0x1a
     632:	5b 8d       	ldd	r21, Y+27	; 0x1b
     634:	24 0f       	add	r18, r20
     636:	35 1f       	adc	r19, r21
     638:	f9 01       	movw	r30, r18
     63a:	30 81       	ld	r19, Z
     63c:	4b 81       	ldd	r20, Y+3	; 0x03
     63e:	2d 81       	ldd	r18, Y+5	; 0x05
     640:	24 27       	eor	r18, r20
     642:	23 27       	eor	r18, r19
     644:	fc 01       	movw	r30, r24
     646:	20 83       	st	Z, r18
         * [0e 0b 0d 09]   [s0  s4  s8  s12]
         * [09 0e 0b 0d] . [s1  s5  s9  s13]
         * [0d 09 0e 0b]   [s2  s6  s10 s14]
         * [0b 0d 09 0e]   [s3  s7  s11 s15]
         */
        for (i = 0; i < AES_BLOCK_SIZE; i+=4) {
     648:	89 81       	ldd	r24, Y+1	; 0x01
     64a:	8c 5f       	subi	r24, 0xFC	; 252
     64c:	89 83       	std	Y+1, r24	; 0x01
     64e:	89 81       	ldd	r24, Y+1	; 0x01
     650:	80 31       	cpi	r24, 0x10	; 16
     652:	08 f4       	brcc	.+2      	; 0x656 <__LOCK_REGION_LENGTH__+0x256>
     654:	64 ce       	rjmp	.-824    	; 0x31e <aes_decrypt_128+0x152>
            plaintext[i+2] ^= t ^ u;
            plaintext[i+3] ^= t ^ v;
        }
        
        // Inverse ShiftRows
        inv_shift_rows(plaintext);
     656:	8a 8d       	ldd	r24, Y+26	; 0x1a
     658:	9b 8d       	ldd	r25, Y+27	; 0x1b
     65a:	0e 94 63 00 	call	0xc6	; 0xc6 <inv_shift_rows>
        
        // Inverse SubBytes
        for ( i = AES_BLOCK_SIZE-1;i!=0;) {
     65e:	8f e0       	ldi	r24, 0x0F	; 15
     660:	89 83       	std	Y+1, r24	; 0x01
     662:	1b c0       	rjmp	.+54     	; 0x69a <__LOCK_REGION_LENGTH__+0x29a>
            *(plaintext+i) = INV_SBOX[plaintext[i--]];
     664:	89 81       	ldd	r24, Y+1	; 0x01
     666:	88 2f       	mov	r24, r24
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	2a 8d       	ldd	r18, Y+26	; 0x1a
     66c:	3b 8d       	ldd	r19, Y+27	; 0x1b
     66e:	82 0f       	add	r24, r18
     670:	93 1f       	adc	r25, r19
     672:	29 81       	ldd	r18, Y+1	; 0x01
     674:	3f ef       	ldi	r19, 0xFF	; 255
     676:	32 0f       	add	r19, r18
     678:	39 83       	std	Y+1, r19	; 0x01
     67a:	22 2f       	mov	r18, r18
     67c:	30 e0       	ldi	r19, 0x00	; 0
     67e:	4a 8d       	ldd	r20, Y+26	; 0x1a
     680:	5b 8d       	ldd	r21, Y+27	; 0x1b
     682:	24 0f       	add	r18, r20
     684:	35 1f       	adc	r19, r21
     686:	f9 01       	movw	r30, r18
     688:	20 81       	ld	r18, Z
     68a:	22 2f       	mov	r18, r18
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	20 50       	subi	r18, 0x00	; 0
     690:	3f 4f       	sbci	r19, 0xFF	; 255
     692:	f9 01       	movw	r30, r18
     694:	20 81       	ld	r18, Z
     696:	fc 01       	movw	r30, r24
     698:	20 83       	st	Z, r18
        
        // Inverse ShiftRows
        inv_shift_rows(plaintext);
        
        // Inverse SubBytes
        for ( i = AES_BLOCK_SIZE-1;i!=0;) {
     69a:	89 81       	ldd	r24, Y+1	; 0x01
     69c:	88 23       	and	r24, r24
     69e:	11 f7       	brne	.-60     	; 0x664 <__LOCK_REGION_LENGTH__+0x264>
            *(plaintext+i) = INV_SBOX[plaintext[i--]];
        }
		 *(plaintext+0) = INV_SBOX[plaintext[0]];
     6a0:	8a 8d       	ldd	r24, Y+26	; 0x1a
     6a2:	9b 8d       	ldd	r25, Y+27	; 0x1b
     6a4:	fc 01       	movw	r30, r24
     6a6:	80 81       	ld	r24, Z
     6a8:	88 2f       	mov	r24, r24
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	80 50       	subi	r24, 0x00	; 0
     6ae:	9f 4f       	sbci	r25, 0xFF	; 255
     6b0:	fc 01       	movw	r30, r24
     6b2:	20 81       	ld	r18, Z
     6b4:	8a 8d       	ldd	r24, Y+26	; 0x1a
     6b6:	9b 8d       	ldd	r25, Y+27	; 0x1b
     6b8:	fc 01       	movw	r30, r24
     6ba:	20 83       	st	Z, r18

        roundkeys -= 16;
     6bc:	8e 89       	ldd	r24, Y+22	; 0x16
     6be:	9f 89       	ldd	r25, Y+23	; 0x17
     6c0:	40 97       	sbiw	r24, 0x10	; 16
     6c2:	9f 8b       	std	Y+23, r25	; 0x17
     6c4:	8e 8b       	std	Y+22, r24	; 0x16
	for (i = 0;i< AES_BLOCK_SIZE;) {
       plaintext[i] = INV_SBOX[plaintext[i++]];
    }
	
	
    for ( j = AES_ROUNDS-1;j>0; --j) {
     6c6:	8a 81       	ldd	r24, Y+2	; 0x02
     6c8:	81 50       	subi	r24, 0x01	; 1
     6ca:	8a 83       	std	Y+2, r24	; 0x02
     6cc:	8a 81       	ldd	r24, Y+2	; 0x02
     6ce:	88 23       	and	r24, r24
     6d0:	09 f0       	breq	.+2      	; 0x6d4 <__LOCK_REGION_LENGTH__+0x2d4>
     6d2:	f3 cd       	rjmp	.-1050   	; 0x2ba <aes_decrypt_128+0xee>
        roundkeys -= 16;

    }

    // last AddRoundKey
    for ( i = AES_BLOCK_SIZE-1;i!=0;i-- ) {
     6d4:	8f e0       	ldi	r24, 0x0F	; 15
     6d6:	89 83       	std	Y+1, r24	; 0x01
     6d8:	1f c0       	rjmp	.+62     	; 0x718 <__LOCK_REGION_LENGTH__+0x318>
        *(plaintext+i) ^= roundkeys[i];
     6da:	89 81       	ldd	r24, Y+1	; 0x01
     6dc:	88 2f       	mov	r24, r24
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	2a 8d       	ldd	r18, Y+26	; 0x1a
     6e2:	3b 8d       	ldd	r19, Y+27	; 0x1b
     6e4:	82 0f       	add	r24, r18
     6e6:	93 1f       	adc	r25, r19
     6e8:	29 81       	ldd	r18, Y+1	; 0x01
     6ea:	22 2f       	mov	r18, r18
     6ec:	30 e0       	ldi	r19, 0x00	; 0
     6ee:	4a 8d       	ldd	r20, Y+26	; 0x1a
     6f0:	5b 8d       	ldd	r21, Y+27	; 0x1b
     6f2:	24 0f       	add	r18, r20
     6f4:	35 1f       	adc	r19, r21
     6f6:	f9 01       	movw	r30, r18
     6f8:	60 81       	ld	r22, Z
     6fa:	29 81       	ldd	r18, Y+1	; 0x01
     6fc:	22 2f       	mov	r18, r18
     6fe:	30 e0       	ldi	r19, 0x00	; 0
     700:	4e 89       	ldd	r20, Y+22	; 0x16
     702:	5f 89       	ldd	r21, Y+23	; 0x17
     704:	24 0f       	add	r18, r20
     706:	35 1f       	adc	r19, r21
     708:	f9 01       	movw	r30, r18
     70a:	20 81       	ld	r18, Z
     70c:	26 27       	eor	r18, r22
     70e:	fc 01       	movw	r30, r24
     710:	20 83       	st	Z, r18
        roundkeys -= 16;

    }

    // last AddRoundKey
    for ( i = AES_BLOCK_SIZE-1;i!=0;i-- ) {
     712:	89 81       	ldd	r24, Y+1	; 0x01
     714:	81 50       	subi	r24, 0x01	; 1
     716:	89 83       	std	Y+1, r24	; 0x01
     718:	89 81       	ldd	r24, Y+1	; 0x01
     71a:	88 23       	and	r24, r24
     71c:	f1 f6       	brne	.-68     	; 0x6da <__LOCK_REGION_LENGTH__+0x2da>
        *(plaintext+i) ^= roundkeys[i];
    }
	 *(plaintext+0) ^= roundkeys[0];
     71e:	8a 8d       	ldd	r24, Y+26	; 0x1a
     720:	9b 8d       	ldd	r25, Y+27	; 0x1b
     722:	fc 01       	movw	r30, r24
     724:	20 81       	ld	r18, Z
     726:	8e 89       	ldd	r24, Y+22	; 0x16
     728:	9f 89       	ldd	r25, Y+23	; 0x17
     72a:	fc 01       	movw	r30, r24
     72c:	80 81       	ld	r24, Z
     72e:	28 27       	eor	r18, r24
     730:	8a 8d       	ldd	r24, Y+26	; 0x1a
     732:	9b 8d       	ldd	r25, Y+27	; 0x1b
     734:	fc 01       	movw	r30, r24
     736:	20 83       	st	Z, r18

     738:	00 00       	nop
     73a:	6b 96       	adiw	r28, 0x1b	; 27
     73c:	0f b6       	in	r0, 0x3f	; 63
     73e:	f8 94       	cli
     740:	de bf       	out	0x3e, r29	; 62
     742:	0f be       	out	0x3f, r0	; 63
     744:	cd bf       	out	0x3d, r28	; 61
     746:	df 91       	pop	r29
     748:	cf 91       	pop	r28
     74a:	1f 91       	pop	r17
     74c:	0f 91       	pop	r16
     74e:	ff 90       	pop	r15
     750:	08 95       	ret

00000752 <mul2>:
 * Multiply two numbers in the GF(2^8) finite field defined
 * by the polynomial x^8 + x^4 + x^3 + x + 1 = 0
 * We do use mul2(int8_t a) but not mul(uint8_t a, uint8_t b)
 * just in order to get a higher speed.
 */
 static inline uint8_t mul2(uint8_t a) {
     752:	cf 93       	push	r28
     754:	df 93       	push	r29
     756:	1f 92       	push	r1
     758:	cd b7       	in	r28, 0x3d	; 61
     75a:	de b7       	in	r29, 0x3e	; 62
     75c:	89 83       	std	Y+1, r24	; 0x01
    return (a&0x80) ? ((a<<1)^0x1b) : (a<<1);
     75e:	89 81       	ldd	r24, Y+1	; 0x01
     760:	88 23       	and	r24, r24
     762:	4c f4       	brge	.+18     	; 0x776 <mul2+0x24>
     764:	89 81       	ldd	r24, Y+1	; 0x01
     766:	88 2f       	mov	r24, r24
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	88 0f       	add	r24, r24
     76c:	99 1f       	adc	r25, r25
     76e:	98 2f       	mov	r25, r24
     770:	8b e1       	ldi	r24, 0x1B	; 27
     772:	89 27       	eor	r24, r25
     774:	02 c0       	rjmp	.+4      	; 0x77a <mul2+0x28>
     776:	89 81       	ldd	r24, Y+1	; 0x01
     778:	88 0f       	add	r24, r24
}
     77a:	0f 90       	pop	r0
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	08 95       	ret

00000782 <shift_rows>:
 *  Row0: s0  s4  s8  s12   <<< 0 byte
 *  Row1: s1  s5  s9  s13   <<< 1 byte
 *  Row2: s2  s6  s10 s14   <<< 2 bytes
 *  Row3: s3  s7  s11 s15   <<< 3 bytes
 */
static void shift_rows(uint8_t *state) {
     782:	cf 93       	push	r28
     784:	df 93       	push	r29
     786:	00 d0       	rcall	.+0      	; 0x788 <shift_rows+0x6>
     788:	1f 92       	push	r1
     78a:	cd b7       	in	r28, 0x3d	; 61
     78c:	de b7       	in	r29, 0x3e	; 62
     78e:	9b 83       	std	Y+3, r25	; 0x03
     790:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t temp;
    // row1
    temp        = *(state+1);
     792:	8a 81       	ldd	r24, Y+2	; 0x02
     794:	9b 81       	ldd	r25, Y+3	; 0x03
     796:	fc 01       	movw	r30, r24
     798:	81 81       	ldd	r24, Z+1	; 0x01
     79a:	89 83       	std	Y+1, r24	; 0x01
    *(state+1)  = *(state+5);
     79c:	8a 81       	ldd	r24, Y+2	; 0x02
     79e:	9b 81       	ldd	r25, Y+3	; 0x03
     7a0:	01 96       	adiw	r24, 0x01	; 1
     7a2:	2a 81       	ldd	r18, Y+2	; 0x02
     7a4:	3b 81       	ldd	r19, Y+3	; 0x03
     7a6:	f9 01       	movw	r30, r18
     7a8:	25 81       	ldd	r18, Z+5	; 0x05
     7aa:	fc 01       	movw	r30, r24
     7ac:	20 83       	st	Z, r18
    *(state+5)  = *(state+9);
     7ae:	8a 81       	ldd	r24, Y+2	; 0x02
     7b0:	9b 81       	ldd	r25, Y+3	; 0x03
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	2a 81       	ldd	r18, Y+2	; 0x02
     7b6:	3b 81       	ldd	r19, Y+3	; 0x03
     7b8:	f9 01       	movw	r30, r18
     7ba:	21 85       	ldd	r18, Z+9	; 0x09
     7bc:	fc 01       	movw	r30, r24
     7be:	20 83       	st	Z, r18
    *(state+9)  = *(state+13);
     7c0:	8a 81       	ldd	r24, Y+2	; 0x02
     7c2:	9b 81       	ldd	r25, Y+3	; 0x03
     7c4:	09 96       	adiw	r24, 0x09	; 9
     7c6:	2a 81       	ldd	r18, Y+2	; 0x02
     7c8:	3b 81       	ldd	r19, Y+3	; 0x03
     7ca:	f9 01       	movw	r30, r18
     7cc:	25 85       	ldd	r18, Z+13	; 0x0d
     7ce:	fc 01       	movw	r30, r24
     7d0:	20 83       	st	Z, r18
    *(state+13) = temp;
     7d2:	8a 81       	ldd	r24, Y+2	; 0x02
     7d4:	9b 81       	ldd	r25, Y+3	; 0x03
     7d6:	0d 96       	adiw	r24, 0x0d	; 13
     7d8:	29 81       	ldd	r18, Y+1	; 0x01
     7da:	fc 01       	movw	r30, r24
     7dc:	20 83       	st	Z, r18
    // row2
    temp        = *(state+2);
     7de:	8a 81       	ldd	r24, Y+2	; 0x02
     7e0:	9b 81       	ldd	r25, Y+3	; 0x03
     7e2:	fc 01       	movw	r30, r24
     7e4:	82 81       	ldd	r24, Z+2	; 0x02
     7e6:	89 83       	std	Y+1, r24	; 0x01
    *(state+2)  = *(state+10);
     7e8:	8a 81       	ldd	r24, Y+2	; 0x02
     7ea:	9b 81       	ldd	r25, Y+3	; 0x03
     7ec:	02 96       	adiw	r24, 0x02	; 2
     7ee:	2a 81       	ldd	r18, Y+2	; 0x02
     7f0:	3b 81       	ldd	r19, Y+3	; 0x03
     7f2:	f9 01       	movw	r30, r18
     7f4:	22 85       	ldd	r18, Z+10	; 0x0a
     7f6:	fc 01       	movw	r30, r24
     7f8:	20 83       	st	Z, r18
    *(state+10) = temp;
     7fa:	8a 81       	ldd	r24, Y+2	; 0x02
     7fc:	9b 81       	ldd	r25, Y+3	; 0x03
     7fe:	0a 96       	adiw	r24, 0x0a	; 10
     800:	29 81       	ldd	r18, Y+1	; 0x01
     802:	fc 01       	movw	r30, r24
     804:	20 83       	st	Z, r18
    temp        = *(state+6);
     806:	8a 81       	ldd	r24, Y+2	; 0x02
     808:	9b 81       	ldd	r25, Y+3	; 0x03
     80a:	fc 01       	movw	r30, r24
     80c:	86 81       	ldd	r24, Z+6	; 0x06
     80e:	89 83       	std	Y+1, r24	; 0x01
    *(state+6)  = *(state+14);
     810:	8a 81       	ldd	r24, Y+2	; 0x02
     812:	9b 81       	ldd	r25, Y+3	; 0x03
     814:	06 96       	adiw	r24, 0x06	; 6
     816:	2a 81       	ldd	r18, Y+2	; 0x02
     818:	3b 81       	ldd	r19, Y+3	; 0x03
     81a:	f9 01       	movw	r30, r18
     81c:	26 85       	ldd	r18, Z+14	; 0x0e
     81e:	fc 01       	movw	r30, r24
     820:	20 83       	st	Z, r18
    *(state+14) = temp;
     822:	8a 81       	ldd	r24, Y+2	; 0x02
     824:	9b 81       	ldd	r25, Y+3	; 0x03
     826:	0e 96       	adiw	r24, 0x0e	; 14
     828:	29 81       	ldd	r18, Y+1	; 0x01
     82a:	fc 01       	movw	r30, r24
     82c:	20 83       	st	Z, r18
    // row3
    temp        = *(state+15);
     82e:	8a 81       	ldd	r24, Y+2	; 0x02
     830:	9b 81       	ldd	r25, Y+3	; 0x03
     832:	fc 01       	movw	r30, r24
     834:	87 85       	ldd	r24, Z+15	; 0x0f
     836:	89 83       	std	Y+1, r24	; 0x01
    *(state+15) = *(state+11);
     838:	8a 81       	ldd	r24, Y+2	; 0x02
     83a:	9b 81       	ldd	r25, Y+3	; 0x03
     83c:	0f 96       	adiw	r24, 0x0f	; 15
     83e:	2a 81       	ldd	r18, Y+2	; 0x02
     840:	3b 81       	ldd	r19, Y+3	; 0x03
     842:	f9 01       	movw	r30, r18
     844:	23 85       	ldd	r18, Z+11	; 0x0b
     846:	fc 01       	movw	r30, r24
     848:	20 83       	st	Z, r18
    *(state+11) = *(state+7);
     84a:	8a 81       	ldd	r24, Y+2	; 0x02
     84c:	9b 81       	ldd	r25, Y+3	; 0x03
     84e:	0b 96       	adiw	r24, 0x0b	; 11
     850:	2a 81       	ldd	r18, Y+2	; 0x02
     852:	3b 81       	ldd	r19, Y+3	; 0x03
     854:	f9 01       	movw	r30, r18
     856:	27 81       	ldd	r18, Z+7	; 0x07
     858:	fc 01       	movw	r30, r24
     85a:	20 83       	st	Z, r18
    *(state+7)  = *(state+3);
     85c:	8a 81       	ldd	r24, Y+2	; 0x02
     85e:	9b 81       	ldd	r25, Y+3	; 0x03
     860:	07 96       	adiw	r24, 0x07	; 7
     862:	2a 81       	ldd	r18, Y+2	; 0x02
     864:	3b 81       	ldd	r19, Y+3	; 0x03
     866:	f9 01       	movw	r30, r18
     868:	23 81       	ldd	r18, Z+3	; 0x03
     86a:	fc 01       	movw	r30, r24
     86c:	20 83       	st	Z, r18
    *(state+3)  = temp;
     86e:	8a 81       	ldd	r24, Y+2	; 0x02
     870:	9b 81       	ldd	r25, Y+3	; 0x03
     872:	03 96       	adiw	r24, 0x03	; 3
     874:	29 81       	ldd	r18, Y+1	; 0x01
     876:	fc 01       	movw	r30, r24
     878:	20 83       	st	Z, r18
}
     87a:	00 00       	nop
     87c:	0f 90       	pop	r0
     87e:	0f 90       	pop	r0
     880:	0f 90       	pop	r0
     882:	df 91       	pop	r29
     884:	cf 91       	pop	r28
     886:	08 95       	ret

00000888 <aes_encrypt_128>:

void aes_encrypt_128(uint8_t *roundkeys,  uint8_t *plaintext, uint8_t *ciphertext) {
     888:	0f 93       	push	r16
     88a:	1f 93       	push	r17
     88c:	cf 93       	push	r28
     88e:	df 93       	push	r29
     890:	cd b7       	in	r28, 0x3d	; 61
     892:	de b7       	in	r29, 0x3e	; 62
     894:	69 97       	sbiw	r28, 0x19	; 25
     896:	0f b6       	in	r0, 0x3f	; 63
     898:	f8 94       	cli
     89a:	de bf       	out	0x3e, r29	; 62
     89c:	0f be       	out	0x3f, r0	; 63
     89e:	cd bf       	out	0x3d, r28	; 61
     8a0:	9d 8b       	std	Y+21, r25	; 0x15
     8a2:	8c 8b       	std	Y+20, r24	; 0x14
     8a4:	7f 8b       	std	Y+23, r23	; 0x17
     8a6:	6e 8b       	std	Y+22, r22	; 0x16
     8a8:	59 8f       	std	Y+25, r21	; 0x19
     8aa:	48 8f       	std	Y+24, r20	; 0x18

    uint8_t tmp[16], t;
    uint8_t i, j;

    // first AddRoundKey
    for (i=0; i< AES_BLOCK_SIZE; ++i ) {
     8ac:	19 82       	std	Y+1, r1	; 0x01
     8ae:	1f c0       	rjmp	.+62     	; 0x8ee <aes_encrypt_128+0x66>
        *(ciphertext+i) = *(plaintext+i) ^ *roundkeys++;
     8b0:	89 81       	ldd	r24, Y+1	; 0x01
     8b2:	88 2f       	mov	r24, r24
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	28 8d       	ldd	r18, Y+24	; 0x18
     8b8:	39 8d       	ldd	r19, Y+25	; 0x19
     8ba:	28 0f       	add	r18, r24
     8bc:	39 1f       	adc	r19, r25
     8be:	89 81       	ldd	r24, Y+1	; 0x01
     8c0:	88 2f       	mov	r24, r24
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	4e 89       	ldd	r20, Y+22	; 0x16
     8c6:	5f 89       	ldd	r21, Y+23	; 0x17
     8c8:	84 0f       	add	r24, r20
     8ca:	95 1f       	adc	r25, r21
     8cc:	fc 01       	movw	r30, r24
     8ce:	60 81       	ld	r22, Z
     8d0:	8c 89       	ldd	r24, Y+20	; 0x14
     8d2:	9d 89       	ldd	r25, Y+21	; 0x15
     8d4:	ac 01       	movw	r20, r24
     8d6:	4f 5f       	subi	r20, 0xFF	; 255
     8d8:	5f 4f       	sbci	r21, 0xFF	; 255
     8da:	5d 8b       	std	Y+21, r21	; 0x15
     8dc:	4c 8b       	std	Y+20, r20	; 0x14
     8de:	fc 01       	movw	r30, r24
     8e0:	80 81       	ld	r24, Z
     8e2:	86 27       	eor	r24, r22
     8e4:	f9 01       	movw	r30, r18
     8e6:	80 83       	st	Z, r24

    uint8_t tmp[16], t;
    uint8_t i, j;

    // first AddRoundKey
    for (i=0; i< AES_BLOCK_SIZE; ++i ) {
     8e8:	89 81       	ldd	r24, Y+1	; 0x01
     8ea:	8f 5f       	subi	r24, 0xFF	; 255
     8ec:	89 83       	std	Y+1, r24	; 0x01
     8ee:	89 81       	ldd	r24, Y+1	; 0x01
     8f0:	80 31       	cpi	r24, 0x10	; 16
     8f2:	f0 f2       	brcs	.-68     	; 0x8b0 <aes_encrypt_128+0x28>
        *(ciphertext+i) = *(plaintext+i) ^ *roundkeys++;
    }
	

    // 9 rounds
    for (j= AES_ROUNDS-1;j!=0; --j) {
     8f4:	89 e0       	ldi	r24, 0x09	; 9
     8f6:	8a 83       	std	Y+2, r24	; 0x02
     8f8:	5c c1       	rjmp	.+696    	; 0xbb2 <__stack+0x2b3>

        // SubBytes
        for ( i = AES_BLOCK_SIZE-1;i != 0;) {
     8fa:	8f e0       	ldi	r24, 0x0F	; 15
     8fc:	89 83       	std	Y+1, r24	; 0x01
     8fe:	1c c0       	rjmp	.+56     	; 0x938 <__stack+0x39>
            *(tmp+i) = SBOX[ciphertext[i--]];
     900:	89 81       	ldd	r24, Y+1	; 0x01
     902:	88 2f       	mov	r24, r24
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	9e 01       	movw	r18, r28
     908:	2c 5f       	subi	r18, 0xFC	; 252
     90a:	3f 4f       	sbci	r19, 0xFF	; 255
     90c:	82 0f       	add	r24, r18
     90e:	93 1f       	adc	r25, r19
     910:	29 81       	ldd	r18, Y+1	; 0x01
     912:	3f ef       	ldi	r19, 0xFF	; 255
     914:	32 0f       	add	r19, r18
     916:	39 83       	std	Y+1, r19	; 0x01
     918:	22 2f       	mov	r18, r18
     91a:	30 e0       	ldi	r19, 0x00	; 0
     91c:	48 8d       	ldd	r20, Y+24	; 0x18
     91e:	59 8d       	ldd	r21, Y+25	; 0x19
     920:	24 0f       	add	r18, r20
     922:	35 1f       	adc	r19, r21
     924:	f9 01       	movw	r30, r18
     926:	20 81       	ld	r18, Z
     928:	22 2f       	mov	r18, r18
     92a:	30 e0       	ldi	r19, 0x00	; 0
     92c:	20 50       	subi	r18, 0x00	; 0
     92e:	3e 4f       	sbci	r19, 0xFE	; 254
     930:	f9 01       	movw	r30, r18
     932:	20 81       	ld	r18, Z
     934:	fc 01       	movw	r30, r24
     936:	20 83       	st	Z, r18

    // 9 rounds
    for (j= AES_ROUNDS-1;j!=0; --j) {

        // SubBytes
        for ( i = AES_BLOCK_SIZE-1;i != 0;) {
     938:	89 81       	ldd	r24, Y+1	; 0x01
     93a:	88 23       	and	r24, r24
     93c:	09 f7       	brne	.-62     	; 0x900 <__stack+0x1>
            *(tmp+i) = SBOX[ciphertext[i--]];
        }
		 *(tmp+0) = SBOX[ciphertext[0]];
     93e:	88 8d       	ldd	r24, Y+24	; 0x18
     940:	99 8d       	ldd	r25, Y+25	; 0x19
     942:	fc 01       	movw	r30, r24
     944:	80 81       	ld	r24, Z
     946:	88 2f       	mov	r24, r24
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	80 50       	subi	r24, 0x00	; 0
     94c:	9e 4f       	sbci	r25, 0xFE	; 254
     94e:	fc 01       	movw	r30, r24
     950:	80 81       	ld	r24, Z
     952:	8c 83       	std	Y+4, r24	; 0x04
        shift_rows(tmp);
     954:	ce 01       	movw	r24, r28
     956:	04 96       	adiw	r24, 0x04	; 4
     958:	0e 94 c1 03 	call	0x782	; 0x782 <shift_rows>
         * [02 03 01 01]   [s0  s4  s8  s12]
         * [01 02 03 01] . [s1  s5  s9  s13]
         * [01 01 02 03]   [s2  s6  s10 s14]
         * [03 01 01 02]   [s3  s7  s11 s15]
         */
        for (i = 0; i < AES_BLOCK_SIZE; i+=4)  {
     95c:	19 82       	std	Y+1, r1	; 0x01
     95e:	fe c0       	rjmp	.+508    	; 0xb5c <__stack+0x25d>
            t = tmp[i] ^ tmp[i+1] ^ tmp[i+2] ^ tmp[i+3];
     960:	89 81       	ldd	r24, Y+1	; 0x01
     962:	88 2f       	mov	r24, r24
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	9e 01       	movw	r18, r28
     968:	2c 5f       	subi	r18, 0xFC	; 252
     96a:	3f 4f       	sbci	r19, 0xFF	; 255
     96c:	82 0f       	add	r24, r18
     96e:	93 1f       	adc	r25, r19
     970:	fc 01       	movw	r30, r24
     972:	40 81       	ld	r20, Z
     974:	89 81       	ldd	r24, Y+1	; 0x01
     976:	88 2f       	mov	r24, r24
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	01 96       	adiw	r24, 0x01	; 1
     97c:	9e 01       	movw	r18, r28
     97e:	2c 5f       	subi	r18, 0xFC	; 252
     980:	3f 4f       	sbci	r19, 0xFF	; 255
     982:	82 0f       	add	r24, r18
     984:	93 1f       	adc	r25, r19
     986:	fc 01       	movw	r30, r24
     988:	80 81       	ld	r24, Z
     98a:	48 27       	eor	r20, r24
     98c:	89 81       	ldd	r24, Y+1	; 0x01
     98e:	88 2f       	mov	r24, r24
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	02 96       	adiw	r24, 0x02	; 2
     994:	9e 01       	movw	r18, r28
     996:	2c 5f       	subi	r18, 0xFC	; 252
     998:	3f 4f       	sbci	r19, 0xFF	; 255
     99a:	82 0f       	add	r24, r18
     99c:	93 1f       	adc	r25, r19
     99e:	fc 01       	movw	r30, r24
     9a0:	80 81       	ld	r24, Z
     9a2:	48 27       	eor	r20, r24
     9a4:	89 81       	ldd	r24, Y+1	; 0x01
     9a6:	88 2f       	mov	r24, r24
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	03 96       	adiw	r24, 0x03	; 3
     9ac:	9e 01       	movw	r18, r28
     9ae:	2c 5f       	subi	r18, 0xFC	; 252
     9b0:	3f 4f       	sbci	r19, 0xFF	; 255
     9b2:	82 0f       	add	r24, r18
     9b4:	93 1f       	adc	r25, r19
     9b6:	fc 01       	movw	r30, r24
     9b8:	80 81       	ld	r24, Z
     9ba:	84 27       	eor	r24, r20
     9bc:	8b 83       	std	Y+3, r24	; 0x03
            ciphertext[i]   = mul2(tmp[i]   ^ tmp[i+1]) ^ tmp[i]   ^ t;
     9be:	89 81       	ldd	r24, Y+1	; 0x01
     9c0:	88 2f       	mov	r24, r24
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	28 8d       	ldd	r18, Y+24	; 0x18
     9c6:	39 8d       	ldd	r19, Y+25	; 0x19
     9c8:	89 01       	movw	r16, r18
     9ca:	08 0f       	add	r16, r24
     9cc:	19 1f       	adc	r17, r25
     9ce:	89 81       	ldd	r24, Y+1	; 0x01
     9d0:	88 2f       	mov	r24, r24
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	9e 01       	movw	r18, r28
     9d6:	2c 5f       	subi	r18, 0xFC	; 252
     9d8:	3f 4f       	sbci	r19, 0xFF	; 255
     9da:	82 0f       	add	r24, r18
     9dc:	93 1f       	adc	r25, r19
     9de:	fc 01       	movw	r30, r24
     9e0:	40 81       	ld	r20, Z
     9e2:	89 81       	ldd	r24, Y+1	; 0x01
     9e4:	88 2f       	mov	r24, r24
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	01 96       	adiw	r24, 0x01	; 1
     9ea:	9e 01       	movw	r18, r28
     9ec:	2c 5f       	subi	r18, 0xFC	; 252
     9ee:	3f 4f       	sbci	r19, 0xFF	; 255
     9f0:	82 0f       	add	r24, r18
     9f2:	93 1f       	adc	r25, r19
     9f4:	fc 01       	movw	r30, r24
     9f6:	80 81       	ld	r24, Z
     9f8:	84 27       	eor	r24, r20
     9fa:	0e 94 a9 03 	call	0x752	; 0x752 <mul2>
     9fe:	48 2f       	mov	r20, r24
     a00:	89 81       	ldd	r24, Y+1	; 0x01
     a02:	88 2f       	mov	r24, r24
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	9e 01       	movw	r18, r28
     a08:	2c 5f       	subi	r18, 0xFC	; 252
     a0a:	3f 4f       	sbci	r19, 0xFF	; 255
     a0c:	82 0f       	add	r24, r18
     a0e:	93 1f       	adc	r25, r19
     a10:	fc 01       	movw	r30, r24
     a12:	80 81       	ld	r24, Z
     a14:	94 2f       	mov	r25, r20
     a16:	98 27       	eor	r25, r24
     a18:	8b 81       	ldd	r24, Y+3	; 0x03
     a1a:	89 27       	eor	r24, r25
     a1c:	f8 01       	movw	r30, r16
     a1e:	80 83       	st	Z, r24
            ciphertext[i+1] = mul2(tmp[i+1] ^ tmp[i+2]) ^ tmp[i+1] ^ t;
     a20:	89 81       	ldd	r24, Y+1	; 0x01
     a22:	88 2f       	mov	r24, r24
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	28 8d       	ldd	r18, Y+24	; 0x18
     a2a:	39 8d       	ldd	r19, Y+25	; 0x19
     a2c:	89 01       	movw	r16, r18
     a2e:	08 0f       	add	r16, r24
     a30:	19 1f       	adc	r17, r25
     a32:	89 81       	ldd	r24, Y+1	; 0x01
     a34:	88 2f       	mov	r24, r24
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	01 96       	adiw	r24, 0x01	; 1
     a3a:	9e 01       	movw	r18, r28
     a3c:	2c 5f       	subi	r18, 0xFC	; 252
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	82 0f       	add	r24, r18
     a42:	93 1f       	adc	r25, r19
     a44:	fc 01       	movw	r30, r24
     a46:	40 81       	ld	r20, Z
     a48:	89 81       	ldd	r24, Y+1	; 0x01
     a4a:	88 2f       	mov	r24, r24
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	02 96       	adiw	r24, 0x02	; 2
     a50:	9e 01       	movw	r18, r28
     a52:	2c 5f       	subi	r18, 0xFC	; 252
     a54:	3f 4f       	sbci	r19, 0xFF	; 255
     a56:	82 0f       	add	r24, r18
     a58:	93 1f       	adc	r25, r19
     a5a:	fc 01       	movw	r30, r24
     a5c:	80 81       	ld	r24, Z
     a5e:	84 27       	eor	r24, r20
     a60:	0e 94 a9 03 	call	0x752	; 0x752 <mul2>
     a64:	48 2f       	mov	r20, r24
     a66:	89 81       	ldd	r24, Y+1	; 0x01
     a68:	88 2f       	mov	r24, r24
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	01 96       	adiw	r24, 0x01	; 1
     a6e:	9e 01       	movw	r18, r28
     a70:	2c 5f       	subi	r18, 0xFC	; 252
     a72:	3f 4f       	sbci	r19, 0xFF	; 255
     a74:	82 0f       	add	r24, r18
     a76:	93 1f       	adc	r25, r19
     a78:	fc 01       	movw	r30, r24
     a7a:	80 81       	ld	r24, Z
     a7c:	94 2f       	mov	r25, r20
     a7e:	98 27       	eor	r25, r24
     a80:	8b 81       	ldd	r24, Y+3	; 0x03
     a82:	89 27       	eor	r24, r25
     a84:	f8 01       	movw	r30, r16
     a86:	80 83       	st	Z, r24
            ciphertext[i+2] = mul2(tmp[i+2] ^ tmp[i+3]) ^ tmp[i+2] ^ t;
     a88:	89 81       	ldd	r24, Y+1	; 0x01
     a8a:	88 2f       	mov	r24, r24
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	02 96       	adiw	r24, 0x02	; 2
     a90:	28 8d       	ldd	r18, Y+24	; 0x18
     a92:	39 8d       	ldd	r19, Y+25	; 0x19
     a94:	89 01       	movw	r16, r18
     a96:	08 0f       	add	r16, r24
     a98:	19 1f       	adc	r17, r25
     a9a:	89 81       	ldd	r24, Y+1	; 0x01
     a9c:	88 2f       	mov	r24, r24
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	02 96       	adiw	r24, 0x02	; 2
     aa2:	9e 01       	movw	r18, r28
     aa4:	2c 5f       	subi	r18, 0xFC	; 252
     aa6:	3f 4f       	sbci	r19, 0xFF	; 255
     aa8:	82 0f       	add	r24, r18
     aaa:	93 1f       	adc	r25, r19
     aac:	fc 01       	movw	r30, r24
     aae:	40 81       	ld	r20, Z
     ab0:	89 81       	ldd	r24, Y+1	; 0x01
     ab2:	88 2f       	mov	r24, r24
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	03 96       	adiw	r24, 0x03	; 3
     ab8:	9e 01       	movw	r18, r28
     aba:	2c 5f       	subi	r18, 0xFC	; 252
     abc:	3f 4f       	sbci	r19, 0xFF	; 255
     abe:	82 0f       	add	r24, r18
     ac0:	93 1f       	adc	r25, r19
     ac2:	fc 01       	movw	r30, r24
     ac4:	80 81       	ld	r24, Z
     ac6:	84 27       	eor	r24, r20
     ac8:	0e 94 a9 03 	call	0x752	; 0x752 <mul2>
     acc:	48 2f       	mov	r20, r24
     ace:	89 81       	ldd	r24, Y+1	; 0x01
     ad0:	88 2f       	mov	r24, r24
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	02 96       	adiw	r24, 0x02	; 2
     ad6:	9e 01       	movw	r18, r28
     ad8:	2c 5f       	subi	r18, 0xFC	; 252
     ada:	3f 4f       	sbci	r19, 0xFF	; 255
     adc:	82 0f       	add	r24, r18
     ade:	93 1f       	adc	r25, r19
     ae0:	fc 01       	movw	r30, r24
     ae2:	80 81       	ld	r24, Z
     ae4:	94 2f       	mov	r25, r20
     ae6:	98 27       	eor	r25, r24
     ae8:	8b 81       	ldd	r24, Y+3	; 0x03
     aea:	89 27       	eor	r24, r25
     aec:	f8 01       	movw	r30, r16
     aee:	80 83       	st	Z, r24
            ciphertext[i+3] = mul2(tmp[i+3] ^ tmp[i]  ) ^ tmp[i+3] ^ t;
     af0:	89 81       	ldd	r24, Y+1	; 0x01
     af2:	88 2f       	mov	r24, r24
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	03 96       	adiw	r24, 0x03	; 3
     af8:	28 8d       	ldd	r18, Y+24	; 0x18
     afa:	39 8d       	ldd	r19, Y+25	; 0x19
     afc:	89 01       	movw	r16, r18
     afe:	08 0f       	add	r16, r24
     b00:	19 1f       	adc	r17, r25
     b02:	89 81       	ldd	r24, Y+1	; 0x01
     b04:	88 2f       	mov	r24, r24
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	03 96       	adiw	r24, 0x03	; 3
     b0a:	9e 01       	movw	r18, r28
     b0c:	2c 5f       	subi	r18, 0xFC	; 252
     b0e:	3f 4f       	sbci	r19, 0xFF	; 255
     b10:	82 0f       	add	r24, r18
     b12:	93 1f       	adc	r25, r19
     b14:	fc 01       	movw	r30, r24
     b16:	40 81       	ld	r20, Z
     b18:	89 81       	ldd	r24, Y+1	; 0x01
     b1a:	88 2f       	mov	r24, r24
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	9e 01       	movw	r18, r28
     b20:	2c 5f       	subi	r18, 0xFC	; 252
     b22:	3f 4f       	sbci	r19, 0xFF	; 255
     b24:	82 0f       	add	r24, r18
     b26:	93 1f       	adc	r25, r19
     b28:	fc 01       	movw	r30, r24
     b2a:	80 81       	ld	r24, Z
     b2c:	84 27       	eor	r24, r20
     b2e:	0e 94 a9 03 	call	0x752	; 0x752 <mul2>
     b32:	48 2f       	mov	r20, r24
     b34:	89 81       	ldd	r24, Y+1	; 0x01
     b36:	88 2f       	mov	r24, r24
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	03 96       	adiw	r24, 0x03	; 3
     b3c:	9e 01       	movw	r18, r28
     b3e:	2c 5f       	subi	r18, 0xFC	; 252
     b40:	3f 4f       	sbci	r19, 0xFF	; 255
     b42:	82 0f       	add	r24, r18
     b44:	93 1f       	adc	r25, r19
     b46:	fc 01       	movw	r30, r24
     b48:	80 81       	ld	r24, Z
     b4a:	94 2f       	mov	r25, r20
     b4c:	98 27       	eor	r25, r24
     b4e:	8b 81       	ldd	r24, Y+3	; 0x03
     b50:	89 27       	eor	r24, r25
     b52:	f8 01       	movw	r30, r16
     b54:	80 83       	st	Z, r24
         * [02 03 01 01]   [s0  s4  s8  s12]
         * [01 02 03 01] . [s1  s5  s9  s13]
         * [01 01 02 03]   [s2  s6  s10 s14]
         * [03 01 01 02]   [s3  s7  s11 s15]
         */
        for (i = 0; i < AES_BLOCK_SIZE; i+=4)  {
     b56:	89 81       	ldd	r24, Y+1	; 0x01
     b58:	8c 5f       	subi	r24, 0xFC	; 252
     b5a:	89 83       	std	Y+1, r24	; 0x01
     b5c:	89 81       	ldd	r24, Y+1	; 0x01
     b5e:	80 31       	cpi	r24, 0x10	; 16
     b60:	08 f4       	brcc	.+2      	; 0xb64 <__stack+0x265>
     b62:	fe ce       	rjmp	.-516    	; 0x960 <__stack+0x61>
            ciphertext[i+2] = mul2(tmp[i+2] ^ tmp[i+3]) ^ tmp[i+2] ^ t;
            ciphertext[i+3] = mul2(tmp[i+3] ^ tmp[i]  ) ^ tmp[i+3] ^ t;
        }

        // AddRoundKey
        for (i=0;i< AES_BLOCK_SIZE; ++i ) {
     b64:	19 82       	std	Y+1, r1	; 0x01
     b66:	1f c0       	rjmp	.+62     	; 0xba6 <__stack+0x2a7>
            *(ciphertext+i) ^= *roundkeys++;
     b68:	8c 89       	ldd	r24, Y+20	; 0x14
     b6a:	9d 89       	ldd	r25, Y+21	; 0x15
     b6c:	9c 01       	movw	r18, r24
     b6e:	2f 5f       	subi	r18, 0xFF	; 255
     b70:	3f 4f       	sbci	r19, 0xFF	; 255
     b72:	3d 8b       	std	Y+21, r19	; 0x15
     b74:	2c 8b       	std	Y+20, r18	; 0x14
     b76:	fc 01       	movw	r30, r24
     b78:	60 81       	ld	r22, Z
     b7a:	89 81       	ldd	r24, Y+1	; 0x01
     b7c:	88 2f       	mov	r24, r24
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	28 8d       	ldd	r18, Y+24	; 0x18
     b82:	39 8d       	ldd	r19, Y+25	; 0x19
     b84:	82 0f       	add	r24, r18
     b86:	93 1f       	adc	r25, r19
     b88:	29 81       	ldd	r18, Y+1	; 0x01
     b8a:	22 2f       	mov	r18, r18
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	48 8d       	ldd	r20, Y+24	; 0x18
     b90:	59 8d       	ldd	r21, Y+25	; 0x19
     b92:	24 0f       	add	r18, r20
     b94:	35 1f       	adc	r19, r21
     b96:	f9 01       	movw	r30, r18
     b98:	20 81       	ld	r18, Z
     b9a:	26 27       	eor	r18, r22
     b9c:	fc 01       	movw	r30, r24
     b9e:	20 83       	st	Z, r18
            ciphertext[i+2] = mul2(tmp[i+2] ^ tmp[i+3]) ^ tmp[i+2] ^ t;
            ciphertext[i+3] = mul2(tmp[i+3] ^ tmp[i]  ) ^ tmp[i+3] ^ t;
        }

        // AddRoundKey
        for (i=0;i< AES_BLOCK_SIZE; ++i ) {
     ba0:	89 81       	ldd	r24, Y+1	; 0x01
     ba2:	8f 5f       	subi	r24, 0xFF	; 255
     ba4:	89 83       	std	Y+1, r24	; 0x01
     ba6:	89 81       	ldd	r24, Y+1	; 0x01
     ba8:	80 31       	cpi	r24, 0x10	; 16
     baa:	f0 f2       	brcs	.-68     	; 0xb68 <__stack+0x269>
        *(ciphertext+i) = *(plaintext+i) ^ *roundkeys++;
    }
	

    // 9 rounds
    for (j= AES_ROUNDS-1;j!=0; --j) {
     bac:	8a 81       	ldd	r24, Y+2	; 0x02
     bae:	81 50       	subi	r24, 0x01	; 1
     bb0:	8a 83       	std	Y+2, r24	; 0x02
     bb2:	8a 81       	ldd	r24, Y+2	; 0x02
     bb4:	88 23       	and	r24, r24
     bb6:	09 f0       	breq	.+2      	; 0xbba <__stack+0x2bb>
     bb8:	a0 ce       	rjmp	.-704    	; 0x8fa <aes_encrypt_128+0x72>
		 

    }
    
    // last round
    for ( i = AES_BLOCK_SIZE-1;i !=0;) {
     bba:	8f e0       	ldi	r24, 0x0F	; 15
     bbc:	89 83       	std	Y+1, r24	; 0x01
     bbe:	1b c0       	rjmp	.+54     	; 0xbf6 <__stack+0x2f7>
        *(ciphertext+i) = SBOX[ciphertext[i--]];
     bc0:	89 81       	ldd	r24, Y+1	; 0x01
     bc2:	88 2f       	mov	r24, r24
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	28 8d       	ldd	r18, Y+24	; 0x18
     bc8:	39 8d       	ldd	r19, Y+25	; 0x19
     bca:	82 0f       	add	r24, r18
     bcc:	93 1f       	adc	r25, r19
     bce:	29 81       	ldd	r18, Y+1	; 0x01
     bd0:	3f ef       	ldi	r19, 0xFF	; 255
     bd2:	32 0f       	add	r19, r18
     bd4:	39 83       	std	Y+1, r19	; 0x01
     bd6:	22 2f       	mov	r18, r18
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	48 8d       	ldd	r20, Y+24	; 0x18
     bdc:	59 8d       	ldd	r21, Y+25	; 0x19
     bde:	24 0f       	add	r18, r20
     be0:	35 1f       	adc	r19, r21
     be2:	f9 01       	movw	r30, r18
     be4:	20 81       	ld	r18, Z
     be6:	22 2f       	mov	r18, r18
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	20 50       	subi	r18, 0x00	; 0
     bec:	3e 4f       	sbci	r19, 0xFE	; 254
     bee:	f9 01       	movw	r30, r18
     bf0:	20 81       	ld	r18, Z
     bf2:	fc 01       	movw	r30, r24
     bf4:	20 83       	st	Z, r18
		 

    }
    
    // last round
    for ( i = AES_BLOCK_SIZE-1;i !=0;) {
     bf6:	89 81       	ldd	r24, Y+1	; 0x01
     bf8:	88 23       	and	r24, r24
     bfa:	11 f7       	brne	.-60     	; 0xbc0 <__stack+0x2c1>
        *(ciphertext+i) = SBOX[ciphertext[i--]];
    }
	 *(ciphertext+0) = SBOX[ciphertext[0]];
     bfc:	88 8d       	ldd	r24, Y+24	; 0x18
     bfe:	99 8d       	ldd	r25, Y+25	; 0x19
     c00:	fc 01       	movw	r30, r24
     c02:	80 81       	ld	r24, Z
     c04:	88 2f       	mov	r24, r24
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	80 50       	subi	r24, 0x00	; 0
     c0a:	9e 4f       	sbci	r25, 0xFE	; 254
     c0c:	fc 01       	movw	r30, r24
     c0e:	20 81       	ld	r18, Z
     c10:	88 8d       	ldd	r24, Y+24	; 0x18
     c12:	99 8d       	ldd	r25, Y+25	; 0x19
     c14:	fc 01       	movw	r30, r24
     c16:	20 83       	st	Z, r18
    shift_rows(ciphertext);
     c18:	88 8d       	ldd	r24, Y+24	; 0x18
     c1a:	99 8d       	ldd	r25, Y+25	; 0x19
     c1c:	0e 94 c1 03 	call	0x782	; 0x782 <shift_rows>
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     c20:	19 82       	std	Y+1, r1	; 0x01
     c22:	1f c0       	rjmp	.+62     	; 0xc62 <__stack+0x363>
        *(ciphertext+i) ^= *roundkeys++;
     c24:	8c 89       	ldd	r24, Y+20	; 0x14
     c26:	9d 89       	ldd	r25, Y+21	; 0x15
     c28:	9c 01       	movw	r18, r24
     c2a:	2f 5f       	subi	r18, 0xFF	; 255
     c2c:	3f 4f       	sbci	r19, 0xFF	; 255
     c2e:	3d 8b       	std	Y+21, r19	; 0x15
     c30:	2c 8b       	std	Y+20, r18	; 0x14
     c32:	fc 01       	movw	r30, r24
     c34:	60 81       	ld	r22, Z
     c36:	89 81       	ldd	r24, Y+1	; 0x01
     c38:	88 2f       	mov	r24, r24
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	28 8d       	ldd	r18, Y+24	; 0x18
     c3e:	39 8d       	ldd	r19, Y+25	; 0x19
     c40:	82 0f       	add	r24, r18
     c42:	93 1f       	adc	r25, r19
     c44:	29 81       	ldd	r18, Y+1	; 0x01
     c46:	22 2f       	mov	r18, r18
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	48 8d       	ldd	r20, Y+24	; 0x18
     c4c:	59 8d       	ldd	r21, Y+25	; 0x19
     c4e:	24 0f       	add	r18, r20
     c50:	35 1f       	adc	r19, r21
     c52:	f9 01       	movw	r30, r18
     c54:	20 81       	ld	r18, Z
     c56:	26 27       	eor	r18, r22
     c58:	fc 01       	movw	r30, r24
     c5a:	20 83       	st	Z, r18
    for ( i = AES_BLOCK_SIZE-1;i !=0;) {
        *(ciphertext+i) = SBOX[ciphertext[i--]];
    }
	 *(ciphertext+0) = SBOX[ciphertext[0]];
    shift_rows(ciphertext);
    for ( i = 0; i < AES_BLOCK_SIZE; ++i ) {
     c5c:	89 81       	ldd	r24, Y+1	; 0x01
     c5e:	8f 5f       	subi	r24, 0xFF	; 255
     c60:	89 83       	std	Y+1, r24	; 0x01
     c62:	89 81       	ldd	r24, Y+1	; 0x01
     c64:	80 31       	cpi	r24, 0x10	; 16
     c66:	f0 f2       	brcs	.-68     	; 0xc24 <__stack+0x325>
        *(ciphertext+i) ^= *roundkeys++;
    }

}
     c68:	00 00       	nop
     c6a:	69 96       	adiw	r28, 0x19	; 25
     c6c:	0f b6       	in	r0, 0x3f	; 63
     c6e:	f8 94       	cli
     c70:	de bf       	out	0x3e, r29	; 62
     c72:	0f be       	out	0x3f, r0	; 63
     c74:	cd bf       	out	0x3d, r28	; 61
     c76:	df 91       	pop	r29
     c78:	cf 91       	pop	r28
     c7a:	1f 91       	pop	r17
     c7c:	0f 91       	pop	r16
     c7e:	08 95       	ret

00000c80 <aes_key_schedule_128>:
#include "aes_encrypt.h"
/*
 * round constants
 */
static uint8_t RC[] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36};
void aes_key_schedule_128( uint8_t *key, uint8_t *roundkeys) {
     c80:	cf 93       	push	r28
     c82:	df 93       	push	r29
     c84:	cd b7       	in	r28, 0x3d	; 61
     c86:	de b7       	in	r29, 0x3e	; 62
     c88:	2d 97       	sbiw	r28, 0x0d	; 13
     c8a:	0f b6       	in	r0, 0x3f	; 63
     c8c:	f8 94       	cli
     c8e:	de bf       	out	0x3e, r29	; 62
     c90:	0f be       	out	0x3f, r0	; 63
     c92:	cd bf       	out	0x3d, r28	; 61
     c94:	9b 87       	std	Y+11, r25	; 0x0b
     c96:	8a 87       	std	Y+10, r24	; 0x0a
     c98:	7d 87       	std	Y+13, r23	; 0x0d
     c9a:	6c 87       	std	Y+12, r22	; 0x0c
    uint8_t temp[4];
    uint8_t *last4bytes; // point to the last 4 bytes of one round
    uint8_t *lastround;
    uint8_t i;

    for (i = 0; i < 16; ++i) {
     c9c:	1b 82       	std	Y+3, r1	; 0x03
     c9e:	15 c0       	rjmp	.+42     	; 0xcca <aes_key_schedule_128+0x4a>
        *roundkeys++ = *key++;
     ca0:	8c 85       	ldd	r24, Y+12	; 0x0c
     ca2:	9d 85       	ldd	r25, Y+13	; 0x0d
     ca4:	9c 01       	movw	r18, r24
     ca6:	2f 5f       	subi	r18, 0xFF	; 255
     ca8:	3f 4f       	sbci	r19, 0xFF	; 255
     caa:	3d 87       	std	Y+13, r19	; 0x0d
     cac:	2c 87       	std	Y+12, r18	; 0x0c
     cae:	2a 85       	ldd	r18, Y+10	; 0x0a
     cb0:	3b 85       	ldd	r19, Y+11	; 0x0b
     cb2:	a9 01       	movw	r20, r18
     cb4:	4f 5f       	subi	r20, 0xFF	; 255
     cb6:	5f 4f       	sbci	r21, 0xFF	; 255
     cb8:	5b 87       	std	Y+11, r21	; 0x0b
     cba:	4a 87       	std	Y+10, r20	; 0x0a
     cbc:	f9 01       	movw	r30, r18
     cbe:	20 81       	ld	r18, Z
     cc0:	fc 01       	movw	r30, r24
     cc2:	20 83       	st	Z, r18
    uint8_t temp[4];
    uint8_t *last4bytes; // point to the last 4 bytes of one round
    uint8_t *lastround;
    uint8_t i;

    for (i = 0; i < 16; ++i) {
     cc4:	8b 81       	ldd	r24, Y+3	; 0x03
     cc6:	8f 5f       	subi	r24, 0xFF	; 255
     cc8:	8b 83       	std	Y+3, r24	; 0x03
     cca:	8b 81       	ldd	r24, Y+3	; 0x03
     ccc:	80 31       	cpi	r24, 0x10	; 16
     cce:	40 f3       	brcs	.-48     	; 0xca0 <aes_key_schedule_128+0x20>
        *roundkeys++ = *key++;
    }

    last4bytes = roundkeys-4;
     cd0:	8c 85       	ldd	r24, Y+12	; 0x0c
     cd2:	9d 85       	ldd	r25, Y+13	; 0x0d
     cd4:	04 97       	sbiw	r24, 0x04	; 4
     cd6:	9a 83       	std	Y+2, r25	; 0x02
     cd8:	89 83       	std	Y+1, r24	; 0x01
    for (i = 0; i < AES_ROUNDS; ++i) {
     cda:	1b 82       	std	Y+3, r1	; 0x03
     cdc:	f2 c1       	rjmp	.+996    	; 0x10c2 <aes_key_schedule_128+0x442>
        // k0-k3 for next round
        temp[3] = SBOX[*last4bytes++];
     cde:	89 81       	ldd	r24, Y+1	; 0x01
     ce0:	9a 81       	ldd	r25, Y+2	; 0x02
     ce2:	9c 01       	movw	r18, r24
     ce4:	2f 5f       	subi	r18, 0xFF	; 255
     ce6:	3f 4f       	sbci	r19, 0xFF	; 255
     ce8:	3a 83       	std	Y+2, r19	; 0x02
     cea:	29 83       	std	Y+1, r18	; 0x01
     cec:	fc 01       	movw	r30, r24
     cee:	80 81       	ld	r24, Z
     cf0:	88 2f       	mov	r24, r24
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	80 50       	subi	r24, 0x00	; 0
     cf6:	9e 4f       	sbci	r25, 0xFE	; 254
     cf8:	fc 01       	movw	r30, r24
     cfa:	80 81       	ld	r24, Z
     cfc:	89 87       	std	Y+9, r24	; 0x09
        temp[0] = SBOX[*last4bytes++];
     cfe:	89 81       	ldd	r24, Y+1	; 0x01
     d00:	9a 81       	ldd	r25, Y+2	; 0x02
     d02:	9c 01       	movw	r18, r24
     d04:	2f 5f       	subi	r18, 0xFF	; 255
     d06:	3f 4f       	sbci	r19, 0xFF	; 255
     d08:	3a 83       	std	Y+2, r19	; 0x02
     d0a:	29 83       	std	Y+1, r18	; 0x01
     d0c:	fc 01       	movw	r30, r24
     d0e:	80 81       	ld	r24, Z
     d10:	88 2f       	mov	r24, r24
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	80 50       	subi	r24, 0x00	; 0
     d16:	9e 4f       	sbci	r25, 0xFE	; 254
     d18:	fc 01       	movw	r30, r24
     d1a:	80 81       	ld	r24, Z
     d1c:	8e 83       	std	Y+6, r24	; 0x06
        temp[1] = SBOX[*last4bytes++];
     d1e:	89 81       	ldd	r24, Y+1	; 0x01
     d20:	9a 81       	ldd	r25, Y+2	; 0x02
     d22:	9c 01       	movw	r18, r24
     d24:	2f 5f       	subi	r18, 0xFF	; 255
     d26:	3f 4f       	sbci	r19, 0xFF	; 255
     d28:	3a 83       	std	Y+2, r19	; 0x02
     d2a:	29 83       	std	Y+1, r18	; 0x01
     d2c:	fc 01       	movw	r30, r24
     d2e:	80 81       	ld	r24, Z
     d30:	88 2f       	mov	r24, r24
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	80 50       	subi	r24, 0x00	; 0
     d36:	9e 4f       	sbci	r25, 0xFE	; 254
     d38:	fc 01       	movw	r30, r24
     d3a:	80 81       	ld	r24, Z
     d3c:	8f 83       	std	Y+7, r24	; 0x07
        temp[2] = SBOX[*last4bytes++];
     d3e:	89 81       	ldd	r24, Y+1	; 0x01
     d40:	9a 81       	ldd	r25, Y+2	; 0x02
     d42:	9c 01       	movw	r18, r24
     d44:	2f 5f       	subi	r18, 0xFF	; 255
     d46:	3f 4f       	sbci	r19, 0xFF	; 255
     d48:	3a 83       	std	Y+2, r19	; 0x02
     d4a:	29 83       	std	Y+1, r18	; 0x01
     d4c:	fc 01       	movw	r30, r24
     d4e:	80 81       	ld	r24, Z
     d50:	88 2f       	mov	r24, r24
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	80 50       	subi	r24, 0x00	; 0
     d56:	9e 4f       	sbci	r25, 0xFE	; 254
     d58:	fc 01       	movw	r30, r24
     d5a:	80 81       	ld	r24, Z
     d5c:	88 87       	std	Y+8, r24	; 0x08
        temp[0] ^= RC[i];
     d5e:	2e 81       	ldd	r18, Y+6	; 0x06
     d60:	8b 81       	ldd	r24, Y+3	; 0x03
     d62:	88 2f       	mov	r24, r24
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	80 50       	subi	r24, 0x00	; 0
     d68:	9d 4f       	sbci	r25, 0xFD	; 253
     d6a:	fc 01       	movw	r30, r24
     d6c:	80 81       	ld	r24, Z
     d6e:	82 27       	eor	r24, r18
     d70:	8e 83       	std	Y+6, r24	; 0x06
        lastround = roundkeys-16;
     d72:	8c 85       	ldd	r24, Y+12	; 0x0c
     d74:	9d 85       	ldd	r25, Y+13	; 0x0d
     d76:	40 97       	sbiw	r24, 0x10	; 16
     d78:	9d 83       	std	Y+5, r25	; 0x05
     d7a:	8c 83       	std	Y+4, r24	; 0x04
        *roundkeys++ = temp[0] ^ *lastround++;
     d7c:	8c 85       	ldd	r24, Y+12	; 0x0c
     d7e:	9d 85       	ldd	r25, Y+13	; 0x0d
     d80:	9c 01       	movw	r18, r24
     d82:	2f 5f       	subi	r18, 0xFF	; 255
     d84:	3f 4f       	sbci	r19, 0xFF	; 255
     d86:	3d 87       	std	Y+13, r19	; 0x0d
     d88:	2c 87       	std	Y+12, r18	; 0x0c
     d8a:	6e 81       	ldd	r22, Y+6	; 0x06
     d8c:	2c 81       	ldd	r18, Y+4	; 0x04
     d8e:	3d 81       	ldd	r19, Y+5	; 0x05
     d90:	a9 01       	movw	r20, r18
     d92:	4f 5f       	subi	r20, 0xFF	; 255
     d94:	5f 4f       	sbci	r21, 0xFF	; 255
     d96:	5d 83       	std	Y+5, r21	; 0x05
     d98:	4c 83       	std	Y+4, r20	; 0x04
     d9a:	f9 01       	movw	r30, r18
     d9c:	20 81       	ld	r18, Z
     d9e:	26 27       	eor	r18, r22
     da0:	fc 01       	movw	r30, r24
     da2:	20 83       	st	Z, r18
        *roundkeys++ = temp[1] ^ *lastround++;
     da4:	8c 85       	ldd	r24, Y+12	; 0x0c
     da6:	9d 85       	ldd	r25, Y+13	; 0x0d
     da8:	9c 01       	movw	r18, r24
     daa:	2f 5f       	subi	r18, 0xFF	; 255
     dac:	3f 4f       	sbci	r19, 0xFF	; 255
     dae:	3d 87       	std	Y+13, r19	; 0x0d
     db0:	2c 87       	std	Y+12, r18	; 0x0c
     db2:	6f 81       	ldd	r22, Y+7	; 0x07
     db4:	2c 81       	ldd	r18, Y+4	; 0x04
     db6:	3d 81       	ldd	r19, Y+5	; 0x05
     db8:	a9 01       	movw	r20, r18
     dba:	4f 5f       	subi	r20, 0xFF	; 255
     dbc:	5f 4f       	sbci	r21, 0xFF	; 255
     dbe:	5d 83       	std	Y+5, r21	; 0x05
     dc0:	4c 83       	std	Y+4, r20	; 0x04
     dc2:	f9 01       	movw	r30, r18
     dc4:	20 81       	ld	r18, Z
     dc6:	26 27       	eor	r18, r22
     dc8:	fc 01       	movw	r30, r24
     dca:	20 83       	st	Z, r18
        *roundkeys++ = temp[2] ^ *lastround++;
     dcc:	8c 85       	ldd	r24, Y+12	; 0x0c
     dce:	9d 85       	ldd	r25, Y+13	; 0x0d
     dd0:	9c 01       	movw	r18, r24
     dd2:	2f 5f       	subi	r18, 0xFF	; 255
     dd4:	3f 4f       	sbci	r19, 0xFF	; 255
     dd6:	3d 87       	std	Y+13, r19	; 0x0d
     dd8:	2c 87       	std	Y+12, r18	; 0x0c
     dda:	68 85       	ldd	r22, Y+8	; 0x08
     ddc:	2c 81       	ldd	r18, Y+4	; 0x04
     dde:	3d 81       	ldd	r19, Y+5	; 0x05
     de0:	a9 01       	movw	r20, r18
     de2:	4f 5f       	subi	r20, 0xFF	; 255
     de4:	5f 4f       	sbci	r21, 0xFF	; 255
     de6:	5d 83       	std	Y+5, r21	; 0x05
     de8:	4c 83       	std	Y+4, r20	; 0x04
     dea:	f9 01       	movw	r30, r18
     dec:	20 81       	ld	r18, Z
     dee:	26 27       	eor	r18, r22
     df0:	fc 01       	movw	r30, r24
     df2:	20 83       	st	Z, r18
        *roundkeys++ = temp[3] ^ *lastround++;
     df4:	8c 85       	ldd	r24, Y+12	; 0x0c
     df6:	9d 85       	ldd	r25, Y+13	; 0x0d
     df8:	9c 01       	movw	r18, r24
     dfa:	2f 5f       	subi	r18, 0xFF	; 255
     dfc:	3f 4f       	sbci	r19, 0xFF	; 255
     dfe:	3d 87       	std	Y+13, r19	; 0x0d
     e00:	2c 87       	std	Y+12, r18	; 0x0c
     e02:	69 85       	ldd	r22, Y+9	; 0x09
     e04:	2c 81       	ldd	r18, Y+4	; 0x04
     e06:	3d 81       	ldd	r19, Y+5	; 0x05
     e08:	a9 01       	movw	r20, r18
     e0a:	4f 5f       	subi	r20, 0xFF	; 255
     e0c:	5f 4f       	sbci	r21, 0xFF	; 255
     e0e:	5d 83       	std	Y+5, r21	; 0x05
     e10:	4c 83       	std	Y+4, r20	; 0x04
     e12:	f9 01       	movw	r30, r18
     e14:	20 81       	ld	r18, Z
     e16:	26 27       	eor	r18, r22
     e18:	fc 01       	movw	r30, r24
     e1a:	20 83       	st	Z, r18
        // k4-k7 for next round        
        *roundkeys++ = *last4bytes++ ^ *lastround++;
     e1c:	8c 85       	ldd	r24, Y+12	; 0x0c
     e1e:	9d 85       	ldd	r25, Y+13	; 0x0d
     e20:	9c 01       	movw	r18, r24
     e22:	2f 5f       	subi	r18, 0xFF	; 255
     e24:	3f 4f       	sbci	r19, 0xFF	; 255
     e26:	3d 87       	std	Y+13, r19	; 0x0d
     e28:	2c 87       	std	Y+12, r18	; 0x0c
     e2a:	29 81       	ldd	r18, Y+1	; 0x01
     e2c:	3a 81       	ldd	r19, Y+2	; 0x02
     e2e:	a9 01       	movw	r20, r18
     e30:	4f 5f       	subi	r20, 0xFF	; 255
     e32:	5f 4f       	sbci	r21, 0xFF	; 255
     e34:	5a 83       	std	Y+2, r21	; 0x02
     e36:	49 83       	std	Y+1, r20	; 0x01
     e38:	f9 01       	movw	r30, r18
     e3a:	60 81       	ld	r22, Z
     e3c:	2c 81       	ldd	r18, Y+4	; 0x04
     e3e:	3d 81       	ldd	r19, Y+5	; 0x05
     e40:	a9 01       	movw	r20, r18
     e42:	4f 5f       	subi	r20, 0xFF	; 255
     e44:	5f 4f       	sbci	r21, 0xFF	; 255
     e46:	5d 83       	std	Y+5, r21	; 0x05
     e48:	4c 83       	std	Y+4, r20	; 0x04
     e4a:	f9 01       	movw	r30, r18
     e4c:	20 81       	ld	r18, Z
     e4e:	26 27       	eor	r18, r22
     e50:	fc 01       	movw	r30, r24
     e52:	20 83       	st	Z, r18
        *roundkeys++ = *last4bytes++ ^ *lastround++;
     e54:	8c 85       	ldd	r24, Y+12	; 0x0c
     e56:	9d 85       	ldd	r25, Y+13	; 0x0d
     e58:	9c 01       	movw	r18, r24
     e5a:	2f 5f       	subi	r18, 0xFF	; 255
     e5c:	3f 4f       	sbci	r19, 0xFF	; 255
     e5e:	3d 87       	std	Y+13, r19	; 0x0d
     e60:	2c 87       	std	Y+12, r18	; 0x0c
     e62:	29 81       	ldd	r18, Y+1	; 0x01
     e64:	3a 81       	ldd	r19, Y+2	; 0x02
     e66:	a9 01       	movw	r20, r18
     e68:	4f 5f       	subi	r20, 0xFF	; 255
     e6a:	5f 4f       	sbci	r21, 0xFF	; 255
     e6c:	5a 83       	std	Y+2, r21	; 0x02
     e6e:	49 83       	std	Y+1, r20	; 0x01
     e70:	f9 01       	movw	r30, r18
     e72:	60 81       	ld	r22, Z
     e74:	2c 81       	ldd	r18, Y+4	; 0x04
     e76:	3d 81       	ldd	r19, Y+5	; 0x05
     e78:	a9 01       	movw	r20, r18
     e7a:	4f 5f       	subi	r20, 0xFF	; 255
     e7c:	5f 4f       	sbci	r21, 0xFF	; 255
     e7e:	5d 83       	std	Y+5, r21	; 0x05
     e80:	4c 83       	std	Y+4, r20	; 0x04
     e82:	f9 01       	movw	r30, r18
     e84:	20 81       	ld	r18, Z
     e86:	26 27       	eor	r18, r22
     e88:	fc 01       	movw	r30, r24
     e8a:	20 83       	st	Z, r18
        *roundkeys++ = *last4bytes++ ^ *lastround++;
     e8c:	8c 85       	ldd	r24, Y+12	; 0x0c
     e8e:	9d 85       	ldd	r25, Y+13	; 0x0d
     e90:	9c 01       	movw	r18, r24
     e92:	2f 5f       	subi	r18, 0xFF	; 255
     e94:	3f 4f       	sbci	r19, 0xFF	; 255
     e96:	3d 87       	std	Y+13, r19	; 0x0d
     e98:	2c 87       	std	Y+12, r18	; 0x0c
     e9a:	29 81       	ldd	r18, Y+1	; 0x01
     e9c:	3a 81       	ldd	r19, Y+2	; 0x02
     e9e:	a9 01       	movw	r20, r18
     ea0:	4f 5f       	subi	r20, 0xFF	; 255
     ea2:	5f 4f       	sbci	r21, 0xFF	; 255
     ea4:	5a 83       	std	Y+2, r21	; 0x02
     ea6:	49 83       	std	Y+1, r20	; 0x01
     ea8:	f9 01       	movw	r30, r18
     eaa:	60 81       	ld	r22, Z
     eac:	2c 81       	ldd	r18, Y+4	; 0x04
     eae:	3d 81       	ldd	r19, Y+5	; 0x05
     eb0:	a9 01       	movw	r20, r18
     eb2:	4f 5f       	subi	r20, 0xFF	; 255
     eb4:	5f 4f       	sbci	r21, 0xFF	; 255
     eb6:	5d 83       	std	Y+5, r21	; 0x05
     eb8:	4c 83       	std	Y+4, r20	; 0x04
     eba:	f9 01       	movw	r30, r18
     ebc:	20 81       	ld	r18, Z
     ebe:	26 27       	eor	r18, r22
     ec0:	fc 01       	movw	r30, r24
     ec2:	20 83       	st	Z, r18
        *roundkeys++ = *last4bytes++ ^ *lastround++;
     ec4:	8c 85       	ldd	r24, Y+12	; 0x0c
     ec6:	9d 85       	ldd	r25, Y+13	; 0x0d
     ec8:	9c 01       	movw	r18, r24
     eca:	2f 5f       	subi	r18, 0xFF	; 255
     ecc:	3f 4f       	sbci	r19, 0xFF	; 255
     ece:	3d 87       	std	Y+13, r19	; 0x0d
     ed0:	2c 87       	std	Y+12, r18	; 0x0c
     ed2:	29 81       	ldd	r18, Y+1	; 0x01
     ed4:	3a 81       	ldd	r19, Y+2	; 0x02
     ed6:	a9 01       	movw	r20, r18
     ed8:	4f 5f       	subi	r20, 0xFF	; 255
     eda:	5f 4f       	sbci	r21, 0xFF	; 255
     edc:	5a 83       	std	Y+2, r21	; 0x02
     ede:	49 83       	std	Y+1, r20	; 0x01
     ee0:	f9 01       	movw	r30, r18
     ee2:	60 81       	ld	r22, Z
     ee4:	2c 81       	ldd	r18, Y+4	; 0x04
     ee6:	3d 81       	ldd	r19, Y+5	; 0x05
     ee8:	a9 01       	movw	r20, r18
     eea:	4f 5f       	subi	r20, 0xFF	; 255
     eec:	5f 4f       	sbci	r21, 0xFF	; 255
     eee:	5d 83       	std	Y+5, r21	; 0x05
     ef0:	4c 83       	std	Y+4, r20	; 0x04
     ef2:	f9 01       	movw	r30, r18
     ef4:	20 81       	ld	r18, Z
     ef6:	26 27       	eor	r18, r22
     ef8:	fc 01       	movw	r30, r24
     efa:	20 83       	st	Z, r18
        // k8-k11 for next round
        *roundkeys++ = *last4bytes++ ^ *lastround++;
     efc:	8c 85       	ldd	r24, Y+12	; 0x0c
     efe:	9d 85       	ldd	r25, Y+13	; 0x0d
     f00:	9c 01       	movw	r18, r24
     f02:	2f 5f       	subi	r18, 0xFF	; 255
     f04:	3f 4f       	sbci	r19, 0xFF	; 255
     f06:	3d 87       	std	Y+13, r19	; 0x0d
     f08:	2c 87       	std	Y+12, r18	; 0x0c
     f0a:	29 81       	ldd	r18, Y+1	; 0x01
     f0c:	3a 81       	ldd	r19, Y+2	; 0x02
     f0e:	a9 01       	movw	r20, r18
     f10:	4f 5f       	subi	r20, 0xFF	; 255
     f12:	5f 4f       	sbci	r21, 0xFF	; 255
     f14:	5a 83       	std	Y+2, r21	; 0x02
     f16:	49 83       	std	Y+1, r20	; 0x01
     f18:	f9 01       	movw	r30, r18
     f1a:	60 81       	ld	r22, Z
     f1c:	2c 81       	ldd	r18, Y+4	; 0x04
     f1e:	3d 81       	ldd	r19, Y+5	; 0x05
     f20:	a9 01       	movw	r20, r18
     f22:	4f 5f       	subi	r20, 0xFF	; 255
     f24:	5f 4f       	sbci	r21, 0xFF	; 255
     f26:	5d 83       	std	Y+5, r21	; 0x05
     f28:	4c 83       	std	Y+4, r20	; 0x04
     f2a:	f9 01       	movw	r30, r18
     f2c:	20 81       	ld	r18, Z
     f2e:	26 27       	eor	r18, r22
     f30:	fc 01       	movw	r30, r24
     f32:	20 83       	st	Z, r18
        *roundkeys++ = *last4bytes++ ^ *lastround++;
     f34:	8c 85       	ldd	r24, Y+12	; 0x0c
     f36:	9d 85       	ldd	r25, Y+13	; 0x0d
     f38:	9c 01       	movw	r18, r24
     f3a:	2f 5f       	subi	r18, 0xFF	; 255
     f3c:	3f 4f       	sbci	r19, 0xFF	; 255
     f3e:	3d 87       	std	Y+13, r19	; 0x0d
     f40:	2c 87       	std	Y+12, r18	; 0x0c
     f42:	29 81       	ldd	r18, Y+1	; 0x01
     f44:	3a 81       	ldd	r19, Y+2	; 0x02
     f46:	a9 01       	movw	r20, r18
     f48:	4f 5f       	subi	r20, 0xFF	; 255
     f4a:	5f 4f       	sbci	r21, 0xFF	; 255
     f4c:	5a 83       	std	Y+2, r21	; 0x02
     f4e:	49 83       	std	Y+1, r20	; 0x01
     f50:	f9 01       	movw	r30, r18
     f52:	60 81       	ld	r22, Z
     f54:	2c 81       	ldd	r18, Y+4	; 0x04
     f56:	3d 81       	ldd	r19, Y+5	; 0x05
     f58:	a9 01       	movw	r20, r18
     f5a:	4f 5f       	subi	r20, 0xFF	; 255
     f5c:	5f 4f       	sbci	r21, 0xFF	; 255
     f5e:	5d 83       	std	Y+5, r21	; 0x05
     f60:	4c 83       	std	Y+4, r20	; 0x04
     f62:	f9 01       	movw	r30, r18
     f64:	20 81       	ld	r18, Z
     f66:	26 27       	eor	r18, r22
     f68:	fc 01       	movw	r30, r24
     f6a:	20 83       	st	Z, r18
        *roundkeys++ = *last4bytes++ ^ *lastround++;
     f6c:	8c 85       	ldd	r24, Y+12	; 0x0c
     f6e:	9d 85       	ldd	r25, Y+13	; 0x0d
     f70:	9c 01       	movw	r18, r24
     f72:	2f 5f       	subi	r18, 0xFF	; 255
     f74:	3f 4f       	sbci	r19, 0xFF	; 255
     f76:	3d 87       	std	Y+13, r19	; 0x0d
     f78:	2c 87       	std	Y+12, r18	; 0x0c
     f7a:	29 81       	ldd	r18, Y+1	; 0x01
     f7c:	3a 81       	ldd	r19, Y+2	; 0x02
     f7e:	a9 01       	movw	r20, r18
     f80:	4f 5f       	subi	r20, 0xFF	; 255
     f82:	5f 4f       	sbci	r21, 0xFF	; 255
     f84:	5a 83       	std	Y+2, r21	; 0x02
     f86:	49 83       	std	Y+1, r20	; 0x01
     f88:	f9 01       	movw	r30, r18
     f8a:	60 81       	ld	r22, Z
     f8c:	2c 81       	ldd	r18, Y+4	; 0x04
     f8e:	3d 81       	ldd	r19, Y+5	; 0x05
     f90:	a9 01       	movw	r20, r18
     f92:	4f 5f       	subi	r20, 0xFF	; 255
     f94:	5f 4f       	sbci	r21, 0xFF	; 255
     f96:	5d 83       	std	Y+5, r21	; 0x05
     f98:	4c 83       	std	Y+4, r20	; 0x04
     f9a:	f9 01       	movw	r30, r18
     f9c:	20 81       	ld	r18, Z
     f9e:	26 27       	eor	r18, r22
     fa0:	fc 01       	movw	r30, r24
     fa2:	20 83       	st	Z, r18
        *roundkeys++ = *last4bytes++ ^ *lastround++;
     fa4:	8c 85       	ldd	r24, Y+12	; 0x0c
     fa6:	9d 85       	ldd	r25, Y+13	; 0x0d
     fa8:	9c 01       	movw	r18, r24
     faa:	2f 5f       	subi	r18, 0xFF	; 255
     fac:	3f 4f       	sbci	r19, 0xFF	; 255
     fae:	3d 87       	std	Y+13, r19	; 0x0d
     fb0:	2c 87       	std	Y+12, r18	; 0x0c
     fb2:	29 81       	ldd	r18, Y+1	; 0x01
     fb4:	3a 81       	ldd	r19, Y+2	; 0x02
     fb6:	a9 01       	movw	r20, r18
     fb8:	4f 5f       	subi	r20, 0xFF	; 255
     fba:	5f 4f       	sbci	r21, 0xFF	; 255
     fbc:	5a 83       	std	Y+2, r21	; 0x02
     fbe:	49 83       	std	Y+1, r20	; 0x01
     fc0:	f9 01       	movw	r30, r18
     fc2:	60 81       	ld	r22, Z
     fc4:	2c 81       	ldd	r18, Y+4	; 0x04
     fc6:	3d 81       	ldd	r19, Y+5	; 0x05
     fc8:	a9 01       	movw	r20, r18
     fca:	4f 5f       	subi	r20, 0xFF	; 255
     fcc:	5f 4f       	sbci	r21, 0xFF	; 255
     fce:	5d 83       	std	Y+5, r21	; 0x05
     fd0:	4c 83       	std	Y+4, r20	; 0x04
     fd2:	f9 01       	movw	r30, r18
     fd4:	20 81       	ld	r18, Z
     fd6:	26 27       	eor	r18, r22
     fd8:	fc 01       	movw	r30, r24
     fda:	20 83       	st	Z, r18
        // k12-k15 for next round
        *roundkeys++ = *last4bytes++ ^ *lastround++;
     fdc:	8c 85       	ldd	r24, Y+12	; 0x0c
     fde:	9d 85       	ldd	r25, Y+13	; 0x0d
     fe0:	9c 01       	movw	r18, r24
     fe2:	2f 5f       	subi	r18, 0xFF	; 255
     fe4:	3f 4f       	sbci	r19, 0xFF	; 255
     fe6:	3d 87       	std	Y+13, r19	; 0x0d
     fe8:	2c 87       	std	Y+12, r18	; 0x0c
     fea:	29 81       	ldd	r18, Y+1	; 0x01
     fec:	3a 81       	ldd	r19, Y+2	; 0x02
     fee:	a9 01       	movw	r20, r18
     ff0:	4f 5f       	subi	r20, 0xFF	; 255
     ff2:	5f 4f       	sbci	r21, 0xFF	; 255
     ff4:	5a 83       	std	Y+2, r21	; 0x02
     ff6:	49 83       	std	Y+1, r20	; 0x01
     ff8:	f9 01       	movw	r30, r18
     ffa:	60 81       	ld	r22, Z
     ffc:	2c 81       	ldd	r18, Y+4	; 0x04
     ffe:	3d 81       	ldd	r19, Y+5	; 0x05
    1000:	a9 01       	movw	r20, r18
    1002:	4f 5f       	subi	r20, 0xFF	; 255
    1004:	5f 4f       	sbci	r21, 0xFF	; 255
    1006:	5d 83       	std	Y+5, r21	; 0x05
    1008:	4c 83       	std	Y+4, r20	; 0x04
    100a:	f9 01       	movw	r30, r18
    100c:	20 81       	ld	r18, Z
    100e:	26 27       	eor	r18, r22
    1010:	fc 01       	movw	r30, r24
    1012:	20 83       	st	Z, r18
        *roundkeys++ = *last4bytes++ ^ *lastround++;
    1014:	8c 85       	ldd	r24, Y+12	; 0x0c
    1016:	9d 85       	ldd	r25, Y+13	; 0x0d
    1018:	9c 01       	movw	r18, r24
    101a:	2f 5f       	subi	r18, 0xFF	; 255
    101c:	3f 4f       	sbci	r19, 0xFF	; 255
    101e:	3d 87       	std	Y+13, r19	; 0x0d
    1020:	2c 87       	std	Y+12, r18	; 0x0c
    1022:	29 81       	ldd	r18, Y+1	; 0x01
    1024:	3a 81       	ldd	r19, Y+2	; 0x02
    1026:	a9 01       	movw	r20, r18
    1028:	4f 5f       	subi	r20, 0xFF	; 255
    102a:	5f 4f       	sbci	r21, 0xFF	; 255
    102c:	5a 83       	std	Y+2, r21	; 0x02
    102e:	49 83       	std	Y+1, r20	; 0x01
    1030:	f9 01       	movw	r30, r18
    1032:	60 81       	ld	r22, Z
    1034:	2c 81       	ldd	r18, Y+4	; 0x04
    1036:	3d 81       	ldd	r19, Y+5	; 0x05
    1038:	a9 01       	movw	r20, r18
    103a:	4f 5f       	subi	r20, 0xFF	; 255
    103c:	5f 4f       	sbci	r21, 0xFF	; 255
    103e:	5d 83       	std	Y+5, r21	; 0x05
    1040:	4c 83       	std	Y+4, r20	; 0x04
    1042:	f9 01       	movw	r30, r18
    1044:	20 81       	ld	r18, Z
    1046:	26 27       	eor	r18, r22
    1048:	fc 01       	movw	r30, r24
    104a:	20 83       	st	Z, r18
        *roundkeys++ = *last4bytes++ ^ *lastround++;
    104c:	8c 85       	ldd	r24, Y+12	; 0x0c
    104e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1050:	9c 01       	movw	r18, r24
    1052:	2f 5f       	subi	r18, 0xFF	; 255
    1054:	3f 4f       	sbci	r19, 0xFF	; 255
    1056:	3d 87       	std	Y+13, r19	; 0x0d
    1058:	2c 87       	std	Y+12, r18	; 0x0c
    105a:	29 81       	ldd	r18, Y+1	; 0x01
    105c:	3a 81       	ldd	r19, Y+2	; 0x02
    105e:	a9 01       	movw	r20, r18
    1060:	4f 5f       	subi	r20, 0xFF	; 255
    1062:	5f 4f       	sbci	r21, 0xFF	; 255
    1064:	5a 83       	std	Y+2, r21	; 0x02
    1066:	49 83       	std	Y+1, r20	; 0x01
    1068:	f9 01       	movw	r30, r18
    106a:	60 81       	ld	r22, Z
    106c:	2c 81       	ldd	r18, Y+4	; 0x04
    106e:	3d 81       	ldd	r19, Y+5	; 0x05
    1070:	a9 01       	movw	r20, r18
    1072:	4f 5f       	subi	r20, 0xFF	; 255
    1074:	5f 4f       	sbci	r21, 0xFF	; 255
    1076:	5d 83       	std	Y+5, r21	; 0x05
    1078:	4c 83       	std	Y+4, r20	; 0x04
    107a:	f9 01       	movw	r30, r18
    107c:	20 81       	ld	r18, Z
    107e:	26 27       	eor	r18, r22
    1080:	fc 01       	movw	r30, r24
    1082:	20 83       	st	Z, r18
        *roundkeys++ = *last4bytes++ ^ *lastround++;
    1084:	8c 85       	ldd	r24, Y+12	; 0x0c
    1086:	9d 85       	ldd	r25, Y+13	; 0x0d
    1088:	9c 01       	movw	r18, r24
    108a:	2f 5f       	subi	r18, 0xFF	; 255
    108c:	3f 4f       	sbci	r19, 0xFF	; 255
    108e:	3d 87       	std	Y+13, r19	; 0x0d
    1090:	2c 87       	std	Y+12, r18	; 0x0c
    1092:	29 81       	ldd	r18, Y+1	; 0x01
    1094:	3a 81       	ldd	r19, Y+2	; 0x02
    1096:	a9 01       	movw	r20, r18
    1098:	4f 5f       	subi	r20, 0xFF	; 255
    109a:	5f 4f       	sbci	r21, 0xFF	; 255
    109c:	5a 83       	std	Y+2, r21	; 0x02
    109e:	49 83       	std	Y+1, r20	; 0x01
    10a0:	f9 01       	movw	r30, r18
    10a2:	60 81       	ld	r22, Z
    10a4:	2c 81       	ldd	r18, Y+4	; 0x04
    10a6:	3d 81       	ldd	r19, Y+5	; 0x05
    10a8:	a9 01       	movw	r20, r18
    10aa:	4f 5f       	subi	r20, 0xFF	; 255
    10ac:	5f 4f       	sbci	r21, 0xFF	; 255
    10ae:	5d 83       	std	Y+5, r21	; 0x05
    10b0:	4c 83       	std	Y+4, r20	; 0x04
    10b2:	f9 01       	movw	r30, r18
    10b4:	20 81       	ld	r18, Z
    10b6:	26 27       	eor	r18, r22
    10b8:	fc 01       	movw	r30, r24
    10ba:	20 83       	st	Z, r18
    for (i = 0; i < 16; ++i) {
        *roundkeys++ = *key++;
    }

    last4bytes = roundkeys-4;
    for (i = 0; i < AES_ROUNDS; ++i) {
    10bc:	8b 81       	ldd	r24, Y+3	; 0x03
    10be:	8f 5f       	subi	r24, 0xFF	; 255
    10c0:	8b 83       	std	Y+3, r24	; 0x03
    10c2:	8b 81       	ldd	r24, Y+3	; 0x03
    10c4:	8a 30       	cpi	r24, 0x0A	; 10
    10c6:	08 f4       	brcc	.+2      	; 0x10ca <aes_key_schedule_128+0x44a>
    10c8:	0a ce       	rjmp	.-1004   	; 0xcde <aes_key_schedule_128+0x5e>
        *roundkeys++ = *last4bytes++ ^ *lastround++;
        *roundkeys++ = *last4bytes++ ^ *lastround++;
        *roundkeys++ = *last4bytes++ ^ *lastround++;
        *roundkeys++ = *last4bytes++ ^ *lastround++;
    }
}
    10ca:	00 00       	nop
    10cc:	2d 96       	adiw	r28, 0x0d	; 13
    10ce:	0f b6       	in	r0, 0x3f	; 63
    10d0:	f8 94       	cli
    10d2:	de bf       	out	0x3e, r29	; 62
    10d4:	0f be       	out	0x3f, r0	; 63
    10d6:	cd bf       	out	0x3d, r28	; 61
    10d8:	df 91       	pop	r29
    10da:	cf 91       	pop	r28
    10dc:	08 95       	ret

000010de <main>:
#include "aes_decrypt.h"
#include "aes_encrypt.h"
#include "aes_schedule.h"


int main(void) {
    10de:	cf 93       	push	r28
    10e0:	df 93       	push	r29
    10e2:	cd b7       	in	r28, 0x3d	; 61
    10e4:	de b7       	in	r29, 0x3e	; 62
    10e6:	c0 5e       	subi	r28, 0xE0	; 224
    10e8:	d1 09       	sbc	r29, r1
    10ea:	0f b6       	in	r0, 0x3f	; 63
    10ec:	f8 94       	cli
    10ee:	de bf       	out	0x3e, r29	; 62
    10f0:	0f be       	out	0x3f, r0	; 63
    10f2:	cd bf       	out	0x3d, r28	; 61
	

	/* 128 bit key */
	
	
	 uint8_t key[] = {
    10f4:	20 e1       	ldi	r18, 0x10	; 16
    10f6:	ea e0       	ldi	r30, 0x0A	; 10
    10f8:	f3 e0       	ldi	r31, 0x03	; 3
    10fa:	ce 01       	movw	r24, r28
    10fc:	01 96       	adiw	r24, 0x01	; 1
    10fe:	dc 01       	movw	r26, r24
    1100:	01 90       	ld	r0, Z+
    1102:	0d 92       	st	X+, r0
    1104:	2a 95       	dec	r18
    1106:	e1 f7       	brne	.-8      	; 0x1100 <main+0x22>
		0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
		0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 

	};

	uint8_t plaintext[] = {
    1108:	80 e1       	ldi	r24, 0x10	; 16
    110a:	ea e1       	ldi	r30, 0x1A	; 26
    110c:	f3 e0       	ldi	r31, 0x03	; 3
    110e:	de 01       	movw	r26, r28
    1110:	51 96       	adiw	r26, 0x11	; 17
    1112:	01 90       	ld	r0, Z+
    1114:	0d 92       	st	X+, r0
    1116:	8a 95       	dec	r24
    1118:	e1 f7       	brne	.-8      	; 0x1112 <main+0x34>
	};*/
	
	uint8_t roundkeys[AES_ROUND_KEY_SIZE];

	// key schedule
	aes_key_schedule_128(key, roundkeys);
    111a:	ce 01       	movw	r24, r28
    111c:	c1 96       	adiw	r24, 0x31	; 49
    111e:	bc 01       	movw	r22, r24
    1120:	ce 01       	movw	r24, r28
    1122:	01 96       	adiw	r24, 0x01	; 1
    1124:	0e 94 40 06 	call	0xc80	; 0xc80 <aes_key_schedule_128>

	// encryption
	aes_encrypt_128(roundkeys, plaintext, ciphertext);
    1128:	ae 01       	movw	r20, r28
    112a:	4f 5d       	subi	r20, 0xDF	; 223
    112c:	5f 4f       	sbci	r21, 0xFF	; 255
    112e:	9e 01       	movw	r18, r28
    1130:	2f 5e       	subi	r18, 0xEF	; 239
    1132:	3f 4f       	sbci	r19, 0xFF	; 255
    1134:	ce 01       	movw	r24, r28
    1136:	c1 96       	adiw	r24, 0x31	; 49
    1138:	b9 01       	movw	r22, r18
    113a:	0e 94 44 04 	call	0x888	; 0x888 <aes_encrypt_128>




	// decryption
	aes_decrypt_128(roundkeys, ciphertext, ciphertext);
    113e:	ae 01       	movw	r20, r28
    1140:	4f 5d       	subi	r20, 0xDF	; 223
    1142:	5f 4f       	sbci	r21, 0xFF	; 255
    1144:	9e 01       	movw	r18, r28
    1146:	2f 5d       	subi	r18, 0xDF	; 223
    1148:	3f 4f       	sbci	r19, 0xFF	; 255
    114a:	ce 01       	movw	r24, r28
    114c:	c1 96       	adiw	r24, 0x31	; 49
    114e:	b9 01       	movw	r22, r18
    1150:	0e 94 e6 00 	call	0x1cc	; 0x1cc <aes_decrypt_128>

	

	return 0;
    1154:	80 e0       	ldi	r24, 0x00	; 0
    1156:	90 e0       	ldi	r25, 0x00	; 0
}
    1158:	c0 52       	subi	r28, 0x20	; 32
    115a:	df 4f       	sbci	r29, 0xFF	; 255
    115c:	0f b6       	in	r0, 0x3f	; 63
    115e:	f8 94       	cli
    1160:	de bf       	out	0x3e, r29	; 62
    1162:	0f be       	out	0x3f, r0	; 63
    1164:	cd bf       	out	0x3d, r28	; 61
    1166:	df 91       	pop	r29
    1168:	cf 91       	pop	r28
    116a:	08 95       	ret

0000116c <_exit>:
    116c:	f8 94       	cli

0000116e <__stop_program>:
    116e:	ff cf       	rjmp	.-2      	; 0x116e <__stop_program>

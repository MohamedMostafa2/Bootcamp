
SmartLightWithInterrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000043e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000004b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  000004b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000520  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b61  00000000  00000000  000005e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006d3  00000000  00000000  00001149  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000641  00000000  00000000  0000181c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000154  00000000  00000000  00001e60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042d  00000000  00000000  00001fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000512  00000000  00000000  000023e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000028f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 fb 01 	jmp	0x3f6	; 0x3f6 <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 e1 01 	jmp	0x3c2	; 0x3c2 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 4b 01 	call	0x296	; 0x296 <main>
  74:	0c 94 1d 02 	jmp	0x43a	; 0x43a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_WritePin>:
	else{
		/* Do Nothing */
	}
	
	return LOW; /* Default State if PinNum is Out of Range */
}
  7c:	88 30       	cpi	r24, 0x08	; 8
  7e:	e8 f4       	brcc	.+58     	; 0xba <DIO_WritePin+0x3e>
  80:	61 11       	cpse	r22, r1
  82:	0e c0       	rjmp	.+28     	; 0xa0 <DIO_WritePin+0x24>
  84:	4b b3       	in	r20, 0x1b	; 27
  86:	21 e0       	ldi	r18, 0x01	; 1
  88:	30 e0       	ldi	r19, 0x00	; 0
  8a:	b9 01       	movw	r22, r18
  8c:	02 c0       	rjmp	.+4      	; 0x92 <DIO_WritePin+0x16>
  8e:	66 0f       	add	r22, r22
  90:	77 1f       	adc	r23, r23
  92:	8a 95       	dec	r24
  94:	e2 f7       	brpl	.-8      	; 0x8e <DIO_WritePin+0x12>
  96:	cb 01       	movw	r24, r22
  98:	80 95       	com	r24
  9a:	84 23       	and	r24, r20
  9c:	8b bb       	out	0x1b, r24	; 27
  9e:	08 95       	ret
  a0:	4b b3       	in	r20, 0x1b	; 27
  a2:	21 e0       	ldi	r18, 0x01	; 1
  a4:	30 e0       	ldi	r19, 0x00	; 0
  a6:	b9 01       	movw	r22, r18
  a8:	02 c0       	rjmp	.+4      	; 0xae <DIO_WritePin+0x32>
  aa:	66 0f       	add	r22, r22
  ac:	77 1f       	adc	r23, r23
  ae:	8a 95       	dec	r24
  b0:	e2 f7       	brpl	.-8      	; 0xaa <DIO_WritePin+0x2e>
  b2:	cb 01       	movw	r24, r22
  b4:	84 2b       	or	r24, r20
  b6:	8b bb       	out	0x1b, r24	; 27
  b8:	08 95       	ret
  ba:	98 ef       	ldi	r25, 0xF8	; 248
  bc:	98 0f       	add	r25, r24
  be:	98 30       	cpi	r25, 0x08	; 8
  c0:	e8 f4       	brcc	.+58     	; 0xfc <DIO_WritePin+0x80>
  c2:	61 11       	cpse	r22, r1
  c4:	0e c0       	rjmp	.+28     	; 0xe2 <DIO_WritePin+0x66>
  c6:	48 b3       	in	r20, 0x18	; 24
  c8:	21 e0       	ldi	r18, 0x01	; 1
  ca:	30 e0       	ldi	r19, 0x00	; 0
  cc:	b9 01       	movw	r22, r18
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <DIO_WritePin+0x58>
  d0:	66 0f       	add	r22, r22
  d2:	77 1f       	adc	r23, r23
  d4:	9a 95       	dec	r25
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <DIO_WritePin+0x54>
  d8:	cb 01       	movw	r24, r22
  da:	80 95       	com	r24
  dc:	84 23       	and	r24, r20
  de:	88 bb       	out	0x18, r24	; 24
  e0:	08 95       	ret
  e2:	48 b3       	in	r20, 0x18	; 24
  e4:	21 e0       	ldi	r18, 0x01	; 1
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	b9 01       	movw	r22, r18
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <DIO_WritePin+0x74>
  ec:	66 0f       	add	r22, r22
  ee:	77 1f       	adc	r23, r23
  f0:	9a 95       	dec	r25
  f2:	e2 f7       	brpl	.-8      	; 0xec <DIO_WritePin+0x70>
  f4:	cb 01       	movw	r24, r22
  f6:	84 2b       	or	r24, r20
  f8:	88 bb       	out	0x18, r24	; 24
  fa:	08 95       	ret
  fc:	90 ef       	ldi	r25, 0xF0	; 240
  fe:	98 0f       	add	r25, r24
 100:	98 30       	cpi	r25, 0x08	; 8
 102:	e8 f4       	brcc	.+58     	; 0x13e <DIO_WritePin+0xc2>
 104:	61 11       	cpse	r22, r1
 106:	0e c0       	rjmp	.+28     	; 0x124 <DIO_WritePin+0xa8>
 108:	45 b3       	in	r20, 0x15	; 21
 10a:	21 e0       	ldi	r18, 0x01	; 1
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	b9 01       	movw	r22, r18
 110:	02 c0       	rjmp	.+4      	; 0x116 <DIO_WritePin+0x9a>
 112:	66 0f       	add	r22, r22
 114:	77 1f       	adc	r23, r23
 116:	9a 95       	dec	r25
 118:	e2 f7       	brpl	.-8      	; 0x112 <DIO_WritePin+0x96>
 11a:	cb 01       	movw	r24, r22
 11c:	80 95       	com	r24
 11e:	84 23       	and	r24, r20
 120:	85 bb       	out	0x15, r24	; 21
 122:	08 95       	ret
 124:	45 b3       	in	r20, 0x15	; 21
 126:	21 e0       	ldi	r18, 0x01	; 1
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	b9 01       	movw	r22, r18
 12c:	02 c0       	rjmp	.+4      	; 0x132 <DIO_WritePin+0xb6>
 12e:	66 0f       	add	r22, r22
 130:	77 1f       	adc	r23, r23
 132:	9a 95       	dec	r25
 134:	e2 f7       	brpl	.-8      	; 0x12e <DIO_WritePin+0xb2>
 136:	cb 01       	movw	r24, r22
 138:	84 2b       	or	r24, r20
 13a:	85 bb       	out	0x15, r24	; 21
 13c:	08 95       	ret
 13e:	88 51       	subi	r24, 0x18	; 24
 140:	88 30       	cpi	r24, 0x08	; 8
 142:	e0 f4       	brcc	.+56     	; 0x17c <DIO_WritePin+0x100>
 144:	61 11       	cpse	r22, r1
 146:	0e c0       	rjmp	.+28     	; 0x164 <DIO_WritePin+0xe8>
 148:	42 b3       	in	r20, 0x12	; 18
 14a:	21 e0       	ldi	r18, 0x01	; 1
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	b9 01       	movw	r22, r18
 150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_WritePin+0xda>
 152:	66 0f       	add	r22, r22
 154:	77 1f       	adc	r23, r23
 156:	8a 95       	dec	r24
 158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_WritePin+0xd6>
 15a:	cb 01       	movw	r24, r22
 15c:	80 95       	com	r24
 15e:	84 23       	and	r24, r20
 160:	82 bb       	out	0x12, r24	; 18
 162:	08 95       	ret
 164:	42 b3       	in	r20, 0x12	; 18
 166:	21 e0       	ldi	r18, 0x01	; 1
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	b9 01       	movw	r22, r18
 16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_WritePin+0xf6>
 16e:	66 0f       	add	r22, r22
 170:	77 1f       	adc	r23, r23
 172:	8a 95       	dec	r24
 174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_WritePin+0xf2>
 176:	cb 01       	movw	r24, r22
 178:	84 2b       	or	r24, r20
 17a:	82 bb       	out	0x12, r24	; 18
 17c:	08 95       	ret

0000017e <DIO_SetPinDirection>:
* Description : Set Direction To Specific Pin (Input / Output)
*
************************************************************************/
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection){
	
	if( (PinNum >= Pin0) && (PinNum <= Pin7) ){ /* Check If  Pin0 <= PinNum <= Pin7  */
 17e:	88 30       	cpi	r24, 0x08	; 8
 180:	e8 f4       	brcc	.+58     	; 0x1bc <DIO_SetPinDirection+0x3e>
		if(PinDirection == INPUT){ /* Check If Pin Direction = Input */
 182:	61 11       	cpse	r22, r1
 184:	0e c0       	rjmp	.+28     	; 0x1a2 <DIO_SetPinDirection+0x24>
			Clear_Bit(DDRA,PinNum); /* Clear Bit (PinNum) on DDRA Register  */
 186:	4a b3       	in	r20, 0x1a	; 26
 188:	21 e0       	ldi	r18, 0x01	; 1
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	b9 01       	movw	r22, r18
 18e:	02 c0       	rjmp	.+4      	; 0x194 <DIO_SetPinDirection+0x16>
 190:	66 0f       	add	r22, r22
 192:	77 1f       	adc	r23, r23
 194:	8a 95       	dec	r24
 196:	e2 f7       	brpl	.-8      	; 0x190 <DIO_SetPinDirection+0x12>
 198:	cb 01       	movw	r24, r22
 19a:	80 95       	com	r24
 19c:	84 23       	and	r24, r20
 19e:	8a bb       	out	0x1a, r24	; 26
 1a0:	08 95       	ret
		}                           /* Ex. PinNum = 2 ,Then Clear Bit 2 on DDRA Register */
		else{ /* Default State is Set Bit Direction to Output */
			Set_Bit(DDRA,PinNum);  /* Set Bit (PinNum) on DDRA Register  */
 1a2:	4a b3       	in	r20, 0x1a	; 26
 1a4:	21 e0       	ldi	r18, 0x01	; 1
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	b9 01       	movw	r22, r18
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <DIO_SetPinDirection+0x32>
 1ac:	66 0f       	add	r22, r22
 1ae:	77 1f       	adc	r23, r23
 1b0:	8a 95       	dec	r24
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <DIO_SetPinDirection+0x2e>
 1b4:	cb 01       	movw	r24, r22
 1b6:	84 2b       	or	r24, r20
 1b8:	8a bb       	out	0x1a, r24	; 26
 1ba:	08 95       	ret
		}                          /* Ex. PinNum = 5 ,Then Set Bit 5 on DDRA Register */
	}
	else if( (PinNum >= Pin8) && (PinNum <= Pin15) ){ /* Check If  Pin8 <= PinNum <= Pin15  */
 1bc:	98 ef       	ldi	r25, 0xF8	; 248
 1be:	98 0f       	add	r25, r24
 1c0:	98 30       	cpi	r25, 0x08	; 8
 1c2:	e8 f4       	brcc	.+58     	; 0x1fe <DIO_SetPinDirection+0x80>
		if(PinDirection == INPUT){  /* Check If Pin Direction = Input */
 1c4:	61 11       	cpse	r22, r1
 1c6:	0e c0       	rjmp	.+28     	; 0x1e4 <DIO_SetPinDirection+0x66>
			Clear_Bit(DDRB,PinNum-Pin8); /* Clear Bit (PinNum - 8) on DDRB Register  */
 1c8:	47 b3       	in	r20, 0x17	; 23
 1ca:	21 e0       	ldi	r18, 0x01	; 1
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	b9 01       	movw	r22, r18
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <DIO_SetPinDirection+0x58>
 1d2:	66 0f       	add	r22, r22
 1d4:	77 1f       	adc	r23, r23
 1d6:	9a 95       	dec	r25
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <DIO_SetPinDirection+0x54>
 1da:	cb 01       	movw	r24, r22
 1dc:	80 95       	com	r24
 1de:	84 23       	and	r24, r20
 1e0:	87 bb       	out	0x17, r24	; 23
 1e2:	08 95       	ret
		}                                /* Ex. PinNum = 9 ,Then Clear Bit 1 on DDRB Register */                       
		else{ /* Default State is Set Bit Direction to Output */
			Set_Bit(DDRB,PinNum-Pin8);  /* Set Bit (PinNum - 8) on DDRA Register  */
 1e4:	47 b3       	in	r20, 0x17	; 23
 1e6:	21 e0       	ldi	r18, 0x01	; 1
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	b9 01       	movw	r22, r18
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <DIO_SetPinDirection+0x74>
 1ee:	66 0f       	add	r22, r22
 1f0:	77 1f       	adc	r23, r23
 1f2:	9a 95       	dec	r25
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <DIO_SetPinDirection+0x70>
 1f6:	cb 01       	movw	r24, r22
 1f8:	84 2b       	or	r24, r20
 1fa:	87 bb       	out	0x17, r24	; 23
 1fc:	08 95       	ret
		}                               /* Ex. PinNum = 10 ,Then Set Bit 2 on DDRA Register */
	}
	else if( (PinNum >= Pin16) && (PinNum <= Pin23) ){ /* Check If  Pin16 <= PinNum <= Pin23  */
 1fe:	90 ef       	ldi	r25, 0xF0	; 240
 200:	98 0f       	add	r25, r24
 202:	98 30       	cpi	r25, 0x08	; 8
 204:	e8 f4       	brcc	.+58     	; 0x240 <DIO_SetPinDirection+0xc2>
		if(PinDirection == INPUT){  /* Check If Pin Direction = Input */
 206:	61 11       	cpse	r22, r1
 208:	0e c0       	rjmp	.+28     	; 0x226 <DIO_SetPinDirection+0xa8>
			Clear_Bit(DDRC,PinNum-Pin16);/* Clear Bit (PinNum - 16) on DDRC Register  */
 20a:	44 b3       	in	r20, 0x14	; 20
 20c:	21 e0       	ldi	r18, 0x01	; 1
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	b9 01       	movw	r22, r18
 212:	02 c0       	rjmp	.+4      	; 0x218 <DIO_SetPinDirection+0x9a>
 214:	66 0f       	add	r22, r22
 216:	77 1f       	adc	r23, r23
 218:	9a 95       	dec	r25
 21a:	e2 f7       	brpl	.-8      	; 0x214 <DIO_SetPinDirection+0x96>
 21c:	cb 01       	movw	r24, r22
 21e:	80 95       	com	r24
 220:	84 23       	and	r24, r20
 222:	84 bb       	out	0x14, r24	; 20
 224:	08 95       	ret
		}                                /* Ex. PinNum = 17 ,Then Clear Bit 1 on DDRC Register */
		else{ /* Default State is Set Bit Direction to Output */
			Set_Bit(DDRC,PinNum-Pin16);  /* Set Bit (PinNum - 16) on DDRA Register  */
 226:	44 b3       	in	r20, 0x14	; 20
 228:	21 e0       	ldi	r18, 0x01	; 1
 22a:	30 e0       	ldi	r19, 0x00	; 0
 22c:	b9 01       	movw	r22, r18
 22e:	02 c0       	rjmp	.+4      	; 0x234 <DIO_SetPinDirection+0xb6>
 230:	66 0f       	add	r22, r22
 232:	77 1f       	adc	r23, r23
 234:	9a 95       	dec	r25
 236:	e2 f7       	brpl	.-8      	; 0x230 <DIO_SetPinDirection+0xb2>
 238:	cb 01       	movw	r24, r22
 23a:	84 2b       	or	r24, r20
 23c:	84 bb       	out	0x14, r24	; 20
 23e:	08 95       	ret
		}                                /* Ex. PinNum = 18 ,Then Set Bit 2 on DDRA Register */
	}
	else if( (PinNum >= Pin24) && (PinNum <= Pin31) ){ /* Check If  Pin24 <= PinNum <= Pin31  */
 240:	88 51       	subi	r24, 0x18	; 24
 242:	88 30       	cpi	r24, 0x08	; 8
 244:	e0 f4       	brcc	.+56     	; 0x27e <DIO_SetPinDirection+0x100>
		if(PinDirection == INPUT){  /* Check If Pin Direction = Input */
 246:	61 11       	cpse	r22, r1
 248:	0e c0       	rjmp	.+28     	; 0x266 <DIO_SetPinDirection+0xe8>
			Clear_Bit(DDRD,PinNum-Pin24);/* Clear Bit (PinNum - 24) on DDRD Register  */
 24a:	41 b3       	in	r20, 0x11	; 17
 24c:	21 e0       	ldi	r18, 0x01	; 1
 24e:	30 e0       	ldi	r19, 0x00	; 0
 250:	b9 01       	movw	r22, r18
 252:	02 c0       	rjmp	.+4      	; 0x258 <DIO_SetPinDirection+0xda>
 254:	66 0f       	add	r22, r22
 256:	77 1f       	adc	r23, r23
 258:	8a 95       	dec	r24
 25a:	e2 f7       	brpl	.-8      	; 0x254 <DIO_SetPinDirection+0xd6>
 25c:	cb 01       	movw	r24, r22
 25e:	80 95       	com	r24
 260:	84 23       	and	r24, r20
 262:	81 bb       	out	0x11, r24	; 17
 264:	08 95       	ret
		}                                 /* Ex. PinNum = 25 ,Then Clear Bit 1 on DDRD Register */
		else{ /* Default State is Set Bit Direction to Output */
			Set_Bit(DDRD,PinNum-Pin24);  /* Set Bit (PinNum - 24) on DDRA Register  */
 266:	41 b3       	in	r20, 0x11	; 17
 268:	21 e0       	ldi	r18, 0x01	; 1
 26a:	30 e0       	ldi	r19, 0x00	; 0
 26c:	b9 01       	movw	r22, r18
 26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_SetPinDirection+0xf6>
 270:	66 0f       	add	r22, r22
 272:	77 1f       	adc	r23, r23
 274:	8a 95       	dec	r24
 276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_SetPinDirection+0xf2>
 278:	cb 01       	movw	r24, r22
 27a:	84 2b       	or	r24, r20
 27c:	81 bb       	out	0x11, r24	; 17
 27e:	08 95       	ret

00000280 <EnableGlobalInterrupts>:
#include "../Includes/DIO/DIO.h"
#include "../Includes/Interrupts/Interrupts.h"

void EnableGlobalInterrupts(void){
	
	Set_Bit(SREG_REG,GLOBAL_INTERRUPT_ENABLE_BIT);
 280:	8f b7       	in	r24, 0x3f	; 63
 282:	80 68       	ori	r24, 0x80	; 128
 284:	8f bf       	out	0x3f, r24	; 63
 286:	08 95       	ret

00000288 <EnableINT2_Interrupts>:
}

void EnableINT2_Interrupts(void){
	
	Set_Bit(MCUCSR_REG,ISC2_BIT);
 288:	84 b7       	in	r24, 0x34	; 52
 28a:	80 64       	ori	r24, 0x40	; 64
 28c:	84 bf       	out	0x34, r24	; 52
	
	Set_Bit(GICR_REG,INT2_BIT);
 28e:	8b b7       	in	r24, 0x3b	; 59
 290:	80 62       	ori	r24, 0x20	; 32
 292:	8b bf       	out	0x3b, r24	; 59
 294:	08 95       	ret

00000296 <main>:
 
int main(void)
{
	uint8 Break_GO_State = 0;
	
	DIO_SetPinDirection(Pin10,INPUT);
 296:	60 e0       	ldi	r22, 0x00	; 0
 298:	8a e0       	ldi	r24, 0x0A	; 10
 29a:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinDirection>
	
	DIO_SetPinDirection(Pin12,OUTPUT);
 29e:	61 e0       	ldi	r22, 0x01	; 1
 2a0:	8c e0       	ldi	r24, 0x0C	; 12
 2a2:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinDirection>
	DIO_SetPinDirection(Pin13,OUTPUT);
 2a6:	61 e0       	ldi	r22, 0x01	; 1
 2a8:	8d e0       	ldi	r24, 0x0D	; 13
 2aa:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinDirection>
	DIO_SetPinDirection(Pin14,OUTPUT);
 2ae:	61 e0       	ldi	r22, 0x01	; 1
 2b0:	8e e0       	ldi	r24, 0x0E	; 14
 2b2:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinDirection>
	DIO_SetPinDirection(Pin15,OUTPUT);
 2b6:	61 e0       	ldi	r22, 0x01	; 1
 2b8:	8f e0       	ldi	r24, 0x0F	; 15
 2ba:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinDirection>
	
	EnableGlobalInterrupts();
 2be:	0e 94 40 01 	call	0x280	; 0x280 <EnableGlobalInterrupts>
	EnableTimerInterrupt();
 2c2:	0e 94 12 02 	call	0x424	; 0x424 <EnableTimerInterrupt>
	EnableINT2_Interrupts();
 2c6:	0e 94 44 01 	call	0x288	; 0x288 <EnableINT2_Interrupts>
	timer_init();
 2ca:	0e 94 0a 02 	call	0x414	; 0x414 <timer_init>
	StartTimer();
 2ce:	0e 94 16 02 	call	0x42c	; 0x42c <StartTimer>
    while (1) 
    {
		
		if ( TOV_Flag == 1){
 2d2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <TOV_Flag>
 2d6:	81 30       	cpi	r24, 0x01	; 1
 2d8:	09 f0       	breq	.+2      	; 0x2dc <main+0x46>
 2da:	5d c0       	rjmp	.+186    	; 0x396 <main+0x100>
			DIO_WritePin(Pin12,HIGH);
 2dc:	61 e0       	ldi	r22, 0x01	; 1
 2de:	8c e0       	ldi	r24, 0x0C	; 12
 2e0:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
			DIO_WritePin(Pin14,LOW);
 2e4:	60 e0       	ldi	r22, 0x00	; 0
 2e6:	8e e0       	ldi	r24, 0x0E	; 14
 2e8:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
			DIO_WritePin(Pin13,LOW);
 2ec:	60 e0       	ldi	r22, 0x00	; 0
 2ee:	8d e0       	ldi	r24, 0x0D	; 13
 2f0:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
			TOV_Flag = 0;
 2f4:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <TOV_Flag>
			while(1){
				if (TOV_Flag == 1){
 2f8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <TOV_Flag>
 2fc:	81 30       	cpi	r24, 0x01	; 1
 2fe:	b1 f5       	brne	.+108    	; 0x36c <main+0xd6>
					
					DIO_WritePin(Pin12,LOW);
 300:	60 e0       	ldi	r22, 0x00	; 0
 302:	8c e0       	ldi	r24, 0x0C	; 12
 304:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
					DIO_WritePin(Pin14,HIGH);
 308:	61 e0       	ldi	r22, 0x01	; 1
 30a:	8e e0       	ldi	r24, 0x0E	; 14
 30c:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
					DIO_WritePin(Pin13,LOW);
 310:	60 e0       	ldi	r22, 0x00	; 0
 312:	8d e0       	ldi	r24, 0x0D	; 13
 314:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
					TOV_Flag = 0;
 318:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <TOV_Flag>
					
					while(1){
						if (TOV_Flag == 1){
 31c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <TOV_Flag>
 320:	81 30       	cpi	r24, 0x01	; 1
 322:	79 f4       	brne	.+30     	; 0x342 <main+0xac>
							DIO_WritePin(Pin12,LOW);
 324:	60 e0       	ldi	r22, 0x00	; 0
 326:	8c e0       	ldi	r24, 0x0C	; 12
 328:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
							DIO_WritePin(Pin14,LOW);
 32c:	60 e0       	ldi	r22, 0x00	; 0
 32e:	8e e0       	ldi	r24, 0x0E	; 14
 330:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
							DIO_WritePin(Pin13,HIGH);
 334:	61 e0       	ldi	r22, 0x01	; 1
 336:	8d e0       	ldi	r24, 0x0D	; 13
 338:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
							TOV_Flag = 0;
 33c:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <TOV_Flag>
							Break_GO_State = 1 ;
							break;
 340:	c8 cf       	rjmp	.-112    	; 0x2d2 <main+0x3c>
						}
						else{
							
							if (INT2_Flag == 1){						
 342:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <INT2_Flag>
 346:	81 30       	cpi	r24, 0x01	; 1
 348:	49 f7       	brne	.-46     	; 0x31c <main+0x86>
								DIO_WritePin(Pin12,HIGH);
 34a:	61 e0       	ldi	r22, 0x01	; 1
 34c:	8c e0       	ldi	r24, 0x0C	; 12
 34e:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
								DIO_WritePin(Pin14,LOW);
 352:	60 e0       	ldi	r22, 0x00	; 0
 354:	8e e0       	ldi	r24, 0x0E	; 14
 356:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
								DIO_WritePin(Pin13,LOW);
 35a:	60 e0       	ldi	r22, 0x00	; 0
 35c:	8d e0       	ldi	r24, 0x0D	; 13
 35e:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
								INT2_Flag = 0;
 362:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <INT2_Flag>
								TOV_Flag = 0;
 366:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <TOV_Flag>
								Break_GO_State = 1 ;
								break;
 36a:	b3 cf       	rjmp	.-154    	; 0x2d2 <main+0x3c>
					}
					
				} /* second if */
				else{
					
					if (INT2_Flag == 1){
 36c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <INT2_Flag>
 370:	81 30       	cpi	r24, 0x01	; 1
 372:	11 f6       	brne	.-124    	; 0x2f8 <main+0x62>
						DIO_WritePin(Pin12,LOW);
 374:	60 e0       	ldi	r22, 0x00	; 0
 376:	8c e0       	ldi	r24, 0x0C	; 12
 378:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
						DIO_WritePin(Pin14,HIGH);
 37c:	61 e0       	ldi	r22, 0x01	; 1
 37e:	8e e0       	ldi	r24, 0x0E	; 14
 380:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
						DIO_WritePin(Pin13,LOW);
 384:	60 e0       	ldi	r22, 0x00	; 0
 386:	8d e0       	ldi	r24, 0x0D	; 13
 388:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
						INT2_Flag = 0;
 38c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <INT2_Flag>
						TOV_Flag = 0;
 390:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <TOV_Flag>
						break;
 394:	9e cf       	rjmp	.-196    	; 0x2d2 <main+0x3c>
			} /*while */
			
		} /* first if */
		else{
			
			if (INT2_Flag == 1){
 396:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <INT2_Flag>
 39a:	81 30       	cpi	r24, 0x01	; 1
 39c:	09 f0       	breq	.+2      	; 0x3a0 <main+0x10a>
 39e:	99 cf       	rjmp	.-206    	; 0x2d2 <main+0x3c>
				DIO_WritePin(Pin12,LOW);
 3a0:	60 e0       	ldi	r22, 0x00	; 0
 3a2:	8c e0       	ldi	r24, 0x0C	; 12
 3a4:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
				DIO_WritePin(Pin14,HIGH);
 3a8:	61 e0       	ldi	r22, 0x01	; 1
 3aa:	8e e0       	ldi	r24, 0x0E	; 14
 3ac:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
				DIO_WritePin(Pin13,LOW);
 3b0:	60 e0       	ldi	r22, 0x00	; 0
 3b2:	8d e0       	ldi	r24, 0x0D	; 13
 3b4:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
				INT2_Flag = 0;
 3b8:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <INT2_Flag>
				TOV_Flag = 0;
 3bc:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <TOV_Flag>
 3c0:	88 cf       	rjmp	.-240    	; 0x2d2 <main+0x3c>

000003c2 <__vector_11>:
				
        }
  }
}

ISR(TIMER0_OVF_vect){
 3c2:	1f 92       	push	r1
 3c4:	0f 92       	push	r0
 3c6:	0f b6       	in	r0, 0x3f	; 63
 3c8:	0f 92       	push	r0
 3ca:	11 24       	eor	r1, r1
 3cc:	8f 93       	push	r24
	
	TimerCounter++;
 3ce:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 3d2:	8f 5f       	subi	r24, 0xFF	; 255
 3d4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	if (TimerCounter == 255)
 3d8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 3dc:	8f 3f       	cpi	r24, 0xFF	; 255
 3de:	29 f4       	brne	.+10     	; 0x3ea <__vector_11+0x28>
	{
		TOV_Flag = 1;
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <TOV_Flag>
		TimerCounter = 0;
 3e6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
	}
}
 3ea:	8f 91       	pop	r24
 3ec:	0f 90       	pop	r0
 3ee:	0f be       	out	0x3f, r0	; 63
 3f0:	0f 90       	pop	r0
 3f2:	1f 90       	pop	r1
 3f4:	18 95       	reti

000003f6 <__vector_3>:

ISR(INT2_vect){
 3f6:	1f 92       	push	r1
 3f8:	0f 92       	push	r0
 3fa:	0f b6       	in	r0, 0x3f	; 63
 3fc:	0f 92       	push	r0
 3fe:	11 24       	eor	r1, r1
 400:	8f 93       	push	r24
	
	INT2_Flag = 1;
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <INT2_Flag>
 408:	8f 91       	pop	r24
 40a:	0f 90       	pop	r0
 40c:	0f be       	out	0x3f, r0	; 63
 40e:	0f 90       	pop	r0
 410:	1f 90       	pop	r1
 412:	18 95       	reti

00000414 <timer_init>:
	
}

void timer_init(void){
	
	TCNT0_REG = 0x00; /* Timer Value = 0*/
 414:	12 be       	out	0x32, r1	; 50
	
	Clear_Bit(TCCR0_REG,WGM00_BIT); /* Normal Mode */
 416:	83 b7       	in	r24, 0x33	; 51
 418:	87 7f       	andi	r24, 0xF7	; 247
 41a:	83 bf       	out	0x33, r24	; 51
	Clear_Bit(TCCR0_REG,WGM01_BIT); 
 41c:	83 b7       	in	r24, 0x33	; 51
 41e:	8f 7b       	andi	r24, 0xBF	; 191
 420:	83 bf       	out	0x33, r24	; 51
 422:	08 95       	ret

00000424 <EnableTimerInterrupt>:
	
}

void EnableTimerInterrupt(void){
	
	Set_Bit(TIMSK_REG,TOIE0_BIT);
 424:	89 b7       	in	r24, 0x39	; 57
 426:	81 60       	ori	r24, 0x01	; 1
 428:	89 bf       	out	0x39, r24	; 57
 42a:	08 95       	ret

0000042c <StartTimer>:
	
}

void StartTimer(void){
	
	Set_Bit(TCCR0_REG,CS00_BIT); /* 64 prescaler */
 42c:	83 b7       	in	r24, 0x33	; 51
 42e:	81 60       	ori	r24, 0x01	; 1
 430:	83 bf       	out	0x33, r24	; 51
	Set_Bit(TCCR0_REG,CS01_BIT);
 432:	83 b7       	in	r24, 0x33	; 51
 434:	82 60       	ori	r24, 0x02	; 2
 436:	83 bf       	out	0x33, r24	; 51
 438:	08 95       	ret

0000043a <_exit>:
 43a:	f8 94       	cli

0000043c <__stop_program>:
 43c:	ff cf       	rjmp	.-2      	; 0x43c <__stop_program>
